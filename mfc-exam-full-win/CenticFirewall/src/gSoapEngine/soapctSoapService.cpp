/* soapctSoapService.cpp
   Generated by gSOAP 2.8.23 from ctSoap.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapctSoapService.h"

ctSoapService::ctSoapService() : soap(SOAP_IO_DEFAULT)
{	ctSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ctSoapService::ctSoapService(const struct soap &_soap) : soap(_soap)
{ }

ctSoapService::ctSoapService(soap_mode iomode) : soap(iomode)
{	ctSoapService_init(iomode, iomode);
}

ctSoapService::ctSoapService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ctSoapService_init(imode, omode);
}

ctSoapService::~ctSoapService()
{
	this->destroy();
}

void ctSoapService::ctSoapService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:ctSoap", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void ctSoapService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ctSoapService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ctSoapService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ctSoapService *ctSoapService::copy()
{	ctSoapService *dup = SOAP_NEW_COPY(ctSoapService(*(struct soap*)this));
	return dup;
}
#endif

int ctSoapService::soap_close_socket()
{	return soap_closesock(this);
}

int ctSoapService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int ctSoapService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ctSoapService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ctSoapService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ctSoapService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ctSoapService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ctSoapService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ctSoapService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ctSoapService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *ctSoapService::soap_header()
{	return this->header;
}

int ctSoapService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this);
			soap_end(this);
		}
	}
	return this->error;
}

SOAP_SOCKET ctSoapService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ctSoapService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ctSoapService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int ctSoapService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__putData(ctSoapService*);
static int serve_ns__getData(ctSoapService*);
static int serve_ns__getImage(ctSoapService*);
static int serve_ns__login(ctSoapService*);
static int serve_ns__getRuntimeInfo(ctSoapService*);

int ctSoapService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:putData"))
		return serve_ns__putData(this);
	if (!soap_match_tag(this, this->tag, "ns:getData"))
		return serve_ns__getData(this);
	if (!soap_match_tag(this, this->tag, "ns:getImage"))
		return serve_ns__getImage(this);
	if (!soap_match_tag(this, this->tag, "ns:login"))
		return serve_ns__login(this);
	if (!soap_match_tag(this, this->tag, "ns:getRuntimeInfo"))
		return serve_ns__getRuntimeInfo(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__putData(ctSoapService *soap)
{	struct ns__putData soap_tmp_ns__putData;
	struct ns__putDataResponse soap_tmp_ns__putDataResponse;
	arrayOfName soap_tmp_arrayOfName;
	soap_default_ns__putDataResponse(soap, &soap_tmp_ns__putDataResponse);
	soap_tmp_arrayOfName.soap_default(soap);
	soap_tmp_ns__putDataResponse.names = &soap_tmp_arrayOfName;
	soap_default_ns__putData(soap, &soap_tmp_ns__putData);
	if (!soap_get_ns__putData(soap, &soap_tmp_ns__putData, "ns:putData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->putData(soap_tmp_ns__putData.data, soap_tmp_ns__putDataResponse.names);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__putDataResponse(soap, &soap_tmp_ns__putDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__putDataResponse(soap, &soap_tmp_ns__putDataResponse, "ns:putDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__putDataResponse(soap, &soap_tmp_ns__putDataResponse, "ns:putDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__getData(ctSoapService *soap)
{	struct ns__getData soap_tmp_ns__getData;
	struct ns__getDataResponse soap_tmp_ns__getDataResponse;
	arrayOfData soap_tmp_arrayOfData;
	soap_default_ns__getDataResponse(soap, &soap_tmp_ns__getDataResponse);
	soap_tmp_arrayOfData.soap_default(soap);
	soap_tmp_ns__getDataResponse.data = &soap_tmp_arrayOfData;
	soap_default_ns__getData(soap, &soap_tmp_ns__getData);
	if (!soap_get_ns__getData(soap, &soap_tmp_ns__getData, "ns:getData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getData(soap_tmp_ns__getData.names, soap_tmp_ns__getDataResponse.data);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getDataResponse(soap, &soap_tmp_ns__getDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getDataResponse(soap, &soap_tmp_ns__getDataResponse, "ns:getDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getDataResponse(soap, &soap_tmp_ns__getDataResponse, "ns:getDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__getImage(ctSoapService *soap)
{	struct ns__getImage soap_tmp_ns__getImage;
	struct ns__getImageResponse soap_tmp_ns__getImageResponse;
	soap_default_ns__getImageResponse(soap, &soap_tmp_ns__getImageResponse);
	soap_default_ns__getImage(soap, &soap_tmp_ns__getImage);
	if (!soap_get_ns__getImage(soap, &soap_tmp_ns__getImage, "ns:getImage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getImage(soap_tmp_ns__getImage.name, soap_tmp_ns__getImageResponse.image);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getImageResponse(soap, &soap_tmp_ns__getImageResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getImageResponse(soap, &soap_tmp_ns__getImageResponse, "ns:getImageResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getImageResponse(soap, &soap_tmp_ns__getImageResponse, "ns:getImageResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__login(ctSoapService *soap)
{	struct ns__login soap_tmp_ns__login;
	struct ns__loginResponse soap_tmp_ns__loginResponse;
	bool soap_tmp_bool;
	soap_default_ns__loginResponse(soap, &soap_tmp_ns__loginResponse);
	soap_default_bool(soap, &soap_tmp_bool);
	soap_tmp_ns__loginResponse.ret = &soap_tmp_bool;
	soap_default_ns__login(soap, &soap_tmp_ns__login);
	if (!soap_get_ns__login(soap, &soap_tmp_ns__login, "ns:login", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->login(soap_tmp_ns__login.username, soap_tmp_ns__login.passwd, soap_tmp_ns__loginResponse.ret);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__loginResponse(soap, &soap_tmp_ns__loginResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__loginResponse(soap, &soap_tmp_ns__loginResponse, "ns:loginResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__loginResponse(soap, &soap_tmp_ns__loginResponse, "ns:loginResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__getRuntimeInfo(ctSoapService *soap)
{	struct ns__getRuntimeInfo soap_tmp_ns__getRuntimeInfo;
	struct ns__getRuntimeInfoResponse soap_tmp_ns__getRuntimeInfoResponse;
	struct _Struct_9 soap_tmp_RuntimeInfo_t;
	soap_default_ns__getRuntimeInfoResponse(soap, &soap_tmp_ns__getRuntimeInfoResponse);
	soap_default_RuntimeInfo_t(soap, &soap_tmp_RuntimeInfo_t);
	soap_tmp_ns__getRuntimeInfoResponse.ret = &soap_tmp_RuntimeInfo_t;
	soap_default_ns__getRuntimeInfo(soap, &soap_tmp_ns__getRuntimeInfo);
	if (!soap_get_ns__getRuntimeInfo(soap, &soap_tmp_ns__getRuntimeInfo, "ns:getRuntimeInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getRuntimeInfo(soap_tmp_ns__getRuntimeInfo._param_10, soap_tmp_ns__getRuntimeInfoResponse.ret);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__getRuntimeInfoResponse(soap, &soap_tmp_ns__getRuntimeInfoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getRuntimeInfoResponse(soap, &soap_tmp_ns__getRuntimeInfoResponse, "ns:getRuntimeInfoResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getRuntimeInfoResponse(soap, &soap_tmp_ns__getRuntimeInfoResponse, "ns:getRuntimeInfoResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
