/* soapH.h
   Generated by gSOAP 2.8.23 from ctSoap.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data), 0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data), 0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data), 0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_legend_t
#define SOAP_TYPE_legend_t (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_legend_t(struct soap*, enum legend_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_legend_t(struct soap*, const char*, int, const enum legend_t *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_legend_t2s(struct soap*, enum legend_t);
SOAP_FMAC3 enum legend_t * SOAP_FMAC4 soap_in_legend_t(struct soap*, const char*, enum legend_t *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2legend_t(struct soap*, const char*, enum legend_t *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_legend_t(struct soap*, const enum legend_t *, const char*, const char*);

#ifndef soap_write_legend_t
#define soap_write_legend_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_legend_t(soap, data), 0) || soap_put_legend_t(soap, data, "legend-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum legend_t * SOAP_FMAC4 soap_get_legend_t(struct soap*, enum legend_t *, const char*, const char*);

#ifndef soap_read_legend_t
#define soap_read_legend_t(soap, data) ( soap_begin_recv(soap) || !soap_get_legend_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_SysGraphNumPoint_t
#define SOAP_TYPE_SysGraphNumPoint_t (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SysGraphNumPoint_t(struct soap*, enum SysGraphNumPoint_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysGraphNumPoint_t(struct soap*, const char*, int, const enum SysGraphNumPoint_t *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SysGraphNumPoint_t2s(struct soap*, enum SysGraphNumPoint_t);
SOAP_FMAC3 enum SysGraphNumPoint_t * SOAP_FMAC4 soap_in_SysGraphNumPoint_t(struct soap*, const char*, enum SysGraphNumPoint_t *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SysGraphNumPoint_t(struct soap*, const char*, enum SysGraphNumPoint_t *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SysGraphNumPoint_t(struct soap*, const enum SysGraphNumPoint_t *, const char*, const char*);

#ifndef soap_write_SysGraphNumPoint_t
#define soap_write_SysGraphNumPoint_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SysGraphNumPoint_t(soap, data), 0) || soap_put_SysGraphNumPoint_t(soap, data, "SysGraphNumPoint-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum SysGraphNumPoint_t * SOAP_FMAC4 soap_get_SysGraphNumPoint_t(struct soap*, enum SysGraphNumPoint_t *, const char*, const char*);

#ifndef soap_read_SysGraphNumPoint_t
#define soap_read_SysGraphNumPoint_t(soap, data) ( soap_begin_recv(soap) || !soap_get_SysGraphNumPoint_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_SysGraphMode_t
#define SOAP_TYPE_SysGraphMode_t (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SysGraphMode_t(struct soap*, enum SysGraphMode_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysGraphMode_t(struct soap*, const char*, int, const enum SysGraphMode_t *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SysGraphMode_t2s(struct soap*, enum SysGraphMode_t);
SOAP_FMAC3 enum SysGraphMode_t * SOAP_FMAC4 soap_in_SysGraphMode_t(struct soap*, const char*, enum SysGraphMode_t *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SysGraphMode_t(struct soap*, const char*, enum SysGraphMode_t *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SysGraphMode_t(struct soap*, const enum SysGraphMode_t *, const char*, const char*);

#ifndef soap_write_SysGraphMode_t
#define soap_write_SysGraphMode_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SysGraphMode_t(soap, data), 0) || soap_put_SysGraphMode_t(soap, data, "SysGraphMode-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum SysGraphMode_t * SOAP_FMAC4 soap_get_SysGraphMode_t(struct soap*, enum SysGraphMode_t *, const char*, const char*);

#ifndef soap_read_SysGraphMode_t
#define soap_read_SysGraphMode_t(soap, data) ( soap_begin_recv(soap) || !soap_get_SysGraphMode_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SysShutdownEvent
#define SOAP_TYPE_ns__SysShutdownEvent (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysShutdownEvent(struct soap*, enum ns__SysShutdownEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysShutdownEvent(struct soap*, const char*, int, const enum ns__SysShutdownEvent *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SysShutdownEvent2s(struct soap*, enum ns__SysShutdownEvent);
SOAP_FMAC3 enum ns__SysShutdownEvent * SOAP_FMAC4 soap_in_ns__SysShutdownEvent(struct soap*, const char*, enum ns__SysShutdownEvent *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SysShutdownEvent(struct soap*, const char*, enum ns__SysShutdownEvent *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysShutdownEvent(struct soap*, const enum ns__SysShutdownEvent *, const char*, const char*);

#ifndef soap_write_ns__SysShutdownEvent
#define soap_write_ns__SysShutdownEvent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SysShutdownEvent(soap, data), 0) || soap_put_ns__SysShutdownEvent(soap, data, "ns:SysShutdownEvent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SysShutdownEvent * SOAP_FMAC4 soap_get_ns__SysShutdownEvent(struct soap*, enum ns__SysShutdownEvent *, const char*, const char*);

#ifndef soap_read_ns__SysShutdownEvent
#define soap_read_ns__SysShutdownEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__SysShutdownEvent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__SysBackupEvent
#define SOAP_TYPE_ns__SysBackupEvent (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupEvent(struct soap*, enum ns__SysBackupEvent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupEvent(struct soap*, const char*, int, const enum ns__SysBackupEvent *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SysBackupEvent2s(struct soap*, enum ns__SysBackupEvent);
SOAP_FMAC3 enum ns__SysBackupEvent * SOAP_FMAC4 soap_in_ns__SysBackupEvent(struct soap*, const char*, enum ns__SysBackupEvent *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SysBackupEvent(struct soap*, const char*, enum ns__SysBackupEvent *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupEvent(struct soap*, const enum ns__SysBackupEvent *, const char*, const char*);

#ifndef soap_write_ns__SysBackupEvent
#define soap_write_ns__SysBackupEvent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SysBackupEvent(soap, data), 0) || soap_put_ns__SysBackupEvent(soap, data, "ns:SysBackupEvent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns__SysBackupEvent * SOAP_FMAC4 soap_get_ns__SysBackupEvent(struct soap*, enum ns__SysBackupEvent *, const char*, const char*);

#ifndef soap_read_ns__SysBackupEvent
#define soap_read_ns__SysBackupEvent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__SysBackupEvent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data), 0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ConnTrack_t
#define SOAP_TYPE_ConnTrack_t (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ConnTrack_t(struct soap*, const char*, int, const ConnTrack_t *, const char*);
SOAP_FMAC3 ConnTrack_t * SOAP_FMAC4 soap_in_ConnTrack_t(struct soap*, const char*, ConnTrack_t *, const char*);

#ifndef soap_write_ConnTrack_t
#define soap_write_ConnTrack_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ConnTrack-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ConnTrack_t * SOAP_FMAC4 soap_get_ConnTrack_t(struct soap*, ConnTrack_t *, const char*, const char*);

#ifndef soap_read_ConnTrack_t
#define soap_read_ConnTrack_t(soap, data) ( soap_begin_recv(soap) || !soap_get_ConnTrack_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ConnTrack_t * SOAP_FMAC2 soap_instantiate_ConnTrack_t(struct soap*, int, const char*, const char*, size_t*);

inline ConnTrack_t * soap_new_ConnTrack_t(struct soap *soap, int n = -1) { return soap_instantiate_ConnTrack_t(soap, n, NULL, NULL, NULL); }

inline ConnTrack_t * soap_new_req_ConnTrack_t(struct soap *soap, int protocol, const std::string& sip, const std::string& dip, int sport, int dport, float downSpeed, float upSpeed, int connStatus, float expires, int slegend, int dlegend) { ConnTrack_t *_p = soap_instantiate_ConnTrack_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ConnTrack_t::protocol = protocol; _p->ConnTrack_t::sip = sip; _p->ConnTrack_t::dip = dip; _p->ConnTrack_t::sport = sport; _p->ConnTrack_t::dport = dport; _p->ConnTrack_t::downSpeed = downSpeed; _p->ConnTrack_t::upSpeed = upSpeed; _p->ConnTrack_t::connStatus = connStatus; _p->ConnTrack_t::expires = expires; _p->ConnTrack_t::slegend = slegend; _p->ConnTrack_t::dlegend = dlegend; } return _p; }

inline ConnTrack_t * soap_new_set_ConnTrack_t(struct soap *soap, int protocol, const std::string& sip, const std::string& dip, int sport, int dport, float downSpeed, float upSpeed, int connStatus, float expires, int slegend, int dlegend) { ConnTrack_t *_p = soap_instantiate_ConnTrack_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ConnTrack_t::protocol = protocol; _p->ConnTrack_t::sip = sip; _p->ConnTrack_t::dip = dip; _p->ConnTrack_t::sport = sport; _p->ConnTrack_t::dport = dport; _p->ConnTrack_t::downSpeed = downSpeed; _p->ConnTrack_t::upSpeed = upSpeed; _p->ConnTrack_t::connStatus = connStatus; _p->ConnTrack_t::expires = expires; _p->ConnTrack_t::slegend = slegend; _p->ConnTrack_t::dlegend = dlegend; } return _p; }

inline void soap_delete_ConnTrack_t(struct soap *soap, ConnTrack_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ConnTrack_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_StatusServices_t
#define SOAP_TYPE_StatusServices_t (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StatusServices_t(struct soap*, const char*, int, const StatusServices_t *, const char*);
SOAP_FMAC3 StatusServices_t * SOAP_FMAC4 soap_in_StatusServices_t(struct soap*, const char*, StatusServices_t *, const char*);

#ifndef soap_write_StatusServices_t
#define soap_write_StatusServices_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "StatusServices-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 StatusServices_t * SOAP_FMAC4 soap_get_StatusServices_t(struct soap*, StatusServices_t *, const char*, const char*);

#ifndef soap_read_StatusServices_t
#define soap_read_StatusServices_t(soap, data) ( soap_begin_recv(soap) || !soap_get_StatusServices_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 StatusServices_t * SOAP_FMAC2 soap_instantiate_StatusServices_t(struct soap*, int, const char*, const char*, size_t*);

inline StatusServices_t * soap_new_StatusServices_t(struct soap *soap, int n = -1) { return soap_instantiate_StatusServices_t(soap, n, NULL, NULL, NULL); }

inline StatusServices_t * soap_new_req_StatusServices_t(struct soap *soap, const std::string& name, bool isRunning, int pid, float memory) { StatusServices_t *_p = soap_instantiate_StatusServices_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->StatusServices_t::name = name; _p->StatusServices_t::isRunning = isRunning; _p->StatusServices_t::pid = pid; _p->StatusServices_t::memory = memory; } return _p; }

inline StatusServices_t * soap_new_set_StatusServices_t(struct soap *soap, const std::string& name, bool isRunning, int pid, float memory) { StatusServices_t *_p = soap_instantiate_StatusServices_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->StatusServices_t::name = name; _p->StatusServices_t::isRunning = isRunning; _p->StatusServices_t::pid = pid; _p->StatusServices_t::memory = memory; } return _p; }

inline void soap_delete_StatusServices_t(struct soap *soap, StatusServices_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StatusServices_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_NetworkData_t
#define SOAP_TYPE_NetworkData_t (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetworkData_t(struct soap*, const char*, int, const NetworkData_t *, const char*);
SOAP_FMAC3 NetworkData_t * SOAP_FMAC4 soap_in_NetworkData_t(struct soap*, const char*, NetworkData_t *, const char*);

#ifndef soap_write_NetworkData_t
#define soap_write_NetworkData_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "NetworkData-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 NetworkData_t * SOAP_FMAC4 soap_get_NetworkData_t(struct soap*, NetworkData_t *, const char*, const char*);

#ifndef soap_read_NetworkData_t
#define soap_read_NetworkData_t(soap, data) ( soap_begin_recv(soap) || !soap_get_NetworkData_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 NetworkData_t * SOAP_FMAC2 soap_instantiate_NetworkData_t(struct soap*, int, const char*, const char*, size_t*);

inline NetworkData_t * soap_new_NetworkData_t(struct soap *soap, int n = -1) { return soap_instantiate_NetworkData_t(soap, n, NULL, NULL, NULL); }

inline NetworkData_t * soap_new_req_NetworkData_t(struct soap *soap) { NetworkData_t *_p = soap_instantiate_NetworkData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline NetworkData_t * soap_new_set_NetworkData_t(struct soap *soap, const std::vector<GraphData_t >& graphListData, const std::vector<NetTraffic_t >& netListTraffic) { NetworkData_t *_p = soap_instantiate_NetworkData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->NetworkData_t::graphListData = graphListData; _p->NetworkData_t::netListTraffic = netListTraffic; } return _p; }

inline void soap_delete_NetworkData_t(struct soap *soap, NetworkData_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetworkData_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_NetTraffic_t
#define SOAP_TYPE_NetTraffic_t (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetTraffic_t(struct soap*, const char*, int, const NetTraffic_t *, const char*);
SOAP_FMAC3 NetTraffic_t * SOAP_FMAC4 soap_in_NetTraffic_t(struct soap*, const char*, NetTraffic_t *, const char*);

#ifndef soap_write_NetTraffic_t
#define soap_write_NetTraffic_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "NetTraffic-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 NetTraffic_t * SOAP_FMAC4 soap_get_NetTraffic_t(struct soap*, NetTraffic_t *, const char*, const char*);

#ifndef soap_read_NetTraffic_t
#define soap_read_NetTraffic_t(soap, data) ( soap_begin_recv(soap) || !soap_get_NetTraffic_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 NetTraffic_t * SOAP_FMAC2 soap_instantiate_NetTraffic_t(struct soap*, int, const char*, const char*, size_t*);

inline NetTraffic_t * soap_new_NetTraffic_t(struct soap *soap, int n = -1) { return soap_instantiate_NetTraffic_t(soap, n, NULL, NULL, NULL); }

inline NetTraffic_t * soap_new_req_NetTraffic_t(struct soap *soap, float max, float avg, float min, float current) { NetTraffic_t *_p = soap_instantiate_NetTraffic_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->NetTraffic_t::max = max; _p->NetTraffic_t::avg = avg; _p->NetTraffic_t::min = min; _p->NetTraffic_t::current = current; } return _p; }

inline NetTraffic_t * soap_new_set_NetTraffic_t(struct soap *soap, float max, float avg, float min, float current) { NetTraffic_t *_p = soap_instantiate_NetTraffic_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->NetTraffic_t::max = max; _p->NetTraffic_t::avg = avg; _p->NetTraffic_t::min = min; _p->NetTraffic_t::current = current; } return _p; }

inline void soap_delete_NetTraffic_t(struct soap *soap, NetTraffic_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetTraffic_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_SystemData_t
#define SOAP_TYPE_SystemData_t (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SystemData_t(struct soap*, const char*, int, const SystemData_t *, const char*);
SOAP_FMAC3 SystemData_t * SOAP_FMAC4 soap_in_SystemData_t(struct soap*, const char*, SystemData_t *, const char*);

#ifndef soap_write_SystemData_t
#define soap_write_SystemData_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SystemData-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SystemData_t * SOAP_FMAC4 soap_get_SystemData_t(struct soap*, SystemData_t *, const char*, const char*);

#ifndef soap_read_SystemData_t
#define soap_read_SystemData_t(soap, data) ( soap_begin_recv(soap) || !soap_get_SystemData_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 SystemData_t * SOAP_FMAC2 soap_instantiate_SystemData_t(struct soap*, int, const char*, const char*, size_t*);

inline SystemData_t * soap_new_SystemData_t(struct soap *soap, int n = -1) { return soap_instantiate_SystemData_t(soap, n, NULL, NULL, NULL); }

inline SystemData_t * soap_new_req_SystemData_t(struct soap *soap) { SystemData_t *_p = soap_instantiate_SystemData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline SystemData_t * soap_new_set_SystemData_t(struct soap *soap, const std::vector<GraphData_t >& cpuData, const std::vector<GraphData_t >& memoryData) { SystemData_t *_p = soap_instantiate_SystemData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->SystemData_t::cpuData = cpuData; _p->SystemData_t::memoryData = memoryData; } return _p; }

inline void soap_delete_SystemData_t(struct soap *soap, SystemData_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SystemData_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_GraphData_t
#define SOAP_TYPE_GraphData_t (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_GraphData_t(struct soap*, const char*, int, const GraphData_t *, const char*);
SOAP_FMAC3 GraphData_t * SOAP_FMAC4 soap_in_GraphData_t(struct soap*, const char*, GraphData_t *, const char*);

#ifndef soap_write_GraphData_t
#define soap_write_GraphData_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "GraphData-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 GraphData_t * SOAP_FMAC4 soap_get_GraphData_t(struct soap*, GraphData_t *, const char*, const char*);

#ifndef soap_read_GraphData_t
#define soap_read_GraphData_t(soap, data) ( soap_begin_recv(soap) || !soap_get_GraphData_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 GraphData_t * SOAP_FMAC2 soap_instantiate_GraphData_t(struct soap*, int, const char*, const char*, size_t*);

inline GraphData_t * soap_new_GraphData_t(struct soap *soap, int n = -1) { return soap_instantiate_GraphData_t(soap, n, NULL, NULL, NULL); }

inline GraphData_t * soap_new_req_GraphData_t(struct soap *soap) { GraphData_t *_p = soap_instantiate_GraphData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline GraphData_t * soap_new_set_GraphData_t(struct soap *soap, const std::vector<int >& grapData) { GraphData_t *_p = soap_instantiate_GraphData_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->GraphData_t::grapData = grapData; } return _p; }

inline void soap_delete_GraphData_t(struct soap *soap, GraphData_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_GraphData_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_SysInfo_t
#define SOAP_TYPE_SysInfo_t (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysInfo_t(struct soap*, const char*, int, const SysInfo_t *, const char*);
SOAP_FMAC3 SysInfo_t * SOAP_FMAC4 soap_in_SysInfo_t(struct soap*, const char*, SysInfo_t *, const char*);

#ifndef soap_write_SysInfo_t
#define soap_write_SysInfo_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SysInfo-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SysInfo_t * SOAP_FMAC4 soap_get_SysInfo_t(struct soap*, SysInfo_t *, const char*, const char*);

#ifndef soap_read_SysInfo_t
#define soap_read_SysInfo_t(soap, data) ( soap_begin_recv(soap) || !soap_get_SysInfo_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 SysInfo_t * SOAP_FMAC2 soap_instantiate_SysInfo_t(struct soap*, int, const char*, const char*, size_t*);

inline SysInfo_t * soap_new_SysInfo_t(struct soap *soap, int n = -1) { return soap_instantiate_SysInfo_t(soap, n, NULL, NULL, NULL); }

inline SysInfo_t * soap_new_req_SysInfo_t(struct soap *soap, const std::string& ctfw_version, const std::string& cpu, const std::string& memory) { SysInfo_t *_p = soap_instantiate_SysInfo_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->SysInfo_t::ctfw_version = ctfw_version; _p->SysInfo_t::cpu = cpu; _p->SysInfo_t::memory = memory; } return _p; }

inline SysInfo_t * soap_new_set_SysInfo_t(struct soap *soap, const std::string& ctfw_version, const std::string& cpu, const std::string& memory) { SysInfo_t *_p = soap_instantiate_SysInfo_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->SysInfo_t::ctfw_version = ctfw_version; _p->SysInfo_t::cpu = cpu; _p->SysInfo_t::memory = memory; } return _p; }

inline void soap_delete_SysInfo_t(struct soap *soap, SysInfo_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SysInfo_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_SysBackupRet_t
#define SOAP_TYPE_SysBackupRet_t (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysBackupRet_t(struct soap*, const char*, int, const SysBackupRet_t *, const char*);
SOAP_FMAC3 SysBackupRet_t * SOAP_FMAC4 soap_in_SysBackupRet_t(struct soap*, const char*, SysBackupRet_t *, const char*);

#ifndef soap_write_SysBackupRet_t
#define soap_write_SysBackupRet_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SysBackupRet-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SysBackupRet_t * SOAP_FMAC4 soap_get_SysBackupRet_t(struct soap*, SysBackupRet_t *, const char*, const char*);

#ifndef soap_read_SysBackupRet_t
#define soap_read_SysBackupRet_t(soap, data) ( soap_begin_recv(soap) || !soap_get_SysBackupRet_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 SysBackupRet_t * SOAP_FMAC2 soap_instantiate_SysBackupRet_t(struct soap*, int, const char*, const char*, size_t*);

inline SysBackupRet_t * soap_new_SysBackupRet_t(struct soap *soap, int n = -1) { return soap_instantiate_SysBackupRet_t(soap, n, NULL, NULL, NULL); }

inline SysBackupRet_t * soap_new_req_SysBackupRet_t(struct soap *soap, const std::string& filename) { SysBackupRet_t *_p = soap_instantiate_SysBackupRet_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->SysBackupRet_t::filename = filename; } return _p; }

inline SysBackupRet_t * soap_new_set_SysBackupRet_t(struct soap *soap, const std::string& filename) { SysBackupRet_t *_p = soap_instantiate_SysBackupRet_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->SysBackupRet_t::filename = filename; } return _p; }

inline void soap_delete_SysBackupRet_t(struct soap *soap, SysBackupRet_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SysBackupRet_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_NetInterface_t
#define SOAP_TYPE_NetInterface_t (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetInterface_t(struct soap*, const char*, int, const NetInterface_t *, const char*);
SOAP_FMAC3 NetInterface_t * SOAP_FMAC4 soap_in_NetInterface_t(struct soap*, const char*, NetInterface_t *, const char*);

#ifndef soap_write_NetInterface_t
#define soap_write_NetInterface_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "NetInterface-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 NetInterface_t * SOAP_FMAC4 soap_get_NetInterface_t(struct soap*, NetInterface_t *, const char*, const char*);

#ifndef soap_read_NetInterface_t
#define soap_read_NetInterface_t(soap, data) ( soap_begin_recv(soap) || !soap_get_NetInterface_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 NetInterface_t * SOAP_FMAC2 soap_instantiate_NetInterface_t(struct soap*, int, const char*, const char*, size_t*);

inline NetInterface_t * soap_new_NetInterface_t(struct soap *soap, int n = -1) { return soap_instantiate_NetInterface_t(soap, n, NULL, NULL, NULL); }

inline NetInterface_t * soap_new_req_NetInterface_t(struct soap *soap, const std::string& gw, const std::string& dns) { NetInterface_t *_p = soap_instantiate_NetInterface_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->NetInterface_t::gw = gw; _p->NetInterface_t::dns = dns; } return _p; }

inline NetInterface_t * soap_new_set_NetInterface_t(struct soap *soap, const std::vector<IfInfot_t >& lanIfList, const std::vector<IfInfot_t >& netIfList, const std::string& gw, const std::string& dns) { NetInterface_t *_p = soap_instantiate_NetInterface_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->NetInterface_t::lanIfList = lanIfList; _p->NetInterface_t::netIfList = netIfList; _p->NetInterface_t::gw = gw; _p->NetInterface_t::dns = dns; } return _p; }

inline void soap_delete_NetInterface_t(struct soap *soap, NetInterface_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetInterface_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_IfInfot_t
#define SOAP_TYPE_IfInfot_t (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IfInfot_t(struct soap*, const char*, int, const IfInfot_t *, const char*);
SOAP_FMAC3 IfInfot_t * SOAP_FMAC4 soap_in_IfInfot_t(struct soap*, const char*, IfInfot_t *, const char*);

#ifndef soap_write_IfInfot_t
#define soap_write_IfInfot_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "IfInfot-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 IfInfot_t * SOAP_FMAC4 soap_get_IfInfot_t(struct soap*, IfInfot_t *, const char*, const char*);

#ifndef soap_read_IfInfot_t
#define soap_read_IfInfot_t(soap, data) ( soap_begin_recv(soap) || !soap_get_IfInfot_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 IfInfot_t * SOAP_FMAC2 soap_instantiate_IfInfot_t(struct soap*, int, const char*, const char*, size_t*);

inline IfInfot_t * soap_new_IfInfot_t(struct soap *soap, int n = -1) { return soap_instantiate_IfInfot_t(soap, n, NULL, NULL, NULL); }

inline IfInfot_t * soap_new_req_IfInfot_t(struct soap *soap, const std::string& ifname, const std::string& ip, const std::string& netmask, const std::string& mac, int mtu) { IfInfot_t *_p = soap_instantiate_IfInfot_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->IfInfot_t::ifname = ifname; _p->IfInfot_t::ip = ip; _p->IfInfot_t::netmask = netmask; _p->IfInfot_t::mac = mac; _p->IfInfot_t::mtu = mtu; } return _p; }

inline IfInfot_t * soap_new_set_IfInfot_t(struct soap *soap, const std::string& ifname, const std::string& ip, const std::string& netmask, const std::string& mac, int mtu) { IfInfot_t *_p = soap_instantiate_IfInfot_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->IfInfot_t::ifname = ifname; _p->IfInfot_t::ip = ip; _p->IfInfot_t::netmask = netmask; _p->IfInfot_t::mac = mac; _p->IfInfot_t::mtu = mtu; } return _p; }

inline void soap_delete_IfInfot_t(struct soap *soap, IfInfot_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IfInfot_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RuntimeInfo_t
#define SOAP_TYPE_RuntimeInfo_t (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_RuntimeInfo_t(struct soap*, const char*, int, const RuntimeInfo_t *, const char*);
SOAP_FMAC3 RuntimeInfo_t * SOAP_FMAC4 soap_in_RuntimeInfo_t(struct soap*, const char*, RuntimeInfo_t *, const char*);

#ifndef soap_write_RuntimeInfo_t
#define soap_write_RuntimeInfo_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "RuntimeInfo-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 RuntimeInfo_t * SOAP_FMAC4 soap_get_RuntimeInfo_t(struct soap*, RuntimeInfo_t *, const char*, const char*);

#ifndef soap_read_RuntimeInfo_t
#define soap_read_RuntimeInfo_t(soap, data) ( soap_begin_recv(soap) || !soap_get_RuntimeInfo_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 RuntimeInfo_t * SOAP_FMAC2 soap_instantiate_RuntimeInfo_t(struct soap*, int, const char*, const char*, size_t*);

inline RuntimeInfo_t * soap_new_RuntimeInfo_t(struct soap *soap, int n = -1) { return soap_instantiate_RuntimeInfo_t(soap, n, NULL, NULL, NULL); }

inline RuntimeInfo_t * soap_new_req_RuntimeInfo_t(struct soap *soap, bool isConnected, float inSpeed, float outSpeed) { RuntimeInfo_t *_p = soap_instantiate_RuntimeInfo_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->RuntimeInfo_t::isConnected = isConnected; _p->RuntimeInfo_t::inSpeed = inSpeed; _p->RuntimeInfo_t::outSpeed = outSpeed; } return _p; }

inline RuntimeInfo_t * soap_new_set_RuntimeInfo_t(struct soap *soap, bool isConnected, float inSpeed, float outSpeed) { RuntimeInfo_t *_p = soap_instantiate_RuntimeInfo_t(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->RuntimeInfo_t::isConnected = isConnected; _p->RuntimeInfo_t::inSpeed = inSpeed; _p->RuntimeInfo_t::outSpeed = outSpeed; } return _p; }

inline void soap_delete_RuntimeInfo_t(struct soap *soap, RuntimeInfo_t *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_RuntimeInfo_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data), 0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_arrayOfName
#define SOAP_TYPE_arrayOfName (29)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfName(struct soap*, const char*, int, const arrayOfName *, const char*);
SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_in_arrayOfName(struct soap*, const char*, arrayOfName *, const char*);

#ifndef soap_write_arrayOfName
#define soap_write_arrayOfName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_get_arrayOfName(struct soap*, arrayOfName *, const char*, const char*);

#ifndef soap_read_arrayOfName
#define soap_read_arrayOfName(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayOfName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 arrayOfName * SOAP_FMAC2 soap_instantiate_arrayOfName(struct soap*, int, const char*, const char*, size_t*);

inline arrayOfName * soap_new_arrayOfName(struct soap *soap, int n = -1) { return soap_instantiate_arrayOfName(soap, n, NULL, NULL, NULL); }

inline arrayOfName * soap_new_req_arrayOfName(struct soap *soap) { arrayOfName *_p = soap_instantiate_arrayOfName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline arrayOfName * soap_new_set_arrayOfName(struct soap *soap, char **__ptr, int __size) { arrayOfName *_p = soap_instantiate_arrayOfName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->arrayOfName::__ptr = __ptr; _p->arrayOfName::__size = __size; } return _p; }

inline void soap_delete_arrayOfName(struct soap *soap, arrayOfName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_arrayOfData
#define SOAP_TYPE_arrayOfData (18)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfData(struct soap*, const char*, int, const arrayOfData *, const char*);
SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_in_arrayOfData(struct soap*, const char*, arrayOfData *, const char*);

#ifndef soap_write_arrayOfData
#define soap_write_arrayOfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_get_arrayOfData(struct soap*, arrayOfData *, const char*, const char*);

#ifndef soap_read_arrayOfData
#define soap_read_arrayOfData(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayOfData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 arrayOfData * SOAP_FMAC2 soap_instantiate_arrayOfData(struct soap*, int, const char*, const char*, size_t*);

inline arrayOfData * soap_new_arrayOfData(struct soap *soap, int n = -1) { return soap_instantiate_arrayOfData(soap, n, NULL, NULL, NULL); }

inline arrayOfData * soap_new_req_arrayOfData(struct soap *soap) { arrayOfData *_p = soap_instantiate_arrayOfData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline arrayOfData * soap_new_set_arrayOfData(struct soap *soap, ns__Data *__ptr, int __size) { arrayOfData *_p = soap_instantiate_arrayOfData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->arrayOfData::__ptr = __ptr; _p->arrayOfData::__size = __size; } return _p; }

inline void soap_delete_arrayOfData(struct soap *soap, arrayOfData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Data
#define SOAP_TYPE_ns__Data (10)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Data(struct soap*, const char*, int, const ns__Data *, const char*);
SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_in_ns__Data(struct soap*, const char*, ns__Data *, const char*);

#ifndef soap_write_ns__Data
#define soap_write_ns__Data(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Data", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_get_ns__Data(struct soap*, ns__Data *, const char*, const char*);

#ifndef soap_read_ns__Data
#define soap_read_ns__Data(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Data(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__Data * SOAP_FMAC2 soap_instantiate_ns__Data(struct soap*, int, const char*, const char*, size_t*);

inline ns__Data * soap_new_ns__Data(struct soap *soap, int n = -1) { return soap_instantiate_ns__Data(soap, n, NULL, NULL, NULL); }

inline ns__Data * soap_new_req_ns__Data(struct soap *soap) { ns__Data *_p = soap_instantiate_ns__Data(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__Data * soap_new_set_ns__Data(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { ns__Data *_p = soap_instantiate_ns__Data(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__Data::__ptr = __ptr; _p->ns__Data::__size = __size; _p->ns__Data::id = id; _p->ns__Data::type = type; _p->ns__Data::options = options; } return _p; }

inline void soap_delete_ns__Data(struct soap *soap, ns__Data *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Data(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__getStatusConnection
#define SOAP_TYPE_ns__getStatusConnection (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusConnection(struct soap*, struct ns__getStatusConnection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusConnection(struct soap*, const struct ns__getStatusConnection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusConnection(struct soap*, const char*, int, const struct ns__getStatusConnection *, const char*);
SOAP_FMAC3 struct ns__getStatusConnection * SOAP_FMAC4 soap_in_ns__getStatusConnection(struct soap*, const char*, struct ns__getStatusConnection *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusConnection(struct soap*, const struct ns__getStatusConnection *, const char*, const char*);

#ifndef soap_write_ns__getStatusConnection
#define soap_write_ns__getStatusConnection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusConnection(soap, data), 0) || soap_put_ns__getStatusConnection(soap, data, "ns:getStatusConnection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusConnection * SOAP_FMAC4 soap_get_ns__getStatusConnection(struct soap*, struct ns__getStatusConnection *, const char*, const char*);

#ifndef soap_read_ns__getStatusConnection
#define soap_read_ns__getStatusConnection(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusConnection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusConnection * SOAP_FMAC2 soap_instantiate_ns__getStatusConnection(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusConnection * soap_new_ns__getStatusConnection(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusConnection(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusConnection * soap_new_req_ns__getStatusConnection(struct soap *soap) { struct ns__getStatusConnection *_p = soap_instantiate_ns__getStatusConnection(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusConnection(soap, _p); } return _p; }

inline struct ns__getStatusConnection * soap_new_set_ns__getStatusConnection(struct soap *soap, void *_param_13) { struct ns__getStatusConnection *_p = soap_instantiate_ns__getStatusConnection(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusConnection(soap, _p); _p->_param_13 = _param_13; } return _p; }

inline void soap_delete_ns__getStatusConnection(struct soap *soap, struct ns__getStatusConnection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusConnection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusConnectionResponse
#define SOAP_TYPE_ns__getStatusConnectionResponse (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusConnectionResponse(struct soap*, struct ns__getStatusConnectionResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusConnectionResponse(struct soap*, const struct ns__getStatusConnectionResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusConnectionResponse(struct soap*, const char*, int, const struct ns__getStatusConnectionResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusConnectionResponse * SOAP_FMAC4 soap_in_ns__getStatusConnectionResponse(struct soap*, const char*, struct ns__getStatusConnectionResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusConnectionResponse(struct soap*, const struct ns__getStatusConnectionResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusConnectionResponse
#define soap_write_ns__getStatusConnectionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusConnectionResponse(soap, data), 0) || soap_put_ns__getStatusConnectionResponse(soap, data, "ns:getStatusConnectionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusConnectionResponse * SOAP_FMAC4 soap_get_ns__getStatusConnectionResponse(struct soap*, struct ns__getStatusConnectionResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusConnectionResponse
#define soap_read_ns__getStatusConnectionResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusConnectionResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusConnectionResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusConnectionResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusConnectionResponse * soap_new_ns__getStatusConnectionResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusConnectionResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusConnectionResponse * soap_new_req_ns__getStatusConnectionResponse(struct soap *soap) { struct ns__getStatusConnectionResponse *_p = soap_instantiate_ns__getStatusConnectionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusConnectionResponse(soap, _p); } return _p; }

inline struct ns__getStatusConnectionResponse * soap_new_set_ns__getStatusConnectionResponse(struct soap *soap, std::vector<ConnTrack_t >*ret) { struct ns__getStatusConnectionResponse *_p = soap_instantiate_ns__getStatusConnectionResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusConnectionResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusConnectionResponse(struct soap *soap, struct ns__getStatusConnectionResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusConnectionResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusServices
#define SOAP_TYPE_ns__getStatusServices (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusServices(struct soap*, struct ns__getStatusServices *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusServices(struct soap*, const struct ns__getStatusServices *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusServices(struct soap*, const char*, int, const struct ns__getStatusServices *, const char*);
SOAP_FMAC3 struct ns__getStatusServices * SOAP_FMAC4 soap_in_ns__getStatusServices(struct soap*, const char*, struct ns__getStatusServices *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusServices(struct soap*, const struct ns__getStatusServices *, const char*, const char*);

#ifndef soap_write_ns__getStatusServices
#define soap_write_ns__getStatusServices(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusServices(soap, data), 0) || soap_put_ns__getStatusServices(soap, data, "ns:getStatusServices", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusServices * SOAP_FMAC4 soap_get_ns__getStatusServices(struct soap*, struct ns__getStatusServices *, const char*, const char*);

#ifndef soap_read_ns__getStatusServices
#define soap_read_ns__getStatusServices(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusServices(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusServices * SOAP_FMAC2 soap_instantiate_ns__getStatusServices(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusServices * soap_new_ns__getStatusServices(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusServices(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusServices * soap_new_req_ns__getStatusServices(struct soap *soap) { struct ns__getStatusServices *_p = soap_instantiate_ns__getStatusServices(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusServices(soap, _p); } return _p; }

inline struct ns__getStatusServices * soap_new_set_ns__getStatusServices(struct soap *soap, void *_param_12) { struct ns__getStatusServices *_p = soap_instantiate_ns__getStatusServices(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusServices(soap, _p); _p->_param_12 = _param_12; } return _p; }

inline void soap_delete_ns__getStatusServices(struct soap *soap, struct ns__getStatusServices *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusServices(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusServicesResponse
#define SOAP_TYPE_ns__getStatusServicesResponse (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusServicesResponse(struct soap*, struct ns__getStatusServicesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusServicesResponse(struct soap*, const struct ns__getStatusServicesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusServicesResponse(struct soap*, const char*, int, const struct ns__getStatusServicesResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusServicesResponse * SOAP_FMAC4 soap_in_ns__getStatusServicesResponse(struct soap*, const char*, struct ns__getStatusServicesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusServicesResponse(struct soap*, const struct ns__getStatusServicesResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusServicesResponse
#define soap_write_ns__getStatusServicesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusServicesResponse(soap, data), 0) || soap_put_ns__getStatusServicesResponse(soap, data, "ns:getStatusServicesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusServicesResponse * SOAP_FMAC4 soap_get_ns__getStatusServicesResponse(struct soap*, struct ns__getStatusServicesResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusServicesResponse
#define soap_read_ns__getStatusServicesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusServicesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusServicesResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusServicesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusServicesResponse * soap_new_ns__getStatusServicesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusServicesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusServicesResponse * soap_new_req_ns__getStatusServicesResponse(struct soap *soap) { struct ns__getStatusServicesResponse *_p = soap_instantiate_ns__getStatusServicesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusServicesResponse(soap, _p); } return _p; }

inline struct ns__getStatusServicesResponse * soap_new_set_ns__getStatusServicesResponse(struct soap *soap, std::vector<StatusServices_t >*ret) { struct ns__getStatusServicesResponse *_p = soap_instantiate_ns__getStatusServicesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusServicesResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusServicesResponse(struct soap *soap, struct ns__getStatusServicesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusServicesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkOther
#define SOAP_TYPE_ns__getStatusNetworkOther (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkOther(struct soap*, struct ns__getStatusNetworkOther *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkOther(struct soap*, const struct ns__getStatusNetworkOther *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkOther(struct soap*, const char*, int, const struct ns__getStatusNetworkOther *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkOther * SOAP_FMAC4 soap_in_ns__getStatusNetworkOther(struct soap*, const char*, struct ns__getStatusNetworkOther *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkOther(struct soap*, const struct ns__getStatusNetworkOther *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkOther
#define soap_write_ns__getStatusNetworkOther(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkOther(soap, data), 0) || soap_put_ns__getStatusNetworkOther(soap, data, "ns:getStatusNetworkOther", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkOther * SOAP_FMAC4 soap_get_ns__getStatusNetworkOther(struct soap*, struct ns__getStatusNetworkOther *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkOther
#define soap_read_ns__getStatusNetworkOther(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkOther(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkOther * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkOther(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkOther * soap_new_ns__getStatusNetworkOther(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkOther(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkOther * soap_new_req_ns__getStatusNetworkOther(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkOther *_p = soap_instantiate_ns__getStatusNetworkOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkOther(soap, _p); _p->mode = mode; } return _p; }

inline struct ns__getStatusNetworkOther * soap_new_set_ns__getStatusNetworkOther(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkOther *_p = soap_instantiate_ns__getStatusNetworkOther(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkOther(soap, _p); _p->mode = mode; } return _p; }

inline void soap_delete_ns__getStatusNetworkOther(struct soap *soap, struct ns__getStatusNetworkOther *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkOther(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkOtherResponse
#define SOAP_TYPE_ns__getStatusNetworkOtherResponse (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkOtherResponse(struct soap*, struct ns__getStatusNetworkOtherResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkOtherResponse(struct soap*, const struct ns__getStatusNetworkOtherResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkOtherResponse(struct soap*, const char*, int, const struct ns__getStatusNetworkOtherResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkOtherResponse(struct soap*, const char*, struct ns__getStatusNetworkOtherResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkOtherResponse(struct soap*, const struct ns__getStatusNetworkOtherResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkOtherResponse
#define soap_write_ns__getStatusNetworkOtherResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkOtherResponse(soap, data), 0) || soap_put_ns__getStatusNetworkOtherResponse(soap, data, "ns:getStatusNetworkOtherResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkOtherResponse(struct soap*, struct ns__getStatusNetworkOtherResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkOtherResponse
#define soap_read_ns__getStatusNetworkOtherResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkOtherResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkOtherResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkOtherResponse * soap_new_ns__getStatusNetworkOtherResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkOtherResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkOtherResponse * soap_new_req_ns__getStatusNetworkOtherResponse(struct soap *soap) { struct ns__getStatusNetworkOtherResponse *_p = soap_instantiate_ns__getStatusNetworkOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkOtherResponse(soap, _p); } return _p; }

inline struct ns__getStatusNetworkOtherResponse * soap_new_set_ns__getStatusNetworkOtherResponse(struct soap *soap, NetworkData_t *ret) { struct ns__getStatusNetworkOtherResponse *_p = soap_instantiate_ns__getStatusNetworkOtherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkOtherResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusNetworkOtherResponse(struct soap *soap, struct ns__getStatusNetworkOtherResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkOtherResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkInternal
#define SOAP_TYPE_ns__getStatusNetworkInternal (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkInternal(struct soap*, struct ns__getStatusNetworkInternal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkInternal(struct soap*, const struct ns__getStatusNetworkInternal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkInternal(struct soap*, const char*, int, const struct ns__getStatusNetworkInternal *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkInternal * SOAP_FMAC4 soap_in_ns__getStatusNetworkInternal(struct soap*, const char*, struct ns__getStatusNetworkInternal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkInternal(struct soap*, const struct ns__getStatusNetworkInternal *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkInternal
#define soap_write_ns__getStatusNetworkInternal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkInternal(soap, data), 0) || soap_put_ns__getStatusNetworkInternal(soap, data, "ns:getStatusNetworkInternal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkInternal * SOAP_FMAC4 soap_get_ns__getStatusNetworkInternal(struct soap*, struct ns__getStatusNetworkInternal *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkInternal
#define soap_read_ns__getStatusNetworkInternal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkInternal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkInternal * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkInternal(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkInternal * soap_new_ns__getStatusNetworkInternal(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkInternal(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkInternal * soap_new_req_ns__getStatusNetworkInternal(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkInternal *_p = soap_instantiate_ns__getStatusNetworkInternal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkInternal(soap, _p); _p->mode = mode; } return _p; }

inline struct ns__getStatusNetworkInternal * soap_new_set_ns__getStatusNetworkInternal(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkInternal *_p = soap_instantiate_ns__getStatusNetworkInternal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkInternal(soap, _p); _p->mode = mode; } return _p; }

inline void soap_delete_ns__getStatusNetworkInternal(struct soap *soap, struct ns__getStatusNetworkInternal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkInternal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkInternalResponse
#define SOAP_TYPE_ns__getStatusNetworkInternalResponse (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkInternalResponse(struct soap*, struct ns__getStatusNetworkInternalResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkInternalResponse(struct soap*, const struct ns__getStatusNetworkInternalResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkInternalResponse(struct soap*, const char*, int, const struct ns__getStatusNetworkInternalResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkInternalResponse(struct soap*, const char*, struct ns__getStatusNetworkInternalResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkInternalResponse(struct soap*, const struct ns__getStatusNetworkInternalResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkInternalResponse
#define soap_write_ns__getStatusNetworkInternalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkInternalResponse(soap, data), 0) || soap_put_ns__getStatusNetworkInternalResponse(soap, data, "ns:getStatusNetworkInternalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkInternalResponse(struct soap*, struct ns__getStatusNetworkInternalResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkInternalResponse
#define soap_read_ns__getStatusNetworkInternalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkInternalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkInternalResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkInternalResponse * soap_new_ns__getStatusNetworkInternalResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkInternalResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkInternalResponse * soap_new_req_ns__getStatusNetworkInternalResponse(struct soap *soap) { struct ns__getStatusNetworkInternalResponse *_p = soap_instantiate_ns__getStatusNetworkInternalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkInternalResponse(soap, _p); } return _p; }

inline struct ns__getStatusNetworkInternalResponse * soap_new_set_ns__getStatusNetworkInternalResponse(struct soap *soap, NetworkData_t *ret) { struct ns__getStatusNetworkInternalResponse *_p = soap_instantiate_ns__getStatusNetworkInternalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkInternalResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusNetworkInternalResponse(struct soap *soap, struct ns__getStatusNetworkInternalResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkInternalResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkExternal
#define SOAP_TYPE_ns__getStatusNetworkExternal (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkExternal(struct soap*, struct ns__getStatusNetworkExternal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkExternal(struct soap*, const struct ns__getStatusNetworkExternal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkExternal(struct soap*, const char*, int, const struct ns__getStatusNetworkExternal *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkExternal * SOAP_FMAC4 soap_in_ns__getStatusNetworkExternal(struct soap*, const char*, struct ns__getStatusNetworkExternal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkExternal(struct soap*, const struct ns__getStatusNetworkExternal *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkExternal
#define soap_write_ns__getStatusNetworkExternal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkExternal(soap, data), 0) || soap_put_ns__getStatusNetworkExternal(soap, data, "ns:getStatusNetworkExternal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkExternal * SOAP_FMAC4 soap_get_ns__getStatusNetworkExternal(struct soap*, struct ns__getStatusNetworkExternal *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkExternal
#define soap_read_ns__getStatusNetworkExternal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkExternal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkExternal * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkExternal(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkExternal * soap_new_ns__getStatusNetworkExternal(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkExternal(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkExternal * soap_new_req_ns__getStatusNetworkExternal(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkExternal *_p = soap_instantiate_ns__getStatusNetworkExternal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkExternal(soap, _p); _p->mode = mode; } return _p; }

inline struct ns__getStatusNetworkExternal * soap_new_set_ns__getStatusNetworkExternal(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusNetworkExternal *_p = soap_instantiate_ns__getStatusNetworkExternal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkExternal(soap, _p); _p->mode = mode; } return _p; }

inline void soap_delete_ns__getStatusNetworkExternal(struct soap *soap, struct ns__getStatusNetworkExternal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkExternal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusNetworkExternalResponse
#define SOAP_TYPE_ns__getStatusNetworkExternalResponse (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkExternalResponse(struct soap*, struct ns__getStatusNetworkExternalResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkExternalResponse(struct soap*, const struct ns__getStatusNetworkExternalResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkExternalResponse(struct soap*, const char*, int, const struct ns__getStatusNetworkExternalResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkExternalResponse(struct soap*, const char*, struct ns__getStatusNetworkExternalResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkExternalResponse(struct soap*, const struct ns__getStatusNetworkExternalResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusNetworkExternalResponse
#define soap_write_ns__getStatusNetworkExternalResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusNetworkExternalResponse(soap, data), 0) || soap_put_ns__getStatusNetworkExternalResponse(soap, data, "ns:getStatusNetworkExternalResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkExternalResponse(struct soap*, struct ns__getStatusNetworkExternalResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusNetworkExternalResponse
#define soap_read_ns__getStatusNetworkExternalResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusNetworkExternalResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkExternalResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusNetworkExternalResponse * soap_new_ns__getStatusNetworkExternalResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusNetworkExternalResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusNetworkExternalResponse * soap_new_req_ns__getStatusNetworkExternalResponse(struct soap *soap) { struct ns__getStatusNetworkExternalResponse *_p = soap_instantiate_ns__getStatusNetworkExternalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkExternalResponse(soap, _p); } return _p; }

inline struct ns__getStatusNetworkExternalResponse * soap_new_set_ns__getStatusNetworkExternalResponse(struct soap *soap, NetworkData_t *ret) { struct ns__getStatusNetworkExternalResponse *_p = soap_instantiate_ns__getStatusNetworkExternalResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusNetworkExternalResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusNetworkExternalResponse(struct soap *soap, struct ns__getStatusNetworkExternalResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkExternalResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusSystemGraph
#define SOAP_TYPE_ns__getStatusSystemGraph (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusSystemGraph(struct soap*, struct ns__getStatusSystemGraph *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusSystemGraph(struct soap*, const struct ns__getStatusSystemGraph *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusSystemGraph(struct soap*, const char*, int, const struct ns__getStatusSystemGraph *, const char*);
SOAP_FMAC3 struct ns__getStatusSystemGraph * SOAP_FMAC4 soap_in_ns__getStatusSystemGraph(struct soap*, const char*, struct ns__getStatusSystemGraph *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusSystemGraph(struct soap*, const struct ns__getStatusSystemGraph *, const char*, const char*);

#ifndef soap_write_ns__getStatusSystemGraph
#define soap_write_ns__getStatusSystemGraph(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusSystemGraph(soap, data), 0) || soap_put_ns__getStatusSystemGraph(soap, data, "ns:getStatusSystemGraph", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusSystemGraph * SOAP_FMAC4 soap_get_ns__getStatusSystemGraph(struct soap*, struct ns__getStatusSystemGraph *, const char*, const char*);

#ifndef soap_read_ns__getStatusSystemGraph
#define soap_read_ns__getStatusSystemGraph(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusSystemGraph(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusSystemGraph * SOAP_FMAC2 soap_instantiate_ns__getStatusSystemGraph(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusSystemGraph * soap_new_ns__getStatusSystemGraph(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusSystemGraph(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusSystemGraph * soap_new_req_ns__getStatusSystemGraph(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusSystemGraph *_p = soap_instantiate_ns__getStatusSystemGraph(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusSystemGraph(soap, _p); _p->mode = mode; } return _p; }

inline struct ns__getStatusSystemGraph * soap_new_set_ns__getStatusSystemGraph(struct soap *soap, enum SysGraphMode_t mode) { struct ns__getStatusSystemGraph *_p = soap_instantiate_ns__getStatusSystemGraph(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusSystemGraph(soap, _p); _p->mode = mode; } return _p; }

inline void soap_delete_ns__getStatusSystemGraph(struct soap *soap, struct ns__getStatusSystemGraph *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusSystemGraph(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getStatusSystemGraphResponse
#define SOAP_TYPE_ns__getStatusSystemGraphResponse (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusSystemGraphResponse(struct soap*, struct ns__getStatusSystemGraphResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusSystemGraphResponse(struct soap*, const struct ns__getStatusSystemGraphResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusSystemGraphResponse(struct soap*, const char*, int, const struct ns__getStatusSystemGraphResponse *, const char*);
SOAP_FMAC3 struct ns__getStatusSystemGraphResponse * SOAP_FMAC4 soap_in_ns__getStatusSystemGraphResponse(struct soap*, const char*, struct ns__getStatusSystemGraphResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusSystemGraphResponse(struct soap*, const struct ns__getStatusSystemGraphResponse *, const char*, const char*);

#ifndef soap_write_ns__getStatusSystemGraphResponse
#define soap_write_ns__getStatusSystemGraphResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getStatusSystemGraphResponse(soap, data), 0) || soap_put_ns__getStatusSystemGraphResponse(soap, data, "ns:getStatusSystemGraphResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getStatusSystemGraphResponse * SOAP_FMAC4 soap_get_ns__getStatusSystemGraphResponse(struct soap*, struct ns__getStatusSystemGraphResponse *, const char*, const char*);

#ifndef soap_read_ns__getStatusSystemGraphResponse
#define soap_read_ns__getStatusSystemGraphResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getStatusSystemGraphResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getStatusSystemGraphResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusSystemGraphResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getStatusSystemGraphResponse * soap_new_ns__getStatusSystemGraphResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getStatusSystemGraphResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getStatusSystemGraphResponse * soap_new_req_ns__getStatusSystemGraphResponse(struct soap *soap) { struct ns__getStatusSystemGraphResponse *_p = soap_instantiate_ns__getStatusSystemGraphResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusSystemGraphResponse(soap, _p); } return _p; }

inline struct ns__getStatusSystemGraphResponse * soap_new_set_ns__getStatusSystemGraphResponse(struct soap *soap, SystemData_t *ret) { struct ns__getStatusSystemGraphResponse *_p = soap_instantiate_ns__getStatusSystemGraphResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getStatusSystemGraphResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getStatusSystemGraphResponse(struct soap *soap, struct ns__getStatusSystemGraphResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusSystemGraphResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__SysShutdownHandle
#define SOAP_TYPE_ns__SysShutdownHandle (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysShutdownHandle(struct soap*, struct ns__SysShutdownHandle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysShutdownHandle(struct soap*, const struct ns__SysShutdownHandle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysShutdownHandle(struct soap*, const char*, int, const struct ns__SysShutdownHandle *, const char*);
SOAP_FMAC3 struct ns__SysShutdownHandle * SOAP_FMAC4 soap_in_ns__SysShutdownHandle(struct soap*, const char*, struct ns__SysShutdownHandle *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysShutdownHandle(struct soap*, const struct ns__SysShutdownHandle *, const char*, const char*);

#ifndef soap_write_ns__SysShutdownHandle
#define soap_write_ns__SysShutdownHandle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SysShutdownHandle(soap, data), 0) || soap_put_ns__SysShutdownHandle(soap, data, "ns:SysShutdownHandle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SysShutdownHandle * SOAP_FMAC4 soap_get_ns__SysShutdownHandle(struct soap*, struct ns__SysShutdownHandle *, const char*, const char*);

#ifndef soap_read_ns__SysShutdownHandle
#define soap_read_ns__SysShutdownHandle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__SysShutdownHandle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__SysShutdownHandle * SOAP_FMAC2 soap_instantiate_ns__SysShutdownHandle(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SysShutdownHandle * soap_new_ns__SysShutdownHandle(struct soap *soap, int n = -1) { return soap_instantiate_ns__SysShutdownHandle(soap, n, NULL, NULL, NULL); }

inline struct ns__SysShutdownHandle * soap_new_req_ns__SysShutdownHandle(struct soap *soap, enum ns__SysShutdownEvent in) { struct ns__SysShutdownHandle *_p = soap_instantiate_ns__SysShutdownHandle(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysShutdownHandle(soap, _p); _p->in = in; } return _p; }

inline struct ns__SysShutdownHandle * soap_new_set_ns__SysShutdownHandle(struct soap *soap, enum ns__SysShutdownEvent in) { struct ns__SysShutdownHandle *_p = soap_instantiate_ns__SysShutdownHandle(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysShutdownHandle(soap, _p); _p->in = in; } return _p; }

inline void soap_delete_ns__SysShutdownHandle(struct soap *soap, struct ns__SysShutdownHandle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysShutdownHandle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getSysSysInfo
#define SOAP_TYPE_ns__getSysSysInfo (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysSysInfo(struct soap*, struct ns__getSysSysInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysSysInfo(struct soap*, const struct ns__getSysSysInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysSysInfo(struct soap*, const char*, int, const struct ns__getSysSysInfo *, const char*);
SOAP_FMAC3 struct ns__getSysSysInfo * SOAP_FMAC4 soap_in_ns__getSysSysInfo(struct soap*, const char*, struct ns__getSysSysInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysSysInfo(struct soap*, const struct ns__getSysSysInfo *, const char*, const char*);

#ifndef soap_write_ns__getSysSysInfo
#define soap_write_ns__getSysSysInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getSysSysInfo(soap, data), 0) || soap_put_ns__getSysSysInfo(soap, data, "ns:getSysSysInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getSysSysInfo * SOAP_FMAC4 soap_get_ns__getSysSysInfo(struct soap*, struct ns__getSysSysInfo *, const char*, const char*);

#ifndef soap_read_ns__getSysSysInfo
#define soap_read_ns__getSysSysInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getSysSysInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getSysSysInfo * SOAP_FMAC2 soap_instantiate_ns__getSysSysInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getSysSysInfo * soap_new_ns__getSysSysInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__getSysSysInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__getSysSysInfo * soap_new_req_ns__getSysSysInfo(struct soap *soap) { struct ns__getSysSysInfo *_p = soap_instantiate_ns__getSysSysInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysSysInfo(soap, _p); } return _p; }

inline struct ns__getSysSysInfo * soap_new_set_ns__getSysSysInfo(struct soap *soap, void *_param_11) { struct ns__getSysSysInfo *_p = soap_instantiate_ns__getSysSysInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysSysInfo(soap, _p); _p->_param_11 = _param_11; } return _p; }

inline void soap_delete_ns__getSysSysInfo(struct soap *soap, struct ns__getSysSysInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysSysInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getSysSysInfoResponse
#define SOAP_TYPE_ns__getSysSysInfoResponse (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysSysInfoResponse(struct soap*, struct ns__getSysSysInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysSysInfoResponse(struct soap*, const struct ns__getSysSysInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysSysInfoResponse(struct soap*, const char*, int, const struct ns__getSysSysInfoResponse *, const char*);
SOAP_FMAC3 struct ns__getSysSysInfoResponse * SOAP_FMAC4 soap_in_ns__getSysSysInfoResponse(struct soap*, const char*, struct ns__getSysSysInfoResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysSysInfoResponse(struct soap*, const struct ns__getSysSysInfoResponse *, const char*, const char*);

#ifndef soap_write_ns__getSysSysInfoResponse
#define soap_write_ns__getSysSysInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getSysSysInfoResponse(soap, data), 0) || soap_put_ns__getSysSysInfoResponse(soap, data, "ns:getSysSysInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getSysSysInfoResponse * SOAP_FMAC4 soap_get_ns__getSysSysInfoResponse(struct soap*, struct ns__getSysSysInfoResponse *, const char*, const char*);

#ifndef soap_read_ns__getSysSysInfoResponse
#define soap_read_ns__getSysSysInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getSysSysInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getSysSysInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getSysSysInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getSysSysInfoResponse * soap_new_ns__getSysSysInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getSysSysInfoResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getSysSysInfoResponse * soap_new_req_ns__getSysSysInfoResponse(struct soap *soap) { struct ns__getSysSysInfoResponse *_p = soap_instantiate_ns__getSysSysInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysSysInfoResponse(soap, _p); } return _p; }

inline struct ns__getSysSysInfoResponse * soap_new_set_ns__getSysSysInfoResponse(struct soap *soap, SysInfo_t *ret) { struct ns__getSysSysInfoResponse *_p = soap_instantiate_ns__getSysSysInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysSysInfoResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getSysSysInfoResponse(struct soap *soap, struct ns__getSysSysInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysSysInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__SysBackupHandle
#define SOAP_TYPE_ns__SysBackupHandle (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupHandle(struct soap*, struct ns__SysBackupHandle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysBackupHandle(struct soap*, const struct ns__SysBackupHandle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupHandle(struct soap*, const char*, int, const struct ns__SysBackupHandle *, const char*);
SOAP_FMAC3 struct ns__SysBackupHandle * SOAP_FMAC4 soap_in_ns__SysBackupHandle(struct soap*, const char*, struct ns__SysBackupHandle *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupHandle(struct soap*, const struct ns__SysBackupHandle *, const char*, const char*);

#ifndef soap_write_ns__SysBackupHandle
#define soap_write_ns__SysBackupHandle(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SysBackupHandle(soap, data), 0) || soap_put_ns__SysBackupHandle(soap, data, "ns:SysBackupHandle", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SysBackupHandle * SOAP_FMAC4 soap_get_ns__SysBackupHandle(struct soap*, struct ns__SysBackupHandle *, const char*, const char*);

#ifndef soap_read_ns__SysBackupHandle
#define soap_read_ns__SysBackupHandle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__SysBackupHandle(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__SysBackupHandle * SOAP_FMAC2 soap_instantiate_ns__SysBackupHandle(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SysBackupHandle * soap_new_ns__SysBackupHandle(struct soap *soap, int n = -1) { return soap_instantiate_ns__SysBackupHandle(soap, n, NULL, NULL, NULL); }

inline struct ns__SysBackupHandle * soap_new_req_ns__SysBackupHandle(struct soap *soap, enum ns__SysBackupEvent in) { struct ns__SysBackupHandle *_p = soap_instantiate_ns__SysBackupHandle(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysBackupHandle(soap, _p); _p->in = in; } return _p; }

inline struct ns__SysBackupHandle * soap_new_set_ns__SysBackupHandle(struct soap *soap, enum ns__SysBackupEvent in, char *path) { struct ns__SysBackupHandle *_p = soap_instantiate_ns__SysBackupHandle(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysBackupHandle(soap, _p); _p->in = in; _p->path = path; } return _p; }

inline void soap_delete_ns__SysBackupHandle(struct soap *soap, struct ns__SysBackupHandle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysBackupHandle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__SysBackupHandleResponse
#define SOAP_TYPE_ns__SysBackupHandleResponse (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupHandleResponse(struct soap*, struct ns__SysBackupHandleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysBackupHandleResponse(struct soap*, const struct ns__SysBackupHandleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupHandleResponse(struct soap*, const char*, int, const struct ns__SysBackupHandleResponse *, const char*);
SOAP_FMAC3 struct ns__SysBackupHandleResponse * SOAP_FMAC4 soap_in_ns__SysBackupHandleResponse(struct soap*, const char*, struct ns__SysBackupHandleResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupHandleResponse(struct soap*, const struct ns__SysBackupHandleResponse *, const char*, const char*);

#ifndef soap_write_ns__SysBackupHandleResponse
#define soap_write_ns__SysBackupHandleResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__SysBackupHandleResponse(soap, data), 0) || soap_put_ns__SysBackupHandleResponse(soap, data, "ns:SysBackupHandleResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__SysBackupHandleResponse * SOAP_FMAC4 soap_get_ns__SysBackupHandleResponse(struct soap*, struct ns__SysBackupHandleResponse *, const char*, const char*);

#ifndef soap_read_ns__SysBackupHandleResponse
#define soap_read_ns__SysBackupHandleResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__SysBackupHandleResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__SysBackupHandleResponse * SOAP_FMAC2 soap_instantiate_ns__SysBackupHandleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__SysBackupHandleResponse * soap_new_ns__SysBackupHandleResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__SysBackupHandleResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__SysBackupHandleResponse * soap_new_req_ns__SysBackupHandleResponse(struct soap *soap) { struct ns__SysBackupHandleResponse *_p = soap_instantiate_ns__SysBackupHandleResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysBackupHandleResponse(soap, _p); } return _p; }

inline struct ns__SysBackupHandleResponse * soap_new_set_ns__SysBackupHandleResponse(struct soap *soap, SysBackupRet_t *ret) { struct ns__SysBackupHandleResponse *_p = soap_instantiate_ns__SysBackupHandleResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__SysBackupHandleResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__SysBackupHandleResponse(struct soap *soap, struct ns__SysBackupHandleResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysBackupHandleResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getSysHomeInterface
#define SOAP_TYPE_ns__getSysHomeInterface (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysHomeInterface(struct soap*, struct ns__getSysHomeInterface *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysHomeInterface(struct soap*, const struct ns__getSysHomeInterface *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysHomeInterface(struct soap*, const char*, int, const struct ns__getSysHomeInterface *, const char*);
SOAP_FMAC3 struct ns__getSysHomeInterface * SOAP_FMAC4 soap_in_ns__getSysHomeInterface(struct soap*, const char*, struct ns__getSysHomeInterface *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysHomeInterface(struct soap*, const struct ns__getSysHomeInterface *, const char*, const char*);

#ifndef soap_write_ns__getSysHomeInterface
#define soap_write_ns__getSysHomeInterface(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getSysHomeInterface(soap, data), 0) || soap_put_ns__getSysHomeInterface(soap, data, "ns:getSysHomeInterface", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getSysHomeInterface * SOAP_FMAC4 soap_get_ns__getSysHomeInterface(struct soap*, struct ns__getSysHomeInterface *, const char*, const char*);

#ifndef soap_read_ns__getSysHomeInterface
#define soap_read_ns__getSysHomeInterface(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getSysHomeInterface(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getSysHomeInterface * SOAP_FMAC2 soap_instantiate_ns__getSysHomeInterface(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getSysHomeInterface * soap_new_ns__getSysHomeInterface(struct soap *soap, int n = -1) { return soap_instantiate_ns__getSysHomeInterface(soap, n, NULL, NULL, NULL); }

inline struct ns__getSysHomeInterface * soap_new_req_ns__getSysHomeInterface(struct soap *soap) { struct ns__getSysHomeInterface *_p = soap_instantiate_ns__getSysHomeInterface(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysHomeInterface(soap, _p); } return _p; }

inline struct ns__getSysHomeInterface * soap_new_set_ns__getSysHomeInterface(struct soap *soap, void *_param_10) { struct ns__getSysHomeInterface *_p = soap_instantiate_ns__getSysHomeInterface(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysHomeInterface(soap, _p); _p->_param_10 = _param_10; } return _p; }

inline void soap_delete_ns__getSysHomeInterface(struct soap *soap, struct ns__getSysHomeInterface *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysHomeInterface(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getSysHomeInterfaceResponse
#define SOAP_TYPE_ns__getSysHomeInterfaceResponse (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysHomeInterfaceResponse(struct soap*, struct ns__getSysHomeInterfaceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysHomeInterfaceResponse(struct soap*, const struct ns__getSysHomeInterfaceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysHomeInterfaceResponse(struct soap*, const char*, int, const struct ns__getSysHomeInterfaceResponse *, const char*);
SOAP_FMAC3 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC4 soap_in_ns__getSysHomeInterfaceResponse(struct soap*, const char*, struct ns__getSysHomeInterfaceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysHomeInterfaceResponse(struct soap*, const struct ns__getSysHomeInterfaceResponse *, const char*, const char*);

#ifndef soap_write_ns__getSysHomeInterfaceResponse
#define soap_write_ns__getSysHomeInterfaceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getSysHomeInterfaceResponse(soap, data), 0) || soap_put_ns__getSysHomeInterfaceResponse(soap, data, "ns:getSysHomeInterfaceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC4 soap_get_ns__getSysHomeInterfaceResponse(struct soap*, struct ns__getSysHomeInterfaceResponse *, const char*, const char*);

#ifndef soap_read_ns__getSysHomeInterfaceResponse
#define soap_read_ns__getSysHomeInterfaceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getSysHomeInterfaceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC2 soap_instantiate_ns__getSysHomeInterfaceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getSysHomeInterfaceResponse * soap_new_ns__getSysHomeInterfaceResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getSysHomeInterfaceResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getSysHomeInterfaceResponse * soap_new_req_ns__getSysHomeInterfaceResponse(struct soap *soap) { struct ns__getSysHomeInterfaceResponse *_p = soap_instantiate_ns__getSysHomeInterfaceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysHomeInterfaceResponse(soap, _p); } return _p; }

inline struct ns__getSysHomeInterfaceResponse * soap_new_set_ns__getSysHomeInterfaceResponse(struct soap *soap, NetInterface_t *ret) { struct ns__getSysHomeInterfaceResponse *_p = soap_instantiate_ns__getSysHomeInterfaceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getSysHomeInterfaceResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getSysHomeInterfaceResponse(struct soap *soap, struct ns__getSysHomeInterfaceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysHomeInterfaceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getRuntimeInfo
#define SOAP_TYPE_ns__getRuntimeInfo (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRuntimeInfo(struct soap*, struct ns__getRuntimeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRuntimeInfo(struct soap*, const struct ns__getRuntimeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRuntimeInfo(struct soap*, const char*, int, const struct ns__getRuntimeInfo *, const char*);
SOAP_FMAC3 struct ns__getRuntimeInfo * SOAP_FMAC4 soap_in_ns__getRuntimeInfo(struct soap*, const char*, struct ns__getRuntimeInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRuntimeInfo(struct soap*, const struct ns__getRuntimeInfo *, const char*, const char*);

#ifndef soap_write_ns__getRuntimeInfo
#define soap_write_ns__getRuntimeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getRuntimeInfo(soap, data), 0) || soap_put_ns__getRuntimeInfo(soap, data, "ns:getRuntimeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getRuntimeInfo * SOAP_FMAC4 soap_get_ns__getRuntimeInfo(struct soap*, struct ns__getRuntimeInfo *, const char*, const char*);

#ifndef soap_read_ns__getRuntimeInfo
#define soap_read_ns__getRuntimeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getRuntimeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getRuntimeInfo * SOAP_FMAC2 soap_instantiate_ns__getRuntimeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getRuntimeInfo * soap_new_ns__getRuntimeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__getRuntimeInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__getRuntimeInfo * soap_new_req_ns__getRuntimeInfo(struct soap *soap) { struct ns__getRuntimeInfo *_p = soap_instantiate_ns__getRuntimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getRuntimeInfo(soap, _p); } return _p; }

inline struct ns__getRuntimeInfo * soap_new_set_ns__getRuntimeInfo(struct soap *soap, void *_param_9) { struct ns__getRuntimeInfo *_p = soap_instantiate_ns__getRuntimeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getRuntimeInfo(soap, _p); _p->_param_9 = _param_9; } return _p; }

inline void soap_delete_ns__getRuntimeInfo(struct soap *soap, struct ns__getRuntimeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getRuntimeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getRuntimeInfoResponse
#define SOAP_TYPE_ns__getRuntimeInfoResponse (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRuntimeInfoResponse(struct soap*, struct ns__getRuntimeInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRuntimeInfoResponse(struct soap*, const struct ns__getRuntimeInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRuntimeInfoResponse(struct soap*, const char*, int, const struct ns__getRuntimeInfoResponse *, const char*);
SOAP_FMAC3 struct ns__getRuntimeInfoResponse * SOAP_FMAC4 soap_in_ns__getRuntimeInfoResponse(struct soap*, const char*, struct ns__getRuntimeInfoResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRuntimeInfoResponse(struct soap*, const struct ns__getRuntimeInfoResponse *, const char*, const char*);

#ifndef soap_write_ns__getRuntimeInfoResponse
#define soap_write_ns__getRuntimeInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getRuntimeInfoResponse(soap, data), 0) || soap_put_ns__getRuntimeInfoResponse(soap, data, "ns:getRuntimeInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getRuntimeInfoResponse * SOAP_FMAC4 soap_get_ns__getRuntimeInfoResponse(struct soap*, struct ns__getRuntimeInfoResponse *, const char*, const char*);

#ifndef soap_read_ns__getRuntimeInfoResponse
#define soap_read_ns__getRuntimeInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getRuntimeInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getRuntimeInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getRuntimeInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getRuntimeInfoResponse * soap_new_ns__getRuntimeInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getRuntimeInfoResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getRuntimeInfoResponse * soap_new_req_ns__getRuntimeInfoResponse(struct soap *soap) { struct ns__getRuntimeInfoResponse *_p = soap_instantiate_ns__getRuntimeInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getRuntimeInfoResponse(soap, _p); } return _p; }

inline struct ns__getRuntimeInfoResponse * soap_new_set_ns__getRuntimeInfoResponse(struct soap *soap, RuntimeInfo_t *ret) { struct ns__getRuntimeInfoResponse *_p = soap_instantiate_ns__getRuntimeInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getRuntimeInfoResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__getRuntimeInfoResponse(struct soap *soap, struct ns__getRuntimeInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getRuntimeInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__login
#define SOAP_TYPE_ns__login (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__login(struct soap*, struct ns__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__login(struct soap*, const struct ns__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__login(struct soap*, const char*, int, const struct ns__login *, const char*);
SOAP_FMAC3 struct ns__login * SOAP_FMAC4 soap_in_ns__login(struct soap*, const char*, struct ns__login *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__login(struct soap*, const struct ns__login *, const char*, const char*);

#ifndef soap_write_ns__login
#define soap_write_ns__login(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__login(soap, data), 0) || soap_put_ns__login(soap, data, "ns:login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__login * SOAP_FMAC4 soap_get_ns__login(struct soap*, struct ns__login *, const char*, const char*);

#ifndef soap_read_ns__login
#define soap_read_ns__login(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__login(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__login * SOAP_FMAC2 soap_instantiate_ns__login(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__login * soap_new_ns__login(struct soap *soap, int n = -1) { return soap_instantiate_ns__login(soap, n, NULL, NULL, NULL); }

inline struct ns__login * soap_new_req_ns__login(struct soap *soap) { struct ns__login *_p = soap_instantiate_ns__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__login(soap, _p); } return _p; }

inline struct ns__login * soap_new_set_ns__login(struct soap *soap, char *username, char *passwd) { struct ns__login *_p = soap_instantiate_ns__login(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__login(soap, _p); _p->username = username; _p->passwd = passwd; } return _p; }

inline void soap_delete_ns__login(struct soap *soap, struct ns__login *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__login(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__loginResponse
#define SOAP_TYPE_ns__loginResponse (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__loginResponse(struct soap*, struct ns__loginResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__loginResponse(struct soap*, const struct ns__loginResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__loginResponse(struct soap*, const char*, int, const struct ns__loginResponse *, const char*);
SOAP_FMAC3 struct ns__loginResponse * SOAP_FMAC4 soap_in_ns__loginResponse(struct soap*, const char*, struct ns__loginResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__loginResponse(struct soap*, const struct ns__loginResponse *, const char*, const char*);

#ifndef soap_write_ns__loginResponse
#define soap_write_ns__loginResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__loginResponse(soap, data), 0) || soap_put_ns__loginResponse(soap, data, "ns:loginResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__loginResponse * SOAP_FMAC4 soap_get_ns__loginResponse(struct soap*, struct ns__loginResponse *, const char*, const char*);

#ifndef soap_read_ns__loginResponse
#define soap_read_ns__loginResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__loginResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__loginResponse * SOAP_FMAC2 soap_instantiate_ns__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__loginResponse * soap_new_ns__loginResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__loginResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__loginResponse * soap_new_req_ns__loginResponse(struct soap *soap) { struct ns__loginResponse *_p = soap_instantiate_ns__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__loginResponse(soap, _p); } return _p; }

inline struct ns__loginResponse * soap_new_set_ns__loginResponse(struct soap *soap, bool *ret) { struct ns__loginResponse *_p = soap_instantiate_ns__loginResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__loginResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__loginResponse(struct soap *soap, struct ns__loginResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__loginResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__noResponse
#define SOAP_TYPE_ns__noResponse (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__noResponse(struct soap*, struct ns__noResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__noResponse(struct soap*, const struct ns__noResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__noResponse(struct soap*, const char*, int, const struct ns__noResponse *, const char*);
SOAP_FMAC3 struct ns__noResponse * SOAP_FMAC4 soap_in_ns__noResponse(struct soap*, const char*, struct ns__noResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__noResponse(struct soap*, const struct ns__noResponse *, const char*, const char*);

#ifndef soap_write_ns__noResponse
#define soap_write_ns__noResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__noResponse(soap, data), 0) || soap_put_ns__noResponse(soap, data, "ns:noResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__noResponse * SOAP_FMAC4 soap_get_ns__noResponse(struct soap*, struct ns__noResponse *, const char*, const char*);

#ifndef soap_read_ns__noResponse
#define soap_read_ns__noResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__noResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__noResponse * SOAP_FMAC2 soap_instantiate_ns__noResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__noResponse * soap_new_ns__noResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__noResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__noResponse * soap_new_req_ns__noResponse(struct soap *soap) { struct ns__noResponse *_p = soap_instantiate_ns__noResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__noResponse(soap, _p); } return _p; }

inline struct ns__noResponse * soap_new_set_ns__noResponse(struct soap *soap) { struct ns__noResponse *_p = soap_instantiate_ns__noResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__noResponse(soap, _p); } return _p; }

inline void soap_delete_ns__noResponse(struct soap *soap, struct ns__noResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__noResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getImage
#define SOAP_TYPE_ns__getImage (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImage(struct soap*, struct ns__getImage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImage(struct soap*, const struct ns__getImage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImage(struct soap*, const char*, int, const struct ns__getImage *, const char*);
SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_in_ns__getImage(struct soap*, const char*, struct ns__getImage *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImage(struct soap*, const struct ns__getImage *, const char*, const char*);

#ifndef soap_write_ns__getImage
#define soap_write_ns__getImage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getImage(soap, data), 0) || soap_put_ns__getImage(soap, data, "ns:getImage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_get_ns__getImage(struct soap*, struct ns__getImage *, const char*, const char*);

#ifndef soap_read_ns__getImage
#define soap_read_ns__getImage(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getImage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getImage * SOAP_FMAC2 soap_instantiate_ns__getImage(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getImage * soap_new_ns__getImage(struct soap *soap, int n = -1) { return soap_instantiate_ns__getImage(soap, n, NULL, NULL, NULL); }

inline struct ns__getImage * soap_new_req_ns__getImage(struct soap *soap) { struct ns__getImage *_p = soap_instantiate_ns__getImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImage(soap, _p); } return _p; }

inline struct ns__getImage * soap_new_set_ns__getImage(struct soap *soap, char *name) { struct ns__getImage *_p = soap_instantiate_ns__getImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImage(soap, _p); _p->name = name; } return _p; }

inline void soap_delete_ns__getImage(struct soap *soap, struct ns__getImage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getImageResponse
#define SOAP_TYPE_ns__getImageResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImageResponse(struct soap*, struct ns__getImageResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImageResponse(struct soap*, const struct ns__getImageResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImageResponse(struct soap*, const char*, int, const struct ns__getImageResponse *, const char*);
SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_in_ns__getImageResponse(struct soap*, const char*, struct ns__getImageResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImageResponse(struct soap*, const struct ns__getImageResponse *, const char*, const char*);

#ifndef soap_write_ns__getImageResponse
#define soap_write_ns__getImageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getImageResponse(soap, data), 0) || soap_put_ns__getImageResponse(soap, data, "ns:getImageResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_get_ns__getImageResponse(struct soap*, struct ns__getImageResponse *, const char*, const char*);

#ifndef soap_read_ns__getImageResponse
#define soap_read_ns__getImageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getImageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getImageResponse * SOAP_FMAC2 soap_instantiate_ns__getImageResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getImageResponse * soap_new_ns__getImageResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getImageResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getImageResponse * soap_new_req_ns__getImageResponse(struct soap *soap, const ns__Data& image) { struct ns__getImageResponse *_p = soap_instantiate_ns__getImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImageResponse(soap, _p); _p->image = image; } return _p; }

inline struct ns__getImageResponse * soap_new_set_ns__getImageResponse(struct soap *soap, const ns__Data& image) { struct ns__getImageResponse *_p = soap_instantiate_ns__getImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImageResponse(soap, _p); _p->image = image; } return _p; }

inline void soap_delete_ns__getImageResponse(struct soap *soap, struct ns__getImageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getData
#define SOAP_TYPE_ns__getData (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getData(struct soap*, struct ns__getData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getData(struct soap*, const struct ns__getData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getData(struct soap*, const char*, int, const struct ns__getData *, const char*);
SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_in_ns__getData(struct soap*, const char*, struct ns__getData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getData(struct soap*, const struct ns__getData *, const char*, const char*);

#ifndef soap_write_ns__getData
#define soap_write_ns__getData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getData(soap, data), 0) || soap_put_ns__getData(soap, data, "ns:getData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_get_ns__getData(struct soap*, struct ns__getData *, const char*, const char*);

#ifndef soap_read_ns__getData
#define soap_read_ns__getData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getData * SOAP_FMAC2 soap_instantiate_ns__getData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getData * soap_new_ns__getData(struct soap *soap, int n = -1) { return soap_instantiate_ns__getData(soap, n, NULL, NULL, NULL); }

inline struct ns__getData * soap_new_req_ns__getData(struct soap *soap) { struct ns__getData *_p = soap_instantiate_ns__getData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getData(soap, _p); } return _p; }

inline struct ns__getData * soap_new_set_ns__getData(struct soap *soap, arrayOfName *names) { struct ns__getData *_p = soap_instantiate_ns__getData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getData(soap, _p); _p->names = names; } return _p; }

inline void soap_delete_ns__getData(struct soap *soap, struct ns__getData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getDataResponse
#define SOAP_TYPE_ns__getDataResponse (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getDataResponse(struct soap*, struct ns__getDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getDataResponse(struct soap*, const struct ns__getDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getDataResponse(struct soap*, const char*, int, const struct ns__getDataResponse *, const char*);
SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_in_ns__getDataResponse(struct soap*, const char*, struct ns__getDataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getDataResponse(struct soap*, const struct ns__getDataResponse *, const char*, const char*);

#ifndef soap_write_ns__getDataResponse
#define soap_write_ns__getDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getDataResponse(soap, data), 0) || soap_put_ns__getDataResponse(soap, data, "ns:getDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_get_ns__getDataResponse(struct soap*, struct ns__getDataResponse *, const char*, const char*);

#ifndef soap_read_ns__getDataResponse
#define soap_read_ns__getDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getDataResponse * SOAP_FMAC2 soap_instantiate_ns__getDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getDataResponse * soap_new_ns__getDataResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getDataResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getDataResponse * soap_new_req_ns__getDataResponse(struct soap *soap) { struct ns__getDataResponse *_p = soap_instantiate_ns__getDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getDataResponse(soap, _p); } return _p; }

inline struct ns__getDataResponse * soap_new_set_ns__getDataResponse(struct soap *soap, arrayOfData *data) { struct ns__getDataResponse *_p = soap_instantiate_ns__getDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getDataResponse(soap, _p); _p->data = data; } return _p; }

inline void soap_delete_ns__getDataResponse(struct soap *soap, struct ns__getDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__putData
#define SOAP_TYPE_ns__putData (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putData(struct soap*, struct ns__putData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putData(struct soap*, const struct ns__putData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putData(struct soap*, const char*, int, const struct ns__putData *, const char*);
SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_in_ns__putData(struct soap*, const char*, struct ns__putData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putData(struct soap*, const struct ns__putData *, const char*, const char*);

#ifndef soap_write_ns__putData
#define soap_write_ns__putData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__putData(soap, data), 0) || soap_put_ns__putData(soap, data, "ns:putData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_get_ns__putData(struct soap*, struct ns__putData *, const char*, const char*);

#ifndef soap_read_ns__putData
#define soap_read_ns__putData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__putData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__putData * SOAP_FMAC2 soap_instantiate_ns__putData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__putData * soap_new_ns__putData(struct soap *soap, int n = -1) { return soap_instantiate_ns__putData(soap, n, NULL, NULL, NULL); }

inline struct ns__putData * soap_new_req_ns__putData(struct soap *soap) { struct ns__putData *_p = soap_instantiate_ns__putData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putData(soap, _p); } return _p; }

inline struct ns__putData * soap_new_set_ns__putData(struct soap *soap, std::vector<std::string >*nameList, arrayOfData *data) { struct ns__putData *_p = soap_instantiate_ns__putData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putData(soap, _p); _p->nameList = nameList; _p->data = data; } return _p; }

inline void soap_delete_ns__putData(struct soap *soap, struct ns__putData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__putDataResponse
#define SOAP_TYPE_ns__putDataResponse (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putDataResponse(struct soap*, struct ns__putDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putDataResponse(struct soap*, const struct ns__putDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putDataResponse(struct soap*, const char*, int, const struct ns__putDataResponse *, const char*);
SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_in_ns__putDataResponse(struct soap*, const char*, struct ns__putDataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putDataResponse(struct soap*, const struct ns__putDataResponse *, const char*, const char*);

#ifndef soap_write_ns__putDataResponse
#define soap_write_ns__putDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__putDataResponse(soap, data), 0) || soap_put_ns__putDataResponse(soap, data, "ns:putDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_get_ns__putDataResponse(struct soap*, struct ns__putDataResponse *, const char*, const char*);

#ifndef soap_read_ns__putDataResponse
#define soap_read_ns__putDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__putDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__putDataResponse * SOAP_FMAC2 soap_instantiate_ns__putDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__putDataResponse * soap_new_ns__putDataResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__putDataResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__putDataResponse * soap_new_req_ns__putDataResponse(struct soap *soap) { struct ns__putDataResponse *_p = soap_instantiate_ns__putDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putDataResponse(soap, _p); } return _p; }

inline struct ns__putDataResponse * soap_new_set_ns__putDataResponse(struct soap *soap, arrayOfName *names) { struct ns__putDataResponse *_p = soap_instantiate_ns__putDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putDataResponse(soap, _p); _p->names = names; } return _p; }

inline void soap_delete_ns__putDataResponse(struct soap *soap, struct ns__putDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToStatusConnList_t
#define SOAP_TYPE_PointerToStatusConnList_t (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToStatusConnList_t(struct soap*, std::vector<ConnTrack_t >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToStatusConnList_t(struct soap*, const char *, int, std::vector<ConnTrack_t >*const*, const char *);
SOAP_FMAC3 std::vector<ConnTrack_t >** SOAP_FMAC4 soap_in_PointerToStatusConnList_t(struct soap*, const char*, std::vector<ConnTrack_t >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToStatusConnList_t(struct soap*, std::vector<ConnTrack_t >*const*, const char*, const char*);

#ifndef soap_write_PointerToStatusConnList_t
#define soap_write_PointerToStatusConnList_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToStatusConnList_t(soap, data), 0) || soap_put_PointerToStatusConnList_t(soap, data, "StatusConnList-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<ConnTrack_t >** SOAP_FMAC4 soap_get_PointerToStatusConnList_t(struct soap*, std::vector<ConnTrack_t >**, const char*, const char*);

#ifndef soap_read_PointerToStatusConnList_t
#define soap_read_PointerToStatusConnList_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToStatusConnList_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToStatusServicesList_t
#define SOAP_TYPE_PointerToStatusServicesList_t (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToStatusServicesList_t(struct soap*, std::vector<StatusServices_t >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToStatusServicesList_t(struct soap*, const char *, int, std::vector<StatusServices_t >*const*, const char *);
SOAP_FMAC3 std::vector<StatusServices_t >** SOAP_FMAC4 soap_in_PointerToStatusServicesList_t(struct soap*, const char*, std::vector<StatusServices_t >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToStatusServicesList_t(struct soap*, std::vector<StatusServices_t >*const*, const char*, const char*);

#ifndef soap_write_PointerToStatusServicesList_t
#define soap_write_PointerToStatusServicesList_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToStatusServicesList_t(soap, data), 0) || soap_put_PointerToStatusServicesList_t(soap, data, "StatusServicesList-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<StatusServices_t >** SOAP_FMAC4 soap_get_PointerToStatusServicesList_t(struct soap*, std::vector<StatusServices_t >**, const char*, const char*);

#ifndef soap_read_PointerToStatusServicesList_t
#define soap_read_PointerToStatusServicesList_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToStatusServicesList_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToNetworkData_t
#define SOAP_TYPE_PointerToNetworkData_t (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToNetworkData_t(struct soap*, NetworkData_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToNetworkData_t(struct soap*, const char *, int, NetworkData_t *const*, const char *);
SOAP_FMAC3 NetworkData_t ** SOAP_FMAC4 soap_in_PointerToNetworkData_t(struct soap*, const char*, NetworkData_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToNetworkData_t(struct soap*, NetworkData_t *const*, const char*, const char*);

#ifndef soap_write_PointerToNetworkData_t
#define soap_write_PointerToNetworkData_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToNetworkData_t(soap, data), 0) || soap_put_PointerToNetworkData_t(soap, data, "NetworkData-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 NetworkData_t ** SOAP_FMAC4 soap_get_PointerToNetworkData_t(struct soap*, NetworkData_t **, const char*, const char*);

#ifndef soap_read_PointerToNetworkData_t
#define soap_read_PointerToNetworkData_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToNetworkData_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToSystemData_t
#define SOAP_TYPE_PointerToSystemData_t (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSystemData_t(struct soap*, SystemData_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSystemData_t(struct soap*, const char *, int, SystemData_t *const*, const char *);
SOAP_FMAC3 SystemData_t ** SOAP_FMAC4 soap_in_PointerToSystemData_t(struct soap*, const char*, SystemData_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSystemData_t(struct soap*, SystemData_t *const*, const char*, const char*);

#ifndef soap_write_PointerToSystemData_t
#define soap_write_PointerToSystemData_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSystemData_t(soap, data), 0) || soap_put_PointerToSystemData_t(soap, data, "SystemData-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SystemData_t ** SOAP_FMAC4 soap_get_PointerToSystemData_t(struct soap*, SystemData_t **, const char*, const char*);

#ifndef soap_read_PointerToSystemData_t
#define soap_read_PointerToSystemData_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSystemData_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__noResponse
#define SOAP_TYPE_PointerTons__noResponse (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__noResponse(struct soap*, struct ns__noResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__noResponse(struct soap*, const char *, int, struct ns__noResponse *const*, const char *);
SOAP_FMAC3 struct ns__noResponse ** SOAP_FMAC4 soap_in_PointerTons__noResponse(struct soap*, const char*, struct ns__noResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__noResponse(struct soap*, struct ns__noResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons__noResponse
#define soap_write_PointerTons__noResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__noResponse(soap, data), 0) || soap_put_PointerTons__noResponse(soap, data, "ns:noResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__noResponse ** SOAP_FMAC4 soap_get_PointerTons__noResponse(struct soap*, struct ns__noResponse **, const char*, const char*);

#ifndef soap_read_PointerTons__noResponse
#define soap_read_PointerTons__noResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons__noResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToSysInfo_t
#define SOAP_TYPE_PointerToSysInfo_t (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSysInfo_t(struct soap*, SysInfo_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSysInfo_t(struct soap*, const char *, int, SysInfo_t *const*, const char *);
SOAP_FMAC3 SysInfo_t ** SOAP_FMAC4 soap_in_PointerToSysInfo_t(struct soap*, const char*, SysInfo_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSysInfo_t(struct soap*, SysInfo_t *const*, const char*, const char*);

#ifndef soap_write_PointerToSysInfo_t
#define soap_write_PointerToSysInfo_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSysInfo_t(soap, data), 0) || soap_put_PointerToSysInfo_t(soap, data, "SysInfo-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SysInfo_t ** SOAP_FMAC4 soap_get_PointerToSysInfo_t(struct soap*, SysInfo_t **, const char*, const char*);

#ifndef soap_read_PointerToSysInfo_t
#define soap_read_PointerToSysInfo_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSysInfo_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToSysBackupRet_t
#define SOAP_TYPE_PointerToSysBackupRet_t (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSysBackupRet_t(struct soap*, SysBackupRet_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSysBackupRet_t(struct soap*, const char *, int, SysBackupRet_t *const*, const char *);
SOAP_FMAC3 SysBackupRet_t ** SOAP_FMAC4 soap_in_PointerToSysBackupRet_t(struct soap*, const char*, SysBackupRet_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSysBackupRet_t(struct soap*, SysBackupRet_t *const*, const char*, const char*);

#ifndef soap_write_PointerToSysBackupRet_t
#define soap_write_PointerToSysBackupRet_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSysBackupRet_t(soap, data), 0) || soap_put_PointerToSysBackupRet_t(soap, data, "SysBackupRet-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 SysBackupRet_t ** SOAP_FMAC4 soap_get_PointerToSysBackupRet_t(struct soap*, SysBackupRet_t **, const char*, const char*);

#ifndef soap_read_PointerToSysBackupRet_t
#define soap_read_PointerToSysBackupRet_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSysBackupRet_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToNetInterface_t
#define SOAP_TYPE_PointerToNetInterface_t (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToNetInterface_t(struct soap*, NetInterface_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToNetInterface_t(struct soap*, const char *, int, NetInterface_t *const*, const char *);
SOAP_FMAC3 NetInterface_t ** SOAP_FMAC4 soap_in_PointerToNetInterface_t(struct soap*, const char*, NetInterface_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToNetInterface_t(struct soap*, NetInterface_t *const*, const char*, const char*);

#ifndef soap_write_PointerToNetInterface_t
#define soap_write_PointerToNetInterface_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToNetInterface_t(soap, data), 0) || soap_put_PointerToNetInterface_t(soap, data, "NetInterface-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 NetInterface_t ** SOAP_FMAC4 soap_get_PointerToNetInterface_t(struct soap*, NetInterface_t **, const char*, const char*);

#ifndef soap_read_PointerToNetInterface_t
#define soap_read_PointerToNetInterface_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToNetInterface_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToRuntimeInfo_t
#define SOAP_TYPE_PointerToRuntimeInfo_t (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToRuntimeInfo_t(struct soap*, RuntimeInfo_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToRuntimeInfo_t(struct soap*, const char *, int, RuntimeInfo_t *const*, const char *);
SOAP_FMAC3 RuntimeInfo_t ** SOAP_FMAC4 soap_in_PointerToRuntimeInfo_t(struct soap*, const char*, RuntimeInfo_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToRuntimeInfo_t(struct soap*, RuntimeInfo_t *const*, const char*, const char*);

#ifndef soap_write_PointerToRuntimeInfo_t
#define soap_write_PointerToRuntimeInfo_t(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToRuntimeInfo_t(soap, data), 0) || soap_put_PointerToRuntimeInfo_t(soap, data, "RuntimeInfo-t", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 RuntimeInfo_t ** SOAP_FMAC4 soap_get_PointerToRuntimeInfo_t(struct soap*, RuntimeInfo_t **, const char*, const char*);

#ifndef soap_read_PointerToRuntimeInfo_t
#define soap_read_PointerToRuntimeInfo_t(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToRuntimeInfo_t(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data), 0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToarrayOfName
#define SOAP_TYPE_PointerToarrayOfName (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfName(struct soap*, arrayOfName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfName(struct soap*, const char *, int, arrayOfName *const*, const char *);
SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_in_PointerToarrayOfName(struct soap*, const char*, arrayOfName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfName(struct soap*, arrayOfName *const*, const char*, const char*);

#ifndef soap_write_PointerToarrayOfName
#define soap_write_PointerToarrayOfName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToarrayOfName(soap, data), 0) || soap_put_PointerToarrayOfName(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_get_PointerToarrayOfName(struct soap*, arrayOfName **, const char*, const char*);

#ifndef soap_read_PointerToarrayOfName
#define soap_read_PointerToarrayOfName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToarrayOfName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToarrayOfData
#define SOAP_TYPE_PointerToarrayOfData (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfData(struct soap*, arrayOfData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfData(struct soap*, const char *, int, arrayOfData *const*, const char *);
SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_in_PointerToarrayOfData(struct soap*, const char*, arrayOfData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfData(struct soap*, arrayOfData *const*, const char*, const char*);

#ifndef soap_write_PointerToarrayOfData
#define soap_write_PointerToarrayOfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToarrayOfData(soap, data), 0) || soap_put_PointerToarrayOfData(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_get_PointerToarrayOfData(struct soap*, arrayOfData **, const char*, const char*);

#ifndef soap_read_PointerToarrayOfData
#define soap_read_PointerToarrayOfData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToarrayOfData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfstd__string
#define SOAP_TYPE_PointerTostd__vectorTemplateOfstd__string (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfstd__string(struct soap*, const char *, int, std::vector<std::string >*const*, const char *);
SOAP_FMAC3 std::vector<std::string >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfstd__string
#define soap_write_PointerTostd__vectorTemplateOfstd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfstd__string(soap, data), 0) || soap_put_PointerTostd__vectorTemplateOfstd__string(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<std::string >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfstd__string
#define soap_read_PointerTostd__vectorTemplateOfstd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfstd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerTostring
#define soap_write_PointerTostring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostring(soap, data), 0) || soap_put_PointerTostring(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerTostring
#define soap_read_PointerTostring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__Data
#define SOAP_TYPE_PointerTons__Data (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Data(struct soap*, ns__Data *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Data(struct soap*, const char *, int, ns__Data *const*, const char *);
SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_in_PointerTons__Data(struct soap*, const char*, ns__Data **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Data(struct soap*, ns__Data *const*, const char*, const char*);

#ifndef soap_write_PointerTons__Data
#define soap_write_PointerTons__Data(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__Data(soap, data), 0) || soap_put_PointerTons__Data(soap, data, "ns:Data", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_get_PointerTons__Data(struct soap*, ns__Data **, const char*, const char*);

#ifndef soap_read_PointerTons__Data
#define soap_read_PointerTons__Data(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons__Data(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data), 0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_StatusConnList_t
#define SOAP_TYPE_StatusConnList_t (120)
#endif

#define soap_default_StatusConnList_t(soap, a) soap_default_std__vectorTemplateOfConnTrack_t(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StatusConnList_t(struct soap*, const std::vector<ConnTrack_t >*);

#define soap_out_StatusConnList_t soap_out_std__vectorTemplateOfConnTrack_t


#define soap_in_StatusConnList_t soap_in_std__vectorTemplateOfConnTrack_t


#define soap_instantiate_StatusConnList_t soap_instantiate_std__vectorTemplateOfConnTrack_t


#define soap_copy_StatusConnList_t soap_copy_std__vectorTemplateOfConnTrack_t

#ifndef SOAP_TYPE_std__vectorTemplateOfConnTrack_t
#define SOAP_TYPE_std__vectorTemplateOfConnTrack_t (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfConnTrack_t(struct soap*, std::vector<ConnTrack_t >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfConnTrack_t(struct soap*, const std::vector<ConnTrack_t >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfConnTrack_t(struct soap*, const char*, int, const std::vector<ConnTrack_t >*, const char*);
SOAP_FMAC3 std::vector<ConnTrack_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfConnTrack_t(struct soap*, const char*, std::vector<ConnTrack_t >*, const char*);
SOAP_FMAC1 std::vector<ConnTrack_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfConnTrack_t(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ConnTrack_t > * soap_new_std__vectorTemplateOfConnTrack_t(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfConnTrack_t(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfConnTrack_t(struct soap *soap, std::vector<ConnTrack_t >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfConnTrack_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_StatusServicesList_t
#define SOAP_TYPE_StatusServicesList_t (112)
#endif

#define soap_default_StatusServicesList_t(soap, a) soap_default_std__vectorTemplateOfStatusServices_t(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StatusServicesList_t(struct soap*, const std::vector<StatusServices_t >*);

#define soap_out_StatusServicesList_t soap_out_std__vectorTemplateOfStatusServices_t


#define soap_in_StatusServicesList_t soap_in_std__vectorTemplateOfStatusServices_t


#define soap_instantiate_StatusServicesList_t soap_instantiate_std__vectorTemplateOfStatusServices_t


#define soap_copy_StatusServicesList_t soap_copy_std__vectorTemplateOfStatusServices_t

#ifndef SOAP_TYPE_std__vectorTemplateOfStatusServices_t
#define SOAP_TYPE_std__vectorTemplateOfStatusServices_t (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfStatusServices_t(struct soap*, std::vector<StatusServices_t >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfStatusServices_t(struct soap*, const std::vector<StatusServices_t >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfStatusServices_t(struct soap*, const char*, int, const std::vector<StatusServices_t >*, const char*);
SOAP_FMAC3 std::vector<StatusServices_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfStatusServices_t(struct soap*, const char*, std::vector<StatusServices_t >*, const char*);
SOAP_FMAC1 std::vector<StatusServices_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfStatusServices_t(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<StatusServices_t > * soap_new_std__vectorTemplateOfStatusServices_t(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfStatusServices_t(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfStatusServices_t(struct soap *soap, std::vector<StatusServices_t >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfStatusServices_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfNetTraffic_t
#define SOAP_TYPE_std__vectorTemplateOfNetTraffic_t (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfNetTraffic_t(struct soap*, std::vector<NetTraffic_t >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfNetTraffic_t(struct soap*, const std::vector<NetTraffic_t >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfNetTraffic_t(struct soap*, const char*, int, const std::vector<NetTraffic_t >*, const char*);
SOAP_FMAC3 std::vector<NetTraffic_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfNetTraffic_t(struct soap*, const char*, std::vector<NetTraffic_t >*, const char*);
SOAP_FMAC1 std::vector<NetTraffic_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfNetTraffic_t(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<NetTraffic_t > * soap_new_std__vectorTemplateOfNetTraffic_t(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfNetTraffic_t(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfNetTraffic_t(struct soap *soap, std::vector<NetTraffic_t >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfNetTraffic_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfGraphData_t
#define SOAP_TYPE_std__vectorTemplateOfGraphData_t (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfGraphData_t(struct soap*, std::vector<GraphData_t >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfGraphData_t(struct soap*, const std::vector<GraphData_t >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfGraphData_t(struct soap*, const char*, int, const std::vector<GraphData_t >*, const char*);
SOAP_FMAC3 std::vector<GraphData_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfGraphData_t(struct soap*, const char*, std::vector<GraphData_t >*, const char*);
SOAP_FMAC1 std::vector<GraphData_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfGraphData_t(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<GraphData_t > * soap_new_std__vectorTemplateOfGraphData_t(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfGraphData_t(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfGraphData_t(struct soap *soap, std::vector<GraphData_t >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfGraphData_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfint
#define SOAP_TYPE_std__vectorTemplateOfint (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap*, std::vector<int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap*, const std::vector<int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap*, const char*, int, const std::vector<int >*, const char*);
SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap*, const char*, std::vector<int >*, const char*);
SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<int > * soap_new_std__vectorTemplateOfint(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfint(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfIfInfot_t
#define SOAP_TYPE_std__vectorTemplateOfIfInfot_t (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfIfInfot_t(struct soap*, std::vector<IfInfot_t >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfIfInfot_t(struct soap*, const std::vector<IfInfot_t >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfIfInfot_t(struct soap*, const char*, int, const std::vector<IfInfot_t >*, const char*);
SOAP_FMAC3 std::vector<IfInfot_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfIfInfot_t(struct soap*, const char*, std::vector<IfInfot_t >*, const char*);
SOAP_FMAC1 std::vector<IfInfot_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfIfInfot_t(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<IfInfot_t > * soap_new_std__vectorTemplateOfIfInfot_t(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfIfInfot_t(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfIfInfot_t(struct soap *soap, std::vector<IfInfot_t >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfIfInfot_t(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
