/* soapH.h
   Generated by gSOAP 2.8.23 from dime.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data), 0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data), 0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data), 0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_arrayOfName
#define SOAP_TYPE_arrayOfName (26)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfName(struct soap*, const char*, int, const arrayOfName *, const char*);
SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_in_arrayOfName(struct soap*, const char*, arrayOfName *, const char*);

#ifndef soap_write_arrayOfName
#define soap_write_arrayOfName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_get_arrayOfName(struct soap*, arrayOfName *, const char*, const char*);

#ifndef soap_read_arrayOfName
#define soap_read_arrayOfName(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayOfName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 arrayOfName * SOAP_FMAC2 soap_instantiate_arrayOfName(struct soap*, int, const char*, const char*, size_t*);

inline arrayOfName * soap_new_arrayOfName(struct soap *soap, int n = -1) { return soap_instantiate_arrayOfName(soap, n, NULL, NULL, NULL); }

inline arrayOfName * soap_new_req_arrayOfName(struct soap *soap) { arrayOfName *_p = soap_instantiate_arrayOfName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline arrayOfName * soap_new_set_arrayOfName(struct soap *soap, char **__ptr, int __size) { arrayOfName *_p = soap_instantiate_arrayOfName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->arrayOfName::__ptr = __ptr; _p->arrayOfName::__size = __size; } return _p; }

inline void soap_delete_arrayOfName(struct soap *soap, arrayOfName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_arrayOfData
#define SOAP_TYPE_arrayOfData (15)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfData(struct soap*, const char*, int, const arrayOfData *, const char*);
SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_in_arrayOfData(struct soap*, const char*, arrayOfData *, const char*);

#ifndef soap_write_arrayOfData
#define soap_write_arrayOfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_get_arrayOfData(struct soap*, arrayOfData *, const char*, const char*);

#ifndef soap_read_arrayOfData
#define soap_read_arrayOfData(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayOfData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 arrayOfData * SOAP_FMAC2 soap_instantiate_arrayOfData(struct soap*, int, const char*, const char*, size_t*);

inline arrayOfData * soap_new_arrayOfData(struct soap *soap, int n = -1) { return soap_instantiate_arrayOfData(soap, n, NULL, NULL, NULL); }

inline arrayOfData * soap_new_req_arrayOfData(struct soap *soap) { arrayOfData *_p = soap_instantiate_arrayOfData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline arrayOfData * soap_new_set_arrayOfData(struct soap *soap, ns__Data *__ptr, int __size) { arrayOfData *_p = soap_instantiate_arrayOfData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->arrayOfData::__ptr = __ptr; _p->arrayOfData::__size = __size; } return _p; }

inline void soap_delete_arrayOfData(struct soap *soap, arrayOfData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__Data
#define SOAP_TYPE_ns__Data (7)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Data(struct soap*, const char*, int, const ns__Data *, const char*);
SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_in_ns__Data(struct soap*, const char*, ns__Data *, const char*);

#ifndef soap_write_ns__Data
#define soap_write_ns__Data(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns:Data", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_get_ns__Data(struct soap*, ns__Data *, const char*, const char*);

#ifndef soap_read_ns__Data
#define soap_read_ns__Data(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__Data(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__Data * SOAP_FMAC2 soap_instantiate_ns__Data(struct soap*, int, const char*, const char*, size_t*);

inline ns__Data * soap_new_ns__Data(struct soap *soap, int n = -1) { return soap_instantiate_ns__Data(soap, n, NULL, NULL, NULL); }

inline ns__Data * soap_new_req_ns__Data(struct soap *soap) { ns__Data *_p = soap_instantiate_ns__Data(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__Data * soap_new_set_ns__Data(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { ns__Data *_p = soap_instantiate_ns__Data(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__Data::__ptr = __ptr; _p->ns__Data::__size = __size; _p->ns__Data::id = id; _p->ns__Data::type = type; _p->ns__Data::options = options; } return _p; }

inline void soap_delete_ns__Data(struct soap *soap, ns__Data *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Data(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__add
#define SOAP_TYPE_ns__add (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__add(struct soap*, struct ns__add *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__add(struct soap*, const struct ns__add *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__add(struct soap*, const char*, int, const struct ns__add *, const char*);
SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_in_ns__add(struct soap*, const char*, struct ns__add *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__add(struct soap*, const struct ns__add *, const char*, const char*);

#ifndef soap_write_ns__add
#define soap_write_ns__add(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__add(soap, data), 0) || soap_put_ns__add(soap, data, "ns:add", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__add * SOAP_FMAC4 soap_get_ns__add(struct soap*, struct ns__add *, const char*, const char*);

#ifndef soap_read_ns__add
#define soap_read_ns__add(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__add(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__add * SOAP_FMAC2 soap_instantiate_ns__add(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__add * soap_new_ns__add(struct soap *soap, int n = -1) { return soap_instantiate_ns__add(soap, n, NULL, NULL, NULL); }

inline struct ns__add * soap_new_req_ns__add(struct soap *soap, float a, float b) { struct ns__add *_p = soap_instantiate_ns__add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__add(soap, _p); _p->a = a; _p->b = b; } return _p; }

inline struct ns__add * soap_new_set_ns__add(struct soap *soap, float a, float b) { struct ns__add *_p = soap_instantiate_ns__add(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__add(soap, _p); _p->a = a; _p->b = b; } return _p; }

inline void soap_delete_ns__add(struct soap *soap, struct ns__add *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__add(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addResponse
#define SOAP_TYPE_ns__addResponse (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addResponse(struct soap*, struct ns__addResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addResponse(struct soap*, const struct ns__addResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addResponse(struct soap*, const char*, int, const struct ns__addResponse *, const char*);
SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_in_ns__addResponse(struct soap*, const char*, struct ns__addResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addResponse(struct soap*, const struct ns__addResponse *, const char*, const char*);

#ifndef soap_write_ns__addResponse
#define soap_write_ns__addResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addResponse(soap, data), 0) || soap_put_ns__addResponse(soap, data, "ns:addResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addResponse * SOAP_FMAC4 soap_get_ns__addResponse(struct soap*, struct ns__addResponse *, const char*, const char*);

#ifndef soap_read_ns__addResponse
#define soap_read_ns__addResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addResponse * SOAP_FMAC2 soap_instantiate_ns__addResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addResponse * soap_new_ns__addResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__addResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__addResponse * soap_new_req_ns__addResponse(struct soap *soap) { struct ns__addResponse *_p = soap_instantiate_ns__addResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addResponse(soap, _p); } return _p; }

inline struct ns__addResponse * soap_new_set_ns__addResponse(struct soap *soap, float *ret) { struct ns__addResponse *_p = soap_instantiate_ns__addResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addResponse(soap, _p); _p->ret = ret; } return _p; }

inline void soap_delete_ns__addResponse(struct soap *soap, struct ns__addResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getImage
#define SOAP_TYPE_ns__getImage (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImage(struct soap*, struct ns__getImage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImage(struct soap*, const struct ns__getImage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImage(struct soap*, const char*, int, const struct ns__getImage *, const char*);
SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_in_ns__getImage(struct soap*, const char*, struct ns__getImage *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImage(struct soap*, const struct ns__getImage *, const char*, const char*);

#ifndef soap_write_ns__getImage
#define soap_write_ns__getImage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getImage(soap, data), 0) || soap_put_ns__getImage(soap, data, "ns:getImage", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_get_ns__getImage(struct soap*, struct ns__getImage *, const char*, const char*);

#ifndef soap_read_ns__getImage
#define soap_read_ns__getImage(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getImage(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getImage * SOAP_FMAC2 soap_instantiate_ns__getImage(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getImage * soap_new_ns__getImage(struct soap *soap, int n = -1) { return soap_instantiate_ns__getImage(soap, n, NULL, NULL, NULL); }

inline struct ns__getImage * soap_new_req_ns__getImage(struct soap *soap) { struct ns__getImage *_p = soap_instantiate_ns__getImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImage(soap, _p); } return _p; }

inline struct ns__getImage * soap_new_set_ns__getImage(struct soap *soap, char *name) { struct ns__getImage *_p = soap_instantiate_ns__getImage(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImage(soap, _p); _p->name = name; } return _p; }

inline void soap_delete_ns__getImage(struct soap *soap, struct ns__getImage *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImage(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getImageResponse
#define SOAP_TYPE_ns__getImageResponse (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImageResponse(struct soap*, struct ns__getImageResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImageResponse(struct soap*, const struct ns__getImageResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImageResponse(struct soap*, const char*, int, const struct ns__getImageResponse *, const char*);
SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_in_ns__getImageResponse(struct soap*, const char*, struct ns__getImageResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImageResponse(struct soap*, const struct ns__getImageResponse *, const char*, const char*);

#ifndef soap_write_ns__getImageResponse
#define soap_write_ns__getImageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getImageResponse(soap, data), 0) || soap_put_ns__getImageResponse(soap, data, "ns:getImageResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_get_ns__getImageResponse(struct soap*, struct ns__getImageResponse *, const char*, const char*);

#ifndef soap_read_ns__getImageResponse
#define soap_read_ns__getImageResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getImageResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getImageResponse * SOAP_FMAC2 soap_instantiate_ns__getImageResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getImageResponse * soap_new_ns__getImageResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getImageResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getImageResponse * soap_new_req_ns__getImageResponse(struct soap *soap, const ns__Data& image) { struct ns__getImageResponse *_p = soap_instantiate_ns__getImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImageResponse(soap, _p); _p->image = image; } return _p; }

inline struct ns__getImageResponse * soap_new_set_ns__getImageResponse(struct soap *soap, const ns__Data& image) { struct ns__getImageResponse *_p = soap_instantiate_ns__getImageResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getImageResponse(soap, _p); _p->image = image; } return _p; }

inline void soap_delete_ns__getImageResponse(struct soap *soap, struct ns__getImageResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImageResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getData
#define SOAP_TYPE_ns__getData (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getData(struct soap*, struct ns__getData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getData(struct soap*, const struct ns__getData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getData(struct soap*, const char*, int, const struct ns__getData *, const char*);
SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_in_ns__getData(struct soap*, const char*, struct ns__getData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getData(struct soap*, const struct ns__getData *, const char*, const char*);

#ifndef soap_write_ns__getData
#define soap_write_ns__getData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getData(soap, data), 0) || soap_put_ns__getData(soap, data, "ns:getData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_get_ns__getData(struct soap*, struct ns__getData *, const char*, const char*);

#ifndef soap_read_ns__getData
#define soap_read_ns__getData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getData * SOAP_FMAC2 soap_instantiate_ns__getData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getData * soap_new_ns__getData(struct soap *soap, int n = -1) { return soap_instantiate_ns__getData(soap, n, NULL, NULL, NULL); }

inline struct ns__getData * soap_new_req_ns__getData(struct soap *soap) { struct ns__getData *_p = soap_instantiate_ns__getData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getData(soap, _p); } return _p; }

inline struct ns__getData * soap_new_set_ns__getData(struct soap *soap, arrayOfName *names) { struct ns__getData *_p = soap_instantiate_ns__getData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getData(soap, _p); _p->names = names; } return _p; }

inline void soap_delete_ns__getData(struct soap *soap, struct ns__getData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getDataResponse
#define SOAP_TYPE_ns__getDataResponse (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getDataResponse(struct soap*, struct ns__getDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getDataResponse(struct soap*, const struct ns__getDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getDataResponse(struct soap*, const char*, int, const struct ns__getDataResponse *, const char*);
SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_in_ns__getDataResponse(struct soap*, const char*, struct ns__getDataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getDataResponse(struct soap*, const struct ns__getDataResponse *, const char*, const char*);

#ifndef soap_write_ns__getDataResponse
#define soap_write_ns__getDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getDataResponse(soap, data), 0) || soap_put_ns__getDataResponse(soap, data, "ns:getDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_get_ns__getDataResponse(struct soap*, struct ns__getDataResponse *, const char*, const char*);

#ifndef soap_read_ns__getDataResponse
#define soap_read_ns__getDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getDataResponse * SOAP_FMAC2 soap_instantiate_ns__getDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getDataResponse * soap_new_ns__getDataResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getDataResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getDataResponse * soap_new_req_ns__getDataResponse(struct soap *soap) { struct ns__getDataResponse *_p = soap_instantiate_ns__getDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getDataResponse(soap, _p); } return _p; }

inline struct ns__getDataResponse * soap_new_set_ns__getDataResponse(struct soap *soap, arrayOfData *data) { struct ns__getDataResponse *_p = soap_instantiate_ns__getDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getDataResponse(soap, _p); _p->data = data; } return _p; }

inline void soap_delete_ns__getDataResponse(struct soap *soap, struct ns__getDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__putData
#define SOAP_TYPE_ns__putData (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putData(struct soap*, struct ns__putData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putData(struct soap*, const struct ns__putData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putData(struct soap*, const char*, int, const struct ns__putData *, const char*);
SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_in_ns__putData(struct soap*, const char*, struct ns__putData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putData(struct soap*, const struct ns__putData *, const char*, const char*);

#ifndef soap_write_ns__putData
#define soap_write_ns__putData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__putData(soap, data), 0) || soap_put_ns__putData(soap, data, "ns:putData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_get_ns__putData(struct soap*, struct ns__putData *, const char*, const char*);

#ifndef soap_read_ns__putData
#define soap_read_ns__putData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__putData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__putData * SOAP_FMAC2 soap_instantiate_ns__putData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__putData * soap_new_ns__putData(struct soap *soap, int n = -1) { return soap_instantiate_ns__putData(soap, n, NULL, NULL, NULL); }

inline struct ns__putData * soap_new_req_ns__putData(struct soap *soap) { struct ns__putData *_p = soap_instantiate_ns__putData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putData(soap, _p); } return _p; }

inline struct ns__putData * soap_new_set_ns__putData(struct soap *soap, arrayOfData *data) { struct ns__putData *_p = soap_instantiate_ns__putData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putData(soap, _p); _p->data = data; } return _p; }

inline void soap_delete_ns__putData(struct soap *soap, struct ns__putData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__putDataResponse
#define SOAP_TYPE_ns__putDataResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putDataResponse(struct soap*, struct ns__putDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putDataResponse(struct soap*, const struct ns__putDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putDataResponse(struct soap*, const char*, int, const struct ns__putDataResponse *, const char*);
SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_in_ns__putDataResponse(struct soap*, const char*, struct ns__putDataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putDataResponse(struct soap*, const struct ns__putDataResponse *, const char*, const char*);

#ifndef soap_write_ns__putDataResponse
#define soap_write_ns__putDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__putDataResponse(soap, data), 0) || soap_put_ns__putDataResponse(soap, data, "ns:putDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_get_ns__putDataResponse(struct soap*, struct ns__putDataResponse *, const char*, const char*);

#ifndef soap_read_ns__putDataResponse
#define soap_read_ns__putDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__putDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__putDataResponse * SOAP_FMAC2 soap_instantiate_ns__putDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__putDataResponse * soap_new_ns__putDataResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__putDataResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__putDataResponse * soap_new_req_ns__putDataResponse(struct soap *soap) { struct ns__putDataResponse *_p = soap_instantiate_ns__putDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putDataResponse(soap, _p); } return _p; }

inline struct ns__putDataResponse * soap_new_set_ns__putDataResponse(struct soap *soap, arrayOfName *names) { struct ns__putDataResponse *_p = soap_instantiate_ns__putDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__putDataResponse(soap, _p); _p->names = names; } return _p; }

inline void soap_delete_ns__putDataResponse(struct soap *soap, struct ns__putDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);

#ifndef soap_write_PointerTofloat
#define soap_write_PointerTofloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofloat(soap, data), 0) || soap_put_PointerTofloat(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);

#ifndef soap_read_PointerTofloat
#define soap_read_PointerTofloat(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToarrayOfName
#define SOAP_TYPE_PointerToarrayOfName (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfName(struct soap*, arrayOfName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfName(struct soap*, const char *, int, arrayOfName *const*, const char *);
SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_in_PointerToarrayOfName(struct soap*, const char*, arrayOfName **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfName(struct soap*, arrayOfName *const*, const char*, const char*);

#ifndef soap_write_PointerToarrayOfName
#define soap_write_PointerToarrayOfName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToarrayOfName(soap, data), 0) || soap_put_PointerToarrayOfName(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_get_PointerToarrayOfName(struct soap*, arrayOfName **, const char*, const char*);

#ifndef soap_read_PointerToarrayOfName
#define soap_read_PointerToarrayOfName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToarrayOfName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToarrayOfData
#define SOAP_TYPE_PointerToarrayOfData (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfData(struct soap*, arrayOfData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfData(struct soap*, const char *, int, arrayOfData *const*, const char *);
SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_in_PointerToarrayOfData(struct soap*, const char*, arrayOfData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfData(struct soap*, arrayOfData *const*, const char*, const char*);

#ifndef soap_write_PointerToarrayOfData
#define soap_write_PointerToarrayOfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToarrayOfData(soap, data), 0) || soap_put_PointerToarrayOfData(soap, data, "SOAP-ENC:Array", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_get_PointerToarrayOfData(struct soap*, arrayOfData **, const char*, const char*);

#ifndef soap_read_PointerToarrayOfData
#define soap_read_PointerToarrayOfData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToarrayOfData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostring
#define SOAP_TYPE_PointerTostring (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerTostring
#define soap_write_PointerTostring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostring(soap, data), 0) || soap_put_PointerTostring(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerTostring
#define soap_read_PointerTostring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__Data
#define SOAP_TYPE_PointerTons__Data (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Data(struct soap*, ns__Data *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Data(struct soap*, const char *, int, ns__Data *const*, const char *);
SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_in_PointerTons__Data(struct soap*, const char*, ns__Data **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Data(struct soap*, ns__Data *const*, const char*, const char*);

#ifndef soap_write_PointerTons__Data
#define soap_write_PointerTons__Data(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__Data(soap, data), 0) || soap_put_PointerTons__Data(soap, data, "ns:Data", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_get_PointerTons__Data(struct soap*, ns__Data **, const char*, const char*);

#ifndef soap_read_PointerTons__Data
#define soap_read_PointerTons__Data(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons__Data(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data), 0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
