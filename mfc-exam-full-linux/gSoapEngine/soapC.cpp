/* soapC.cpp
   Generated by gSOAP 2.8.23 from ctSoap.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.23 2015-10-29 08:02:47 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_legend_t:
		return soap_in_legend_t(soap, NULL, NULL, "legend-t");
	case SOAP_TYPE_SysGraphNumPoint_t:
		return soap_in_SysGraphNumPoint_t(soap, NULL, NULL, "SysGraphNumPoint-t");
	case SOAP_TYPE_SysGraphMode_t:
		return soap_in_SysGraphMode_t(soap, NULL, NULL, "SysGraphMode-t");
	case SOAP_TYPE_ns__SysShutdownEvent:
		return soap_in_ns__SysShutdownEvent(soap, NULL, NULL, "ns:SysShutdownEvent");
	case SOAP_TYPE_ns__SysBackupEvent:
		return soap_in_ns__SysBackupEvent(soap, NULL, NULL, "ns:SysBackupEvent");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ConnTrack_t:
		return soap_in_ConnTrack_t(soap, NULL, NULL, "ConnTrack-t");
	case SOAP_TYPE_StatusServices_t:
		return soap_in_StatusServices_t(soap, NULL, NULL, "StatusServices-t");
	case SOAP_TYPE_NetworkData_t:
		return soap_in_NetworkData_t(soap, NULL, NULL, "NetworkData-t");
	case SOAP_TYPE_NetTraffic_t:
		return soap_in_NetTraffic_t(soap, NULL, NULL, "NetTraffic-t");
	case SOAP_TYPE_SystemData_t:
		return soap_in_SystemData_t(soap, NULL, NULL, "SystemData-t");
	case SOAP_TYPE_GraphData_t:
		return soap_in_GraphData_t(soap, NULL, NULL, "GraphData-t");
	case SOAP_TYPE_SysInfo_t:
		return soap_in_SysInfo_t(soap, NULL, NULL, "SysInfo-t");
	case SOAP_TYPE_SysBackupRet_t:
		return soap_in_SysBackupRet_t(soap, NULL, NULL, "SysBackupRet-t");
	case SOAP_TYPE_NetInterface_t:
		return soap_in_NetInterface_t(soap, NULL, NULL, "NetInterface-t");
	case SOAP_TYPE_IfInfot_t:
		return soap_in_IfInfot_t(soap, NULL, NULL, "IfInfot-t");
	case SOAP_TYPE_RuntimeInfo_t:
		return soap_in_RuntimeInfo_t(soap, NULL, NULL, "RuntimeInfo-t");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_arrayOfName:
		return soap_in_arrayOfName(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_arrayOfData:
		return soap_in_arrayOfData(soap, NULL, NULL, "ns:Data");
	case SOAP_TYPE_ns__Data:
		return soap_in_ns__Data(soap, NULL, NULL, "ns:Data");
	case SOAP_TYPE_ns__getStatusConnection:
		return soap_in_ns__getStatusConnection(soap, NULL, NULL, "ns:getStatusConnection");
	case SOAP_TYPE_ns__getStatusConnectionResponse:
		return soap_in_ns__getStatusConnectionResponse(soap, NULL, NULL, "ns:getStatusConnectionResponse");
	case SOAP_TYPE_ns__getStatusServices:
		return soap_in_ns__getStatusServices(soap, NULL, NULL, "ns:getStatusServices");
	case SOAP_TYPE_ns__getStatusServicesResponse:
		return soap_in_ns__getStatusServicesResponse(soap, NULL, NULL, "ns:getStatusServicesResponse");
	case SOAP_TYPE_ns__getStatusNetworkOther:
		return soap_in_ns__getStatusNetworkOther(soap, NULL, NULL, "ns:getStatusNetworkOther");
	case SOAP_TYPE_ns__getStatusNetworkOtherResponse:
		return soap_in_ns__getStatusNetworkOtherResponse(soap, NULL, NULL, "ns:getStatusNetworkOtherResponse");
	case SOAP_TYPE_ns__getStatusNetworkInternal:
		return soap_in_ns__getStatusNetworkInternal(soap, NULL, NULL, "ns:getStatusNetworkInternal");
	case SOAP_TYPE_ns__getStatusNetworkInternalResponse:
		return soap_in_ns__getStatusNetworkInternalResponse(soap, NULL, NULL, "ns:getStatusNetworkInternalResponse");
	case SOAP_TYPE_ns__getStatusNetworkExternal:
		return soap_in_ns__getStatusNetworkExternal(soap, NULL, NULL, "ns:getStatusNetworkExternal");
	case SOAP_TYPE_ns__getStatusNetworkExternalResponse:
		return soap_in_ns__getStatusNetworkExternalResponse(soap, NULL, NULL, "ns:getStatusNetworkExternalResponse");
	case SOAP_TYPE_ns__getStatusSystemGraph:
		return soap_in_ns__getStatusSystemGraph(soap, NULL, NULL, "ns:getStatusSystemGraph");
	case SOAP_TYPE_ns__getStatusSystemGraphResponse:
		return soap_in_ns__getStatusSystemGraphResponse(soap, NULL, NULL, "ns:getStatusSystemGraphResponse");
	case SOAP_TYPE_ns__SysShutdownHandle:
		return soap_in_ns__SysShutdownHandle(soap, NULL, NULL, "ns:SysShutdownHandle");
	case SOAP_TYPE_ns__getSysSysInfo:
		return soap_in_ns__getSysSysInfo(soap, NULL, NULL, "ns:getSysSysInfo");
	case SOAP_TYPE_ns__getSysSysInfoResponse:
		return soap_in_ns__getSysSysInfoResponse(soap, NULL, NULL, "ns:getSysSysInfoResponse");
	case SOAP_TYPE_ns__SysBackupHandle:
		return soap_in_ns__SysBackupHandle(soap, NULL, NULL, "ns:SysBackupHandle");
	case SOAP_TYPE_ns__SysBackupHandleResponse:
		return soap_in_ns__SysBackupHandleResponse(soap, NULL, NULL, "ns:SysBackupHandleResponse");
	case SOAP_TYPE_ns__getSysHomeInterface:
		return soap_in_ns__getSysHomeInterface(soap, NULL, NULL, "ns:getSysHomeInterface");
	case SOAP_TYPE_ns__getSysHomeInterfaceResponse:
		return soap_in_ns__getSysHomeInterfaceResponse(soap, NULL, NULL, "ns:getSysHomeInterfaceResponse");
	case SOAP_TYPE_ns__getRuntimeInfo:
		return soap_in_ns__getRuntimeInfo(soap, NULL, NULL, "ns:getRuntimeInfo");
	case SOAP_TYPE_ns__getRuntimeInfoResponse:
		return soap_in_ns__getRuntimeInfoResponse(soap, NULL, NULL, "ns:getRuntimeInfoResponse");
	case SOAP_TYPE_ns__login:
		return soap_in_ns__login(soap, NULL, NULL, "ns:login");
	case SOAP_TYPE_ns__loginResponse:
		return soap_in_ns__loginResponse(soap, NULL, NULL, "ns:loginResponse");
	case SOAP_TYPE_ns__noResponse:
		return soap_in_ns__noResponse(soap, NULL, NULL, "ns:noResponse");
	case SOAP_TYPE_ns__getImage:
		return soap_in_ns__getImage(soap, NULL, NULL, "ns:getImage");
	case SOAP_TYPE_ns__getImageResponse:
		return soap_in_ns__getImageResponse(soap, NULL, NULL, "ns:getImageResponse");
	case SOAP_TYPE_ns__getData:
		return soap_in_ns__getData(soap, NULL, NULL, "ns:getData");
	case SOAP_TYPE_ns__getDataResponse:
		return soap_in_ns__getDataResponse(soap, NULL, NULL, "ns:getDataResponse");
	case SOAP_TYPE_ns__putData:
		return soap_in_ns__putData(soap, NULL, NULL, "ns:putData");
	case SOAP_TYPE_ns__putDataResponse:
		return soap_in_ns__putDataResponse(soap, NULL, NULL, "ns:putDataResponse");
	case SOAP_TYPE_PointerToNetworkData_t:
		return soap_in_PointerToNetworkData_t(soap, NULL, NULL, "NetworkData-t");
	case SOAP_TYPE_PointerToSystemData_t:
		return soap_in_PointerToSystemData_t(soap, NULL, NULL, "SystemData-t");
	case SOAP_TYPE_PointerTons__noResponse:
		return soap_in_PointerTons__noResponse(soap, NULL, NULL, "ns:noResponse");
	case SOAP_TYPE_PointerToSysInfo_t:
		return soap_in_PointerToSysInfo_t(soap, NULL, NULL, "SysInfo-t");
	case SOAP_TYPE_PointerToSysBackupRet_t:
		return soap_in_PointerToSysBackupRet_t(soap, NULL, NULL, "SysBackupRet-t");
	case SOAP_TYPE_PointerToNetInterface_t:
		return soap_in_PointerToNetInterface_t(soap, NULL, NULL, "NetInterface-t");
	case SOAP_TYPE_PointerToRuntimeInfo_t:
		return soap_in_PointerToRuntimeInfo_t(soap, NULL, NULL, "RuntimeInfo-t");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerToarrayOfName:
		return soap_in_PointerToarrayOfName(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToarrayOfData:
		return soap_in_PointerToarrayOfData(soap, NULL, NULL, "ns:Data");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons__Data:
		return soap_in_PointerTons__Data(soap, NULL, NULL, "ns:Data");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ConnTrack-t"))
		{	*type = SOAP_TYPE_ConnTrack_t;
			return soap_in_ConnTrack_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "StatusServices-t"))
		{	*type = SOAP_TYPE_StatusServices_t;
			return soap_in_StatusServices_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NetworkData-t"))
		{	*type = SOAP_TYPE_NetworkData_t;
			return soap_in_NetworkData_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NetTraffic-t"))
		{	*type = SOAP_TYPE_NetTraffic_t;
			return soap_in_NetTraffic_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SystemData-t"))
		{	*type = SOAP_TYPE_SystemData_t;
			return soap_in_SystemData_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "GraphData-t"))
		{	*type = SOAP_TYPE_GraphData_t;
			return soap_in_GraphData_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SysInfo-t"))
		{	*type = SOAP_TYPE_SysInfo_t;
			return soap_in_SysInfo_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SysBackupRet-t"))
		{	*type = SOAP_TYPE_SysBackupRet_t;
			return soap_in_SysBackupRet_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NetInterface-t"))
		{	*type = SOAP_TYPE_NetInterface_t;
			return soap_in_NetInterface_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IfInfot-t"))
		{	*type = SOAP_TYPE_IfInfot_t;
			return soap_in_IfInfot_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "RuntimeInfo-t"))
		{	*type = SOAP_TYPE_RuntimeInfo_t;
			return soap_in_RuntimeInfo_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_arrayOfName;
			return soap_in_arrayOfName(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns:Data"))
		{	*type = SOAP_TYPE_arrayOfData;
			return soap_in_arrayOfData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:Data"))
		{	*type = SOAP_TYPE_ns__Data;
			return soap_in_ns__Data(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "legend-t"))
		{	*type = SOAP_TYPE_legend_t;
			return soap_in_legend_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SysGraphNumPoint-t"))
		{	*type = SOAP_TYPE_SysGraphNumPoint_t;
			return soap_in_SysGraphNumPoint_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SysGraphMode-t"))
		{	*type = SOAP_TYPE_SysGraphMode_t;
			return soap_in_SysGraphMode_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SysShutdownEvent"))
		{	*type = SOAP_TYPE_ns__SysShutdownEvent;
			return soap_in_ns__SysShutdownEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SysBackupEvent"))
		{	*type = SOAP_TYPE_ns__SysBackupEvent;
			return soap_in_ns__SysBackupEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusConnection"))
		{	*type = SOAP_TYPE_ns__getStatusConnection;
			return soap_in_ns__getStatusConnection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusConnectionResponse"))
		{	*type = SOAP_TYPE_ns__getStatusConnectionResponse;
			return soap_in_ns__getStatusConnectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusServices"))
		{	*type = SOAP_TYPE_ns__getStatusServices;
			return soap_in_ns__getStatusServices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusServicesResponse"))
		{	*type = SOAP_TYPE_ns__getStatusServicesResponse;
			return soap_in_ns__getStatusServicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkOther"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkOther;
			return soap_in_ns__getStatusNetworkOther(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkOtherResponse"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkOtherResponse;
			return soap_in_ns__getStatusNetworkOtherResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkInternal"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkInternal;
			return soap_in_ns__getStatusNetworkInternal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkInternalResponse"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkInternalResponse;
			return soap_in_ns__getStatusNetworkInternalResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkExternal"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkExternal;
			return soap_in_ns__getStatusNetworkExternal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusNetworkExternalResponse"))
		{	*type = SOAP_TYPE_ns__getStatusNetworkExternalResponse;
			return soap_in_ns__getStatusNetworkExternalResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusSystemGraph"))
		{	*type = SOAP_TYPE_ns__getStatusSystemGraph;
			return soap_in_ns__getStatusSystemGraph(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusSystemGraphResponse"))
		{	*type = SOAP_TYPE_ns__getStatusSystemGraphResponse;
			return soap_in_ns__getStatusSystemGraphResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SysShutdownHandle"))
		{	*type = SOAP_TYPE_ns__SysShutdownHandle;
			return soap_in_ns__SysShutdownHandle(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSysSysInfo"))
		{	*type = SOAP_TYPE_ns__getSysSysInfo;
			return soap_in_ns__getSysSysInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSysSysInfoResponse"))
		{	*type = SOAP_TYPE_ns__getSysSysInfoResponse;
			return soap_in_ns__getSysSysInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SysBackupHandle"))
		{	*type = SOAP_TYPE_ns__SysBackupHandle;
			return soap_in_ns__SysBackupHandle(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:SysBackupHandleResponse"))
		{	*type = SOAP_TYPE_ns__SysBackupHandleResponse;
			return soap_in_ns__SysBackupHandleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSysHomeInterface"))
		{	*type = SOAP_TYPE_ns__getSysHomeInterface;
			return soap_in_ns__getSysHomeInterface(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSysHomeInterfaceResponse"))
		{	*type = SOAP_TYPE_ns__getSysHomeInterfaceResponse;
			return soap_in_ns__getSysHomeInterfaceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getRuntimeInfo"))
		{	*type = SOAP_TYPE_ns__getRuntimeInfo;
			return soap_in_ns__getRuntimeInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getRuntimeInfoResponse"))
		{	*type = SOAP_TYPE_ns__getRuntimeInfoResponse;
			return soap_in_ns__getRuntimeInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:login"))
		{	*type = SOAP_TYPE_ns__login;
			return soap_in_ns__login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:loginResponse"))
		{	*type = SOAP_TYPE_ns__loginResponse;
			return soap_in_ns__loginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:noResponse"))
		{	*type = SOAP_TYPE_ns__noResponse;
			return soap_in_ns__noResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getImage"))
		{	*type = SOAP_TYPE_ns__getImage;
			return soap_in_ns__getImage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getImageResponse"))
		{	*type = SOAP_TYPE_ns__getImageResponse;
			return soap_in_ns__getImageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getData"))
		{	*type = SOAP_TYPE_ns__getData;
			return soap_in_ns__getData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getDataResponse"))
		{	*type = SOAP_TYPE_ns__getDataResponse;
			return soap_in_ns__getDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:putData"))
		{	*type = SOAP_TYPE_ns__putData;
			return soap_in_ns__putData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:putDataResponse"))
		{	*type = SOAP_TYPE_ns__putDataResponse;
			return soap_in_ns__putDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_legend_t:
		return soap_out_legend_t(soap, tag, id, (const enum legend_t *)ptr, "legend-t");
	case SOAP_TYPE_SysGraphNumPoint_t:
		return soap_out_SysGraphNumPoint_t(soap, tag, id, (const enum SysGraphNumPoint_t *)ptr, "SysGraphNumPoint-t");
	case SOAP_TYPE_SysGraphMode_t:
		return soap_out_SysGraphMode_t(soap, tag, id, (const enum SysGraphMode_t *)ptr, "SysGraphMode-t");
	case SOAP_TYPE_ns__SysShutdownEvent:
		return soap_out_ns__SysShutdownEvent(soap, tag, id, (const enum ns__SysShutdownEvent *)ptr, "ns:SysShutdownEvent");
	case SOAP_TYPE_ns__SysBackupEvent:
		return soap_out_ns__SysBackupEvent(soap, tag, id, (const enum ns__SysBackupEvent *)ptr, "ns:SysBackupEvent");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ConnTrack_t:
		return ((ConnTrack_t *)ptr)->soap_out(soap, tag, id, "ConnTrack-t");
	case SOAP_TYPE_StatusServices_t:
		return ((StatusServices_t *)ptr)->soap_out(soap, tag, id, "StatusServices-t");
	case SOAP_TYPE_NetworkData_t:
		return ((NetworkData_t *)ptr)->soap_out(soap, tag, id, "NetworkData-t");
	case SOAP_TYPE_NetTraffic_t:
		return ((NetTraffic_t *)ptr)->soap_out(soap, tag, id, "NetTraffic-t");
	case SOAP_TYPE_SystemData_t:
		return ((SystemData_t *)ptr)->soap_out(soap, tag, id, "SystemData-t");
	case SOAP_TYPE_GraphData_t:
		return ((GraphData_t *)ptr)->soap_out(soap, tag, id, "GraphData-t");
	case SOAP_TYPE_SysInfo_t:
		return ((SysInfo_t *)ptr)->soap_out(soap, tag, id, "SysInfo-t");
	case SOAP_TYPE_SysBackupRet_t:
		return ((SysBackupRet_t *)ptr)->soap_out(soap, tag, id, "SysBackupRet-t");
	case SOAP_TYPE_NetInterface_t:
		return ((NetInterface_t *)ptr)->soap_out(soap, tag, id, "NetInterface-t");
	case SOAP_TYPE_IfInfot_t:
		return ((IfInfot_t *)ptr)->soap_out(soap, tag, id, "IfInfot-t");
	case SOAP_TYPE_RuntimeInfo_t:
		return ((RuntimeInfo_t *)ptr)->soap_out(soap, tag, id, "RuntimeInfo-t");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_arrayOfName:
		return ((arrayOfName *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_arrayOfData:
		return ((arrayOfData *)ptr)->soap_out(soap, tag, id, "ns:Data");
	case SOAP_TYPE_ns__Data:
		return ((ns__Data *)ptr)->soap_out(soap, tag, id, "ns:Data");
	case SOAP_TYPE_ns__getStatusConnection:
		return soap_out_ns__getStatusConnection(soap, tag, id, (const struct ns__getStatusConnection *)ptr, "ns:getStatusConnection");
	case SOAP_TYPE_ns__getStatusConnectionResponse:
		return soap_out_ns__getStatusConnectionResponse(soap, tag, id, (const struct ns__getStatusConnectionResponse *)ptr, "ns:getStatusConnectionResponse");
	case SOAP_TYPE_ns__getStatusServices:
		return soap_out_ns__getStatusServices(soap, tag, id, (const struct ns__getStatusServices *)ptr, "ns:getStatusServices");
	case SOAP_TYPE_ns__getStatusServicesResponse:
		return soap_out_ns__getStatusServicesResponse(soap, tag, id, (const struct ns__getStatusServicesResponse *)ptr, "ns:getStatusServicesResponse");
	case SOAP_TYPE_ns__getStatusNetworkOther:
		return soap_out_ns__getStatusNetworkOther(soap, tag, id, (const struct ns__getStatusNetworkOther *)ptr, "ns:getStatusNetworkOther");
	case SOAP_TYPE_ns__getStatusNetworkOtherResponse:
		return soap_out_ns__getStatusNetworkOtherResponse(soap, tag, id, (const struct ns__getStatusNetworkOtherResponse *)ptr, "ns:getStatusNetworkOtherResponse");
	case SOAP_TYPE_ns__getStatusNetworkInternal:
		return soap_out_ns__getStatusNetworkInternal(soap, tag, id, (const struct ns__getStatusNetworkInternal *)ptr, "ns:getStatusNetworkInternal");
	case SOAP_TYPE_ns__getStatusNetworkInternalResponse:
		return soap_out_ns__getStatusNetworkInternalResponse(soap, tag, id, (const struct ns__getStatusNetworkInternalResponse *)ptr, "ns:getStatusNetworkInternalResponse");
	case SOAP_TYPE_ns__getStatusNetworkExternal:
		return soap_out_ns__getStatusNetworkExternal(soap, tag, id, (const struct ns__getStatusNetworkExternal *)ptr, "ns:getStatusNetworkExternal");
	case SOAP_TYPE_ns__getStatusNetworkExternalResponse:
		return soap_out_ns__getStatusNetworkExternalResponse(soap, tag, id, (const struct ns__getStatusNetworkExternalResponse *)ptr, "ns:getStatusNetworkExternalResponse");
	case SOAP_TYPE_ns__getStatusSystemGraph:
		return soap_out_ns__getStatusSystemGraph(soap, tag, id, (const struct ns__getStatusSystemGraph *)ptr, "ns:getStatusSystemGraph");
	case SOAP_TYPE_ns__getStatusSystemGraphResponse:
		return soap_out_ns__getStatusSystemGraphResponse(soap, tag, id, (const struct ns__getStatusSystemGraphResponse *)ptr, "ns:getStatusSystemGraphResponse");
	case SOAP_TYPE_ns__SysShutdownHandle:
		return soap_out_ns__SysShutdownHandle(soap, tag, id, (const struct ns__SysShutdownHandle *)ptr, "ns:SysShutdownHandle");
	case SOAP_TYPE_ns__getSysSysInfo:
		return soap_out_ns__getSysSysInfo(soap, tag, id, (const struct ns__getSysSysInfo *)ptr, "ns:getSysSysInfo");
	case SOAP_TYPE_ns__getSysSysInfoResponse:
		return soap_out_ns__getSysSysInfoResponse(soap, tag, id, (const struct ns__getSysSysInfoResponse *)ptr, "ns:getSysSysInfoResponse");
	case SOAP_TYPE_ns__SysBackupHandle:
		return soap_out_ns__SysBackupHandle(soap, tag, id, (const struct ns__SysBackupHandle *)ptr, "ns:SysBackupHandle");
	case SOAP_TYPE_ns__SysBackupHandleResponse:
		return soap_out_ns__SysBackupHandleResponse(soap, tag, id, (const struct ns__SysBackupHandleResponse *)ptr, "ns:SysBackupHandleResponse");
	case SOAP_TYPE_ns__getSysHomeInterface:
		return soap_out_ns__getSysHomeInterface(soap, tag, id, (const struct ns__getSysHomeInterface *)ptr, "ns:getSysHomeInterface");
	case SOAP_TYPE_ns__getSysHomeInterfaceResponse:
		return soap_out_ns__getSysHomeInterfaceResponse(soap, tag, id, (const struct ns__getSysHomeInterfaceResponse *)ptr, "ns:getSysHomeInterfaceResponse");
	case SOAP_TYPE_ns__getRuntimeInfo:
		return soap_out_ns__getRuntimeInfo(soap, tag, id, (const struct ns__getRuntimeInfo *)ptr, "ns:getRuntimeInfo");
	case SOAP_TYPE_ns__getRuntimeInfoResponse:
		return soap_out_ns__getRuntimeInfoResponse(soap, tag, id, (const struct ns__getRuntimeInfoResponse *)ptr, "ns:getRuntimeInfoResponse");
	case SOAP_TYPE_ns__login:
		return soap_out_ns__login(soap, tag, id, (const struct ns__login *)ptr, "ns:login");
	case SOAP_TYPE_ns__loginResponse:
		return soap_out_ns__loginResponse(soap, tag, id, (const struct ns__loginResponse *)ptr, "ns:loginResponse");
	case SOAP_TYPE_ns__noResponse:
		return soap_out_ns__noResponse(soap, tag, id, (const struct ns__noResponse *)ptr, "ns:noResponse");
	case SOAP_TYPE_ns__getImage:
		return soap_out_ns__getImage(soap, tag, id, (const struct ns__getImage *)ptr, "ns:getImage");
	case SOAP_TYPE_ns__getImageResponse:
		return soap_out_ns__getImageResponse(soap, tag, id, (const struct ns__getImageResponse *)ptr, "ns:getImageResponse");
	case SOAP_TYPE_ns__getData:
		return soap_out_ns__getData(soap, tag, id, (const struct ns__getData *)ptr, "ns:getData");
	case SOAP_TYPE_ns__getDataResponse:
		return soap_out_ns__getDataResponse(soap, tag, id, (const struct ns__getDataResponse *)ptr, "ns:getDataResponse");
	case SOAP_TYPE_ns__putData:
		return soap_out_ns__putData(soap, tag, id, (const struct ns__putData *)ptr, "ns:putData");
	case SOAP_TYPE_ns__putDataResponse:
		return soap_out_ns__putDataResponse(soap, tag, id, (const struct ns__putDataResponse *)ptr, "ns:putDataResponse");
	case SOAP_TYPE_PointerToNetworkData_t:
		return soap_out_PointerToNetworkData_t(soap, tag, id, (NetworkData_t *const*)ptr, "NetworkData-t");
	case SOAP_TYPE_PointerToSystemData_t:
		return soap_out_PointerToSystemData_t(soap, tag, id, (SystemData_t *const*)ptr, "SystemData-t");
	case SOAP_TYPE_PointerTons__noResponse:
		return soap_out_PointerTons__noResponse(soap, tag, id, (struct ns__noResponse *const*)ptr, "ns:noResponse");
	case SOAP_TYPE_PointerToSysInfo_t:
		return soap_out_PointerToSysInfo_t(soap, tag, id, (SysInfo_t *const*)ptr, "SysInfo-t");
	case SOAP_TYPE_PointerToSysBackupRet_t:
		return soap_out_PointerToSysBackupRet_t(soap, tag, id, (SysBackupRet_t *const*)ptr, "SysBackupRet-t");
	case SOAP_TYPE_PointerToNetInterface_t:
		return soap_out_PointerToNetInterface_t(soap, tag, id, (NetInterface_t *const*)ptr, "NetInterface-t");
	case SOAP_TYPE_PointerToRuntimeInfo_t:
		return soap_out_PointerToRuntimeInfo_t(soap, tag, id, (RuntimeInfo_t *const*)ptr, "RuntimeInfo-t");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerToarrayOfName:
		return soap_out_PointerToarrayOfName(soap, tag, id, (arrayOfName *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToarrayOfData:
		return soap_out_PointerToarrayOfData(soap, tag, id, (arrayOfData *const*)ptr, "ns:Data");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons__Data:
		return soap_out_PointerTons__Data(soap, tag, id, (ns__Data *const*)ptr, "ns:Data");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ConnTrack_t:
		((ConnTrack_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_StatusServices_t:
		((StatusServices_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_NetworkData_t:
		((NetworkData_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_NetTraffic_t:
		((NetTraffic_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SystemData_t:
		((SystemData_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_GraphData_t:
		((GraphData_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SysInfo_t:
		((SysInfo_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SysBackupRet_t:
		((SysBackupRet_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_NetInterface_t:
		((NetInterface_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_IfInfot_t:
		((IfInfot_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_RuntimeInfo_t:
		((RuntimeInfo_t *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_arrayOfName:
		((arrayOfName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_arrayOfData:
		((arrayOfData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__Data:
		((ns__Data *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__getStatusConnection:
		soap_serialize_ns__getStatusConnection(soap, (const struct ns__getStatusConnection *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusConnectionResponse:
		soap_serialize_ns__getStatusConnectionResponse(soap, (const struct ns__getStatusConnectionResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusServices:
		soap_serialize_ns__getStatusServices(soap, (const struct ns__getStatusServices *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusServicesResponse:
		soap_serialize_ns__getStatusServicesResponse(soap, (const struct ns__getStatusServicesResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkOther:
		soap_serialize_ns__getStatusNetworkOther(soap, (const struct ns__getStatusNetworkOther *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkOtherResponse:
		soap_serialize_ns__getStatusNetworkOtherResponse(soap, (const struct ns__getStatusNetworkOtherResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkInternal:
		soap_serialize_ns__getStatusNetworkInternal(soap, (const struct ns__getStatusNetworkInternal *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkInternalResponse:
		soap_serialize_ns__getStatusNetworkInternalResponse(soap, (const struct ns__getStatusNetworkInternalResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkExternal:
		soap_serialize_ns__getStatusNetworkExternal(soap, (const struct ns__getStatusNetworkExternal *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusNetworkExternalResponse:
		soap_serialize_ns__getStatusNetworkExternalResponse(soap, (const struct ns__getStatusNetworkExternalResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusSystemGraph:
		soap_serialize_ns__getStatusSystemGraph(soap, (const struct ns__getStatusSystemGraph *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusSystemGraphResponse:
		soap_serialize_ns__getStatusSystemGraphResponse(soap, (const struct ns__getStatusSystemGraphResponse *)ptr);
		break;
	case SOAP_TYPE_ns__SysShutdownHandle:
		soap_serialize_ns__SysShutdownHandle(soap, (const struct ns__SysShutdownHandle *)ptr);
		break;
	case SOAP_TYPE_ns__getSysSysInfo:
		soap_serialize_ns__getSysSysInfo(soap, (const struct ns__getSysSysInfo *)ptr);
		break;
	case SOAP_TYPE_ns__getSysSysInfoResponse:
		soap_serialize_ns__getSysSysInfoResponse(soap, (const struct ns__getSysSysInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns__SysBackupHandle:
		soap_serialize_ns__SysBackupHandle(soap, (const struct ns__SysBackupHandle *)ptr);
		break;
	case SOAP_TYPE_ns__SysBackupHandleResponse:
		soap_serialize_ns__SysBackupHandleResponse(soap, (const struct ns__SysBackupHandleResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getSysHomeInterface:
		soap_serialize_ns__getSysHomeInterface(soap, (const struct ns__getSysHomeInterface *)ptr);
		break;
	case SOAP_TYPE_ns__getSysHomeInterfaceResponse:
		soap_serialize_ns__getSysHomeInterfaceResponse(soap, (const struct ns__getSysHomeInterfaceResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getRuntimeInfo:
		soap_serialize_ns__getRuntimeInfo(soap, (const struct ns__getRuntimeInfo *)ptr);
		break;
	case SOAP_TYPE_ns__getRuntimeInfoResponse:
		soap_serialize_ns__getRuntimeInfoResponse(soap, (const struct ns__getRuntimeInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns__login:
		soap_serialize_ns__login(soap, (const struct ns__login *)ptr);
		break;
	case SOAP_TYPE_ns__loginResponse:
		soap_serialize_ns__loginResponse(soap, (const struct ns__loginResponse *)ptr);
		break;
	case SOAP_TYPE_ns__noResponse:
		soap_serialize_ns__noResponse(soap, (const struct ns__noResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getImage:
		soap_serialize_ns__getImage(soap, (const struct ns__getImage *)ptr);
		break;
	case SOAP_TYPE_ns__getImageResponse:
		soap_serialize_ns__getImageResponse(soap, (const struct ns__getImageResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getData:
		soap_serialize_ns__getData(soap, (const struct ns__getData *)ptr);
		break;
	case SOAP_TYPE_ns__getDataResponse:
		soap_serialize_ns__getDataResponse(soap, (const struct ns__getDataResponse *)ptr);
		break;
	case SOAP_TYPE_ns__putData:
		soap_serialize_ns__putData(soap, (const struct ns__putData *)ptr);
		break;
	case SOAP_TYPE_ns__putDataResponse:
		soap_serialize_ns__putDataResponse(soap, (const struct ns__putDataResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToNetworkData_t:
		soap_serialize_PointerToNetworkData_t(soap, (NetworkData_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSystemData_t:
		soap_serialize_PointerToSystemData_t(soap, (SystemData_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__noResponse:
		soap_serialize_PointerTons__noResponse(soap, (struct ns__noResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSysInfo_t:
		soap_serialize_PointerToSysInfo_t(soap, (SysInfo_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToSysBackupRet_t:
		soap_serialize_PointerToSysBackupRet_t(soap, (SysBackupRet_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToNetInterface_t:
		soap_serialize_PointerToNetInterface_t(soap, (NetInterface_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToRuntimeInfo_t:
		soap_serialize_PointerToRuntimeInfo_t(soap, (RuntimeInfo_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarrayOfName:
		soap_serialize_PointerToarrayOfName(soap, (arrayOfName *const*)ptr);
		break;
	case SOAP_TYPE_PointerToarrayOfData:
		soap_serialize_PointerToarrayOfData(soap, (arrayOfData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__Data:
		soap_serialize_PointerTons__Data(soap, (ns__Data *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns__Data:
		return (void*)soap_instantiate_ns__Data(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arrayOfData:
		return (void*)soap_instantiate_arrayOfData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_arrayOfName:
		return (void*)soap_instantiate_arrayOfName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__putDataResponse:
		return (void*)soap_instantiate_ns__putDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__putData:
		return (void*)soap_instantiate_ns__putData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getDataResponse:
		return (void*)soap_instantiate_ns__getDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getData:
		return (void*)soap_instantiate_ns__getData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getImageResponse:
		return (void*)soap_instantiate_ns__getImageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getImage:
		return (void*)soap_instantiate_ns__getImage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__noResponse:
		return (void*)soap_instantiate_ns__noResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__loginResponse:
		return (void*)soap_instantiate_ns__loginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__login:
		return (void*)soap_instantiate_ns__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_RuntimeInfo_t:
		return (void*)soap_instantiate_RuntimeInfo_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getRuntimeInfoResponse:
		return (void*)soap_instantiate_ns__getRuntimeInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getRuntimeInfo:
		return (void*)soap_instantiate_ns__getRuntimeInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IfInfot_t:
		return (void*)soap_instantiate_IfInfot_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NetInterface_t:
		return (void*)soap_instantiate_NetInterface_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSysHomeInterfaceResponse:
		return (void*)soap_instantiate_ns__getSysHomeInterfaceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSysHomeInterface:
		return (void*)soap_instantiate_ns__getSysHomeInterface(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SysBackupRet_t:
		return (void*)soap_instantiate_SysBackupRet_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SysBackupHandleResponse:
		return (void*)soap_instantiate_ns__SysBackupHandleResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SysBackupHandle:
		return (void*)soap_instantiate_ns__SysBackupHandle(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SysInfo_t:
		return (void*)soap_instantiate_SysInfo_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSysSysInfoResponse:
		return (void*)soap_instantiate_ns__getSysSysInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSysSysInfo:
		return (void*)soap_instantiate_ns__getSysSysInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__SysShutdownHandle:
		return (void*)soap_instantiate_ns__SysShutdownHandle(soap, -1, type, arrayType, n);
	case SOAP_TYPE_GraphData_t:
		return (void*)soap_instantiate_GraphData_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_SystemData_t:
		return (void*)soap_instantiate_SystemData_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusSystemGraphResponse:
		return (void*)soap_instantiate_ns__getStatusSystemGraphResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusSystemGraph:
		return (void*)soap_instantiate_ns__getStatusSystemGraph(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NetTraffic_t:
		return (void*)soap_instantiate_NetTraffic_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NetworkData_t:
		return (void*)soap_instantiate_NetworkData_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkExternalResponse:
		return (void*)soap_instantiate_ns__getStatusNetworkExternalResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkExternal:
		return (void*)soap_instantiate_ns__getStatusNetworkExternal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkInternalResponse:
		return (void*)soap_instantiate_ns__getStatusNetworkInternalResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkInternal:
		return (void*)soap_instantiate_ns__getStatusNetworkInternal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkOtherResponse:
		return (void*)soap_instantiate_ns__getStatusNetworkOtherResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusNetworkOther:
		return (void*)soap_instantiate_ns__getStatusNetworkOther(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StatusServices_t:
		return (void*)soap_instantiate_StatusServices_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusServicesResponse:
		return (void*)soap_instantiate_ns__getStatusServicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusServices:
		return (void*)soap_instantiate_ns__getStatusServices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ConnTrack_t:
		return (void*)soap_instantiate_ConnTrack_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusConnectionResponse:
		return (void*)soap_instantiate_ns__getStatusConnectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusConnection:
		return (void*)soap_instantiate_ns__getStatusConnection(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_StatusConnList_t:
		return (void*)soap_instantiate_StatusConnList_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfConnTrack_t:
		return (void*)soap_instantiate_std__vectorTemplateOfConnTrack_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StatusServicesList_t:
		return (void*)soap_instantiate_StatusServicesList_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfStatusServices_t:
		return (void*)soap_instantiate_std__vectorTemplateOfStatusServices_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfNetTraffic_t:
		return (void*)soap_instantiate_std__vectorTemplateOfNetTraffic_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfGraphData_t:
		return (void*)soap_instantiate_std__vectorTemplateOfGraphData_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfIfInfot_t:
		return (void*)soap_instantiate_std__vectorTemplateOfIfInfot_t(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__Data:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns__Data*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns__Data*>(p->ptr));
		break;
	case SOAP_TYPE_arrayOfData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arrayOfData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arrayOfData*>(p->ptr));
		break;
	case SOAP_TYPE_arrayOfName:
		if (p->size < 0)
			SOAP_DELETE(static_cast<arrayOfName*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<arrayOfName*>(p->ptr));
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::string*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::string*>(p->ptr));
		break;
	case SOAP_TYPE_ns__putDataResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__putDataResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__putDataResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__putData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__putData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__putData*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getDataResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getDataResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getDataResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getData:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getData*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getData*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getImageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getImageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getImageResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getImage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getImage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getImage*>(p->ptr));
		break;
	case SOAP_TYPE_ns__noResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__noResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__noResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__loginResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__loginResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__loginResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__login:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__login*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__login*>(p->ptr));
		break;
	case SOAP_TYPE_RuntimeInfo_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<RuntimeInfo_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<RuntimeInfo_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getRuntimeInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getRuntimeInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getRuntimeInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getRuntimeInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getRuntimeInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getRuntimeInfo*>(p->ptr));
		break;
	case SOAP_TYPE_IfInfot_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<IfInfot_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<IfInfot_t*>(p->ptr));
		break;
	case SOAP_TYPE_NetInterface_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<NetInterface_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<NetInterface_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getSysHomeInterfaceResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getSysHomeInterfaceResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getSysHomeInterfaceResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getSysHomeInterface:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getSysHomeInterface*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getSysHomeInterface*>(p->ptr));
		break;
	case SOAP_TYPE_SysBackupRet_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<SysBackupRet_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<SysBackupRet_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__SysBackupHandleResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__SysBackupHandleResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__SysBackupHandleResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__SysBackupHandle:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__SysBackupHandle*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__SysBackupHandle*>(p->ptr));
		break;
	case SOAP_TYPE_SysInfo_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<SysInfo_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<SysInfo_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getSysSysInfoResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getSysSysInfoResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getSysSysInfoResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getSysSysInfo:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getSysSysInfo*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getSysSysInfo*>(p->ptr));
		break;
	case SOAP_TYPE_ns__SysShutdownHandle:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__SysShutdownHandle*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__SysShutdownHandle*>(p->ptr));
		break;
	case SOAP_TYPE_GraphData_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<GraphData_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<GraphData_t*>(p->ptr));
		break;
	case SOAP_TYPE_SystemData_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<SystemData_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<SystemData_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusSystemGraphResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusSystemGraphResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusSystemGraphResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusSystemGraph:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusSystemGraph*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusSystemGraph*>(p->ptr));
		break;
	case SOAP_TYPE_NetTraffic_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<NetTraffic_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<NetTraffic_t*>(p->ptr));
		break;
	case SOAP_TYPE_NetworkData_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<NetworkData_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<NetworkData_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkExternalResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkExternalResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkExternalResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkExternal:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkExternal*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkExternal*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkInternalResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkInternalResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkInternalResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkInternal:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkInternal*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkInternal*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkOtherResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkOtherResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkOtherResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusNetworkOther:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusNetworkOther*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusNetworkOther*>(p->ptr));
		break;
	case SOAP_TYPE_StatusServices_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<StatusServices_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<StatusServices_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusServicesResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusServicesResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusServicesResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusServices:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusServices*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusServices*>(p->ptr));
		break;
	case SOAP_TYPE_ConnTrack_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ConnTrack_t*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ConnTrack_t*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusConnectionResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusConnectionResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusConnectionResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns__getStatusConnection:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct ns__getStatusConnection*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct ns__getStatusConnection*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	case SOAP_TYPE_StatusConnList_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ConnTrack_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ConnTrack_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfConnTrack_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<ConnTrack_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<ConnTrack_t >*>(p->ptr));
		break;
	case SOAP_TYPE_StatusServicesList_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<StatusServices_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<StatusServices_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfStatusServices_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<StatusServices_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<StatusServices_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfNetTraffic_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<NetTraffic_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<NetTraffic_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfGraphData_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<GraphData_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<GraphData_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<int >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<int >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfIfInfot_t:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<IfInfot_t >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<IfInfot_t >*>(p->ptr));
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::vector<std::string >*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::vector<std::string >*>(p->ptr));
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_StatusConnList_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ConnTrack_t >*)p)[len] = *(ConnTrack_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfConnTrack_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ConnTrack_t >*)p)[len] = *(ConnTrack_t *)q;
		break;
	case SOAP_TYPE_StatusServicesList_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<StatusServices_t >*)p)[len] = *(StatusServices_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfStatusServices_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<StatusServices_t >*)p)[len] = *(StatusServices_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfNetTraffic_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<NetTraffic_t >*)p)[len] = *(NetTraffic_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfGraphData_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<GraphData_t >*)p)[len] = *(GraphData_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<int >*)p)[len] = *(int *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfIfInfot_t:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<IfInfot_t >*)p)[len] = *(IfInfot_t *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_legend_t(struct soap *soap, enum legend_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_legend_t
	*a = SOAP_DEFAULT_legend_t;
#else
	*a = (enum legend_t)0;
#endif
}

static const struct soap_code_map soap_codes_legend_t[] =
{	{ (long)LEGEND_LAN, "LEGEND-LAN" },
	{ (long)LEGEND_INTERNET, "LEGEND-INTERNET" },
	{ (long)LEGEND_DMZ, "LEGEND-DMZ" },
	{ (long)LEGEND_FIREWALL, "LEGEND-FIREWALL" },
	{ (long)LEGEND_IPSEC, "LEGEND-IPSEC" },
	{ (long)LEGEND_SSLVPN, "LEGEND-SSLVPN" },
	{ (long)LEGEND_MULTICAST, "LEGEND-MULTICAST" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_legend_t2s(struct soap *soap, enum legend_t n)
{	const char *s = soap_code_str(soap_codes_legend_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_legend_t(struct soap *soap, const char *tag, int id, const enum legend_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_legend_t), type) || soap_send(soap, soap_legend_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2legend_t(struct soap *soap, const char *s, enum legend_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_legend_t, s);
	if (map)
		*a = (enum legend_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 6)))
			return soap->error = SOAP_TYPE;
		*a = (enum legend_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum legend_t * SOAP_FMAC4 soap_in_legend_t(struct soap *soap, const char *tag, enum legend_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum legend_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_legend_t, sizeof(enum legend_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2legend_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum legend_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_legend_t, 0, sizeof(enum legend_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_legend_t(struct soap *soap, const enum legend_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_legend_t);
	if (soap_out_legend_t(soap, tag?tag:"legend-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum legend_t * SOAP_FMAC4 soap_get_legend_t(struct soap *soap, enum legend_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_legend_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SysGraphNumPoint_t(struct soap *soap, enum SysGraphNumPoint_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_SysGraphNumPoint_t
	*a = SOAP_DEFAULT_SysGraphNumPoint_t;
#else
	*a = (enum SysGraphNumPoint_t)0;
#endif
}

static const struct soap_code_map soap_codes_SysGraphNumPoint_t[] =
{	{ (long)NUMS_POINT_HOUR, "NUMS-POINT-HOUR" },
	{ (long)NUMS_POINT_DAY, "NUMS-POINT-DAY" },
	{ (long)NUMS_POINT_WEEK, "NUMS-POINT-WEEK" },
	{ (long)NUMS_POINT_MONTH, "NUMS-POINT-MONTH" },
	{ (long)NUMS_POINT_YEAR, "NUMS-POINT-YEAR" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SysGraphNumPoint_t2s(struct soap *soap, enum SysGraphNumPoint_t n)
{	const char *s = soap_code_str(soap_codes_SysGraphNumPoint_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysGraphNumPoint_t(struct soap *soap, const char *tag, int id, const enum SysGraphNumPoint_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SysGraphNumPoint_t), type) || soap_send(soap, soap_SysGraphNumPoint_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SysGraphNumPoint_t(struct soap *soap, const char *s, enum SysGraphNumPoint_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_SysGraphNumPoint_t, s);
	if (map)
		*a = (enum SysGraphNumPoint_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 13)))
			return soap->error = SOAP_TYPE;
		*a = (enum SysGraphNumPoint_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum SysGraphNumPoint_t * SOAP_FMAC4 soap_in_SysGraphNumPoint_t(struct soap *soap, const char *tag, enum SysGraphNumPoint_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum SysGraphNumPoint_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SysGraphNumPoint_t, sizeof(enum SysGraphNumPoint_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2SysGraphNumPoint_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum SysGraphNumPoint_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SysGraphNumPoint_t, 0, sizeof(enum SysGraphNumPoint_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SysGraphNumPoint_t(struct soap *soap, const enum SysGraphNumPoint_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SysGraphNumPoint_t);
	if (soap_out_SysGraphNumPoint_t(soap, tag?tag:"SysGraphNumPoint-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum SysGraphNumPoint_t * SOAP_FMAC4 soap_get_SysGraphNumPoint_t(struct soap *soap, enum SysGraphNumPoint_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_SysGraphNumPoint_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SysGraphMode_t(struct soap *soap, enum SysGraphMode_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_SysGraphMode_t
	*a = SOAP_DEFAULT_SysGraphMode_t;
#else
	*a = (enum SysGraphMode_t)0;
#endif
}

static const struct soap_code_map soap_codes_SysGraphMode_t[] =
{	{ (long)GRAPH_MODE_HOUR, "GRAPH-MODE-HOUR" },
	{ (long)GRAPH_MODE_DAY, "GRAPH-MODE-DAY" },
	{ (long)GRAPH_MODE_WEEK, "GRAPH-MODE-WEEK" },
	{ (long)GRAPH_MODE_MONTH, "GRAPH-MODE-MONTH" },
	{ (long)GRAPH_MODE_YEAR, "GRAPH-MODE-YEAR" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_SysGraphMode_t2s(struct soap *soap, enum SysGraphMode_t n)
{	const char *s = soap_code_str(soap_codes_SysGraphMode_t, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysGraphMode_t(struct soap *soap, const char *tag, int id, const enum SysGraphMode_t *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SysGraphMode_t), type) || soap_send(soap, soap_SysGraphMode_t2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2SysGraphMode_t(struct soap *soap, const char *s, enum SysGraphMode_t *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_SysGraphMode_t, s);
	if (map)
		*a = (enum SysGraphMode_t)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 4)))
			return soap->error = SOAP_TYPE;
		*a = (enum SysGraphMode_t)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum SysGraphMode_t * SOAP_FMAC4 soap_in_SysGraphMode_t(struct soap *soap, const char *tag, enum SysGraphMode_t *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum SysGraphMode_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SysGraphMode_t, sizeof(enum SysGraphMode_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2SysGraphMode_t(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum SysGraphMode_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SysGraphMode_t, 0, sizeof(enum SysGraphMode_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SysGraphMode_t(struct soap *soap, const enum SysGraphMode_t *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SysGraphMode_t);
	if (soap_out_SysGraphMode_t(soap, tag?tag:"SysGraphMode-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum SysGraphMode_t * SOAP_FMAC4 soap_get_SysGraphMode_t(struct soap *soap, enum SysGraphMode_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_SysGraphMode_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysShutdownEvent(struct soap *soap, enum ns__SysShutdownEvent *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SysShutdownEvent
	*a = SOAP_DEFAULT_ns__SysShutdownEvent;
#else
	*a = (enum ns__SysShutdownEvent)0;
#endif
}

static const struct soap_code_map soap_codes_ns__SysShutdownEvent[] =
{	{ (long)EVENT_SHUTDOWN, "EVENT-SHUTDOWN" },
	{ (long)EVENT_REBOOT, "EVENT-REBOOT" },
	{ (long)EVENT_LOGOUT, "EVENT-LOGOUT" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SysShutdownEvent2s(struct soap *soap, enum ns__SysShutdownEvent n)
{	const char *s = soap_code_str(soap_codes_ns__SysShutdownEvent, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysShutdownEvent(struct soap *soap, const char *tag, int id, const enum ns__SysShutdownEvent *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SysShutdownEvent), type) || soap_send(soap, soap_ns__SysShutdownEvent2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SysShutdownEvent(struct soap *soap, const char *s, enum ns__SysShutdownEvent *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__SysShutdownEvent, s);
	if (map)
		*a = (enum ns__SysShutdownEvent)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__SysShutdownEvent)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__SysShutdownEvent * SOAP_FMAC4 soap_in_ns__SysShutdownEvent(struct soap *soap, const char *tag, enum ns__SysShutdownEvent *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__SysShutdownEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SysShutdownEvent, sizeof(enum ns__SysShutdownEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2ns__SysShutdownEvent(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__SysShutdownEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SysShutdownEvent, 0, sizeof(enum ns__SysShutdownEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysShutdownEvent(struct soap *soap, const enum ns__SysShutdownEvent *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__SysShutdownEvent);
	if (soap_out_ns__SysShutdownEvent(soap, tag?tag:"ns:SysShutdownEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__SysShutdownEvent * SOAP_FMAC4 soap_get_ns__SysShutdownEvent(struct soap *soap, enum ns__SysShutdownEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SysShutdownEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupEvent(struct soap *soap, enum ns__SysBackupEvent *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__SysBackupEvent
	*a = SOAP_DEFAULT_ns__SysBackupEvent;
#else
	*a = (enum ns__SysBackupEvent)0;
#endif
}

static const struct soap_code_map soap_codes_ns__SysBackupEvent[] =
{	{ (long)EVENT_NONE, "EVENT-NONE" },
	{ (long)EVENT_GET_FILENAME_CONFIG, "EVENT-GET-FILENAME-CONFIG" },
	{ (long)EVENT_GET_FILENAME_FIRMWARE, "EVENT-GET-FILENAME-FIRMWARE" },
	{ (long)EVENT_SET_FILENAME_CONFIG, "EVENT-SET-FILENAME-CONFIG" },
	{ (long)EVENT_SET_FILENAME_FIRMWARE, "EVENT-SET-FILENAME-FIRMWARE" },
	{ (long)EVENT_BACKUP_CONFIGURATION, "EVENT-BACKUP-CONFIGURATION" },
	{ (long)EVENT_UPDATE_CONFIGURATION, "EVENT-UPDATE-CONFIGURATION" },
	{ (long)EVENT_BACKUP_FIRMWARE, "EVENT-BACKUP-FIRMWARE" },
	{ (long)EVENT_UPDATE_FIRMWARE, "EVENT-UPDATE-FIRMWARE" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__SysBackupEvent2s(struct soap *soap, enum ns__SysBackupEvent n)
{	const char *s = soap_code_str(soap_codes_ns__SysBackupEvent, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupEvent(struct soap *soap, const char *tag, int id, const enum ns__SysBackupEvent *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SysBackupEvent), type) || soap_send(soap, soap_ns__SysBackupEvent2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__SysBackupEvent(struct soap *soap, const char *s, enum ns__SysBackupEvent *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns__SysBackupEvent, s);
	if (map)
		*a = (enum ns__SysBackupEvent)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < -5 || n > 3)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns__SysBackupEvent)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns__SysBackupEvent * SOAP_FMAC4 soap_in_ns__SysBackupEvent(struct soap *soap, const char *tag, enum ns__SysBackupEvent *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns__SysBackupEvent *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SysBackupEvent, sizeof(enum ns__SysBackupEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2ns__SysBackupEvent(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns__SysBackupEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SysBackupEvent, 0, sizeof(enum ns__SysBackupEvent), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupEvent(struct soap *soap, const enum ns__SysBackupEvent *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__SysBackupEvent);
	if (soap_out_ns__SysBackupEvent(soap, tag?tag:"ns:SysBackupEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns__SysBackupEvent * SOAP_FMAC4 soap_get_ns__SysBackupEvent(struct soap *soap, enum ns__SysBackupEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SysBackupEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ConnTrack_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ConnTrack_t::protocol);
	soap_default_std__string(soap, &this->ConnTrack_t::sip);
	soap_default_std__string(soap, &this->ConnTrack_t::dip);
	soap_default_int(soap, &this->ConnTrack_t::sport);
	soap_default_int(soap, &this->ConnTrack_t::dport);
	soap_default_float(soap, &this->ConnTrack_t::downSpeed);
	soap_default_float(soap, &this->ConnTrack_t::upSpeed);
	soap_default_int(soap, &this->ConnTrack_t::connStatus);
	soap_default_float(soap, &this->ConnTrack_t::expires);
	soap_default_int(soap, &this->ConnTrack_t::slegend);
	soap_default_int(soap, &this->ConnTrack_t::dlegend);
}

void ConnTrack_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ConnTrack_t::sip);
	soap_serialize_std__string(soap, &this->ConnTrack_t::dip);
#endif
}

int ConnTrack_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ConnTrack_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ConnTrack_t(struct soap *soap, const char *tag, int id, const ConnTrack_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ConnTrack_t), type))
		return soap->error;
	if (soap_out_int(soap, "protocol", -1, &(a->ConnTrack_t::protocol), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sip", -1, &(a->ConnTrack_t::sip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "dip", -1, &(a->ConnTrack_t::dip), ""))
		return soap->error;
	if (soap_out_int(soap, "sport", -1, &(a->ConnTrack_t::sport), ""))
		return soap->error;
	if (soap_out_int(soap, "dport", -1, &(a->ConnTrack_t::dport), ""))
		return soap->error;
	if (soap_out_float(soap, "downSpeed", -1, &(a->ConnTrack_t::downSpeed), ""))
		return soap->error;
	if (soap_out_float(soap, "upSpeed", -1, &(a->ConnTrack_t::upSpeed), ""))
		return soap->error;
	if (soap_out_int(soap, "connStatus", -1, &(a->ConnTrack_t::connStatus), ""))
		return soap->error;
	if (soap_out_float(soap, "expires", -1, &(a->ConnTrack_t::expires), ""))
		return soap->error;
	if (soap_out_int(soap, "slegend", -1, &(a->ConnTrack_t::slegend), ""))
		return soap->error;
	if (soap_out_int(soap, "dlegend", -1, &(a->ConnTrack_t::dlegend), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ConnTrack_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ConnTrack_t(soap, tag, this, type);
}

SOAP_FMAC3 ConnTrack_t * SOAP_FMAC4 soap_in_ConnTrack_t(struct soap *soap, const char *tag, ConnTrack_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ConnTrack_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ConnTrack_t, sizeof(ConnTrack_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ConnTrack_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ConnTrack_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_protocol1 = 1;
	size_t soap_flag_sip1 = 1;
	size_t soap_flag_dip1 = 1;
	size_t soap_flag_sport1 = 1;
	size_t soap_flag_dport1 = 1;
	size_t soap_flag_downSpeed1 = 1;
	size_t soap_flag_upSpeed1 = 1;
	size_t soap_flag_connStatus1 = 1;
	size_t soap_flag_expires1 = 1;
	size_t soap_flag_slegend1 = 1;
	size_t soap_flag_dlegend1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_protocol1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "protocol", &(a->ConnTrack_t::protocol), "xsd:int"))
				{	soap_flag_protocol1--;
					continue;
				}
			if (soap_flag_sip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sip", &(a->ConnTrack_t::sip), "xsd:string"))
				{	soap_flag_sip1--;
					continue;
				}
			if (soap_flag_dip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dip", &(a->ConnTrack_t::dip), "xsd:string"))
				{	soap_flag_dip1--;
					continue;
				}
			if (soap_flag_sport1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sport", &(a->ConnTrack_t::sport), "xsd:int"))
				{	soap_flag_sport1--;
					continue;
				}
			if (soap_flag_dport1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dport", &(a->ConnTrack_t::dport), "xsd:int"))
				{	soap_flag_dport1--;
					continue;
				}
			if (soap_flag_downSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "downSpeed", &(a->ConnTrack_t::downSpeed), "xsd:float"))
				{	soap_flag_downSpeed1--;
					continue;
				}
			if (soap_flag_upSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "upSpeed", &(a->ConnTrack_t::upSpeed), "xsd:float"))
				{	soap_flag_upSpeed1--;
					continue;
				}
			if (soap_flag_connStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "connStatus", &(a->ConnTrack_t::connStatus), "xsd:int"))
				{	soap_flag_connStatus1--;
					continue;
				}
			if (soap_flag_expires1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "expires", &(a->ConnTrack_t::expires), "xsd:float"))
				{	soap_flag_expires1--;
					continue;
				}
			if (soap_flag_slegend1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "slegend", &(a->ConnTrack_t::slegend), "xsd:int"))
				{	soap_flag_slegend1--;
					continue;
				}
			if (soap_flag_dlegend1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "dlegend", &(a->ConnTrack_t::dlegend), "xsd:int"))
				{	soap_flag_dlegend1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ConnTrack_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ConnTrack_t, 0, sizeof(ConnTrack_t), 0, soap_copy_ConnTrack_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_protocol1 > 0 || soap_flag_sip1 > 0 || soap_flag_dip1 > 0 || soap_flag_sport1 > 0 || soap_flag_dport1 > 0 || soap_flag_downSpeed1 > 0 || soap_flag_upSpeed1 > 0 || soap_flag_connStatus1 > 0 || soap_flag_expires1 > 0 || soap_flag_slegend1 > 0 || soap_flag_dlegend1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ConnTrack_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ConnTrack_t);
	if (this->soap_out(soap, tag?tag:"ConnTrack-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ConnTrack_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ConnTrack_t(soap, this, tag, type);
}

SOAP_FMAC3 ConnTrack_t * SOAP_FMAC4 soap_get_ConnTrack_t(struct soap *soap, ConnTrack_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_ConnTrack_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ConnTrack_t * SOAP_FMAC2 soap_instantiate_ConnTrack_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ConnTrack_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ConnTrack_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ConnTrack_t);
		if (size)
			*size = sizeof(ConnTrack_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ConnTrack_t, n);
		if (size)
			*size = n * sizeof(ConnTrack_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ConnTrack_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ConnTrack_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ConnTrack_t %p -> %p\n", q, p));
	*(ConnTrack_t*)p = *(ConnTrack_t*)q;
}

void StatusServices_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->StatusServices_t::name);
	soap_default_bool(soap, &this->StatusServices_t::isRunning);
	soap_default_int(soap, &this->StatusServices_t::pid);
	soap_default_float(soap, &this->StatusServices_t::memory);
}

void StatusServices_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->StatusServices_t::name);
	soap_embedded(soap, &this->StatusServices_t::isRunning, SOAP_TYPE_bool);
#endif
}

int StatusServices_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_StatusServices_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StatusServices_t(struct soap *soap, const char *tag, int id, const StatusServices_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_StatusServices_t), type))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &(a->StatusServices_t::name), ""))
		return soap->error;
	if (soap_out_bool(soap, "isRunning", -1, &(a->StatusServices_t::isRunning), ""))
		return soap->error;
	if (soap_out_int(soap, "pid", -1, &(a->StatusServices_t::pid), ""))
		return soap->error;
	if (soap_out_float(soap, "memory", -1, &(a->StatusServices_t::memory), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *StatusServices_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_StatusServices_t(soap, tag, this, type);
}

SOAP_FMAC3 StatusServices_t * SOAP_FMAC4 soap_in_StatusServices_t(struct soap *soap, const char *tag, StatusServices_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (StatusServices_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_StatusServices_t, sizeof(StatusServices_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_StatusServices_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (StatusServices_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_isRunning1 = 1;
	size_t soap_flag_pid1 = 1;
	size_t soap_flag_memory1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &(a->StatusServices_t::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_isRunning1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isRunning", &(a->StatusServices_t::isRunning), "xsd:boolean"))
				{	soap_flag_isRunning1--;
					continue;
				}
			if (soap_flag_pid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "pid", &(a->StatusServices_t::pid), "xsd:int"))
				{	soap_flag_pid1--;
					continue;
				}
			if (soap_flag_memory1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "memory", &(a->StatusServices_t::memory), "xsd:float"))
				{	soap_flag_memory1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (StatusServices_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_StatusServices_t, 0, sizeof(StatusServices_t), 0, soap_copy_StatusServices_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name1 > 0 || soap_flag_isRunning1 > 0 || soap_flag_pid1 > 0 || soap_flag_memory1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int StatusServices_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_StatusServices_t);
	if (this->soap_out(soap, tag?tag:"StatusServices-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *StatusServices_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_StatusServices_t(soap, this, tag, type);
}

SOAP_FMAC3 StatusServices_t * SOAP_FMAC4 soap_get_StatusServices_t(struct soap *soap, StatusServices_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_StatusServices_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 StatusServices_t * SOAP_FMAC2 soap_instantiate_StatusServices_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_StatusServices_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_StatusServices_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(StatusServices_t);
		if (size)
			*size = sizeof(StatusServices_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(StatusServices_t, n);
		if (size)
			*size = n * sizeof(StatusServices_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (StatusServices_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StatusServices_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying StatusServices_t %p -> %p\n", q, p));
	*(StatusServices_t*)p = *(StatusServices_t*)q;
}

void NetworkData_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfGraphData_t(soap, &this->NetworkData_t::graphListData);
	soap_default_std__vectorTemplateOfNetTraffic_t(soap, &this->NetworkData_t::netListTraffic);
}

void NetworkData_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfGraphData_t(soap, &this->NetworkData_t::graphListData);
	soap_serialize_std__vectorTemplateOfNetTraffic_t(soap, &this->NetworkData_t::netListTraffic);
#endif
}

int NetworkData_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_NetworkData_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetworkData_t(struct soap *soap, const char *tag, int id, const NetworkData_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NetworkData_t), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfGraphData_t(soap, "graphListData", -1, &(a->NetworkData_t::graphListData), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfNetTraffic_t(soap, "netListTraffic", -1, &(a->NetworkData_t::netListTraffic), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *NetworkData_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_NetworkData_t(soap, tag, this, type);
}

SOAP_FMAC3 NetworkData_t * SOAP_FMAC4 soap_in_NetworkData_t(struct soap *soap, const char *tag, NetworkData_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (NetworkData_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_NetworkData_t, sizeof(NetworkData_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_NetworkData_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (NetworkData_t *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfGraphData_t(soap, "graphListData", &(a->NetworkData_t::graphListData), "GraphData-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfNetTraffic_t(soap, "netListTraffic", &(a->NetworkData_t::netListTraffic), "NetTraffic-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (NetworkData_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NetworkData_t, 0, sizeof(NetworkData_t), 0, soap_copy_NetworkData_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int NetworkData_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_NetworkData_t);
	if (this->soap_out(soap, tag?tag:"NetworkData-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *NetworkData_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_NetworkData_t(soap, this, tag, type);
}

SOAP_FMAC3 NetworkData_t * SOAP_FMAC4 soap_get_NetworkData_t(struct soap *soap, NetworkData_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_NetworkData_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 NetworkData_t * SOAP_FMAC2 soap_instantiate_NetworkData_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NetworkData_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NetworkData_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(NetworkData_t);
		if (size)
			*size = sizeof(NetworkData_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(NetworkData_t, n);
		if (size)
			*size = n * sizeof(NetworkData_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (NetworkData_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetworkData_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying NetworkData_t %p -> %p\n", q, p));
	*(NetworkData_t*)p = *(NetworkData_t*)q;
}

void NetTraffic_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_float(soap, &this->NetTraffic_t::max);
	soap_default_float(soap, &this->NetTraffic_t::avg);
	soap_default_float(soap, &this->NetTraffic_t::min);
	soap_default_float(soap, &this->NetTraffic_t::current);
}

void NetTraffic_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int NetTraffic_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_NetTraffic_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetTraffic_t(struct soap *soap, const char *tag, int id, const NetTraffic_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NetTraffic_t), type))
		return soap->error;
	if (soap_out_float(soap, "max", -1, &(a->NetTraffic_t::max), ""))
		return soap->error;
	if (soap_out_float(soap, "avg", -1, &(a->NetTraffic_t::avg), ""))
		return soap->error;
	if (soap_out_float(soap, "min", -1, &(a->NetTraffic_t::min), ""))
		return soap->error;
	if (soap_out_float(soap, "current", -1, &(a->NetTraffic_t::current), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *NetTraffic_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_NetTraffic_t(soap, tag, this, type);
}

SOAP_FMAC3 NetTraffic_t * SOAP_FMAC4 soap_in_NetTraffic_t(struct soap *soap, const char *tag, NetTraffic_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (NetTraffic_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_NetTraffic_t, sizeof(NetTraffic_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_NetTraffic_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (NetTraffic_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_max1 = 1;
	size_t soap_flag_avg1 = 1;
	size_t soap_flag_min1 = 1;
	size_t soap_flag_current1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_max1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "max", &(a->NetTraffic_t::max), "xsd:float"))
				{	soap_flag_max1--;
					continue;
				}
			if (soap_flag_avg1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "avg", &(a->NetTraffic_t::avg), "xsd:float"))
				{	soap_flag_avg1--;
					continue;
				}
			if (soap_flag_min1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "min", &(a->NetTraffic_t::min), "xsd:float"))
				{	soap_flag_min1--;
					continue;
				}
			if (soap_flag_current1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "current", &(a->NetTraffic_t::current), "xsd:float"))
				{	soap_flag_current1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (NetTraffic_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NetTraffic_t, 0, sizeof(NetTraffic_t), 0, soap_copy_NetTraffic_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_max1 > 0 || soap_flag_avg1 > 0 || soap_flag_min1 > 0 || soap_flag_current1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int NetTraffic_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_NetTraffic_t);
	if (this->soap_out(soap, tag?tag:"NetTraffic-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *NetTraffic_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_NetTraffic_t(soap, this, tag, type);
}

SOAP_FMAC3 NetTraffic_t * SOAP_FMAC4 soap_get_NetTraffic_t(struct soap *soap, NetTraffic_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_NetTraffic_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 NetTraffic_t * SOAP_FMAC2 soap_instantiate_NetTraffic_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NetTraffic_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NetTraffic_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(NetTraffic_t);
		if (size)
			*size = sizeof(NetTraffic_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(NetTraffic_t, n);
		if (size)
			*size = n * sizeof(NetTraffic_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (NetTraffic_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetTraffic_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying NetTraffic_t %p -> %p\n", q, p));
	*(NetTraffic_t*)p = *(NetTraffic_t*)q;
}

void SystemData_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfGraphData_t(soap, &this->SystemData_t::cpuData);
	soap_default_std__vectorTemplateOfGraphData_t(soap, &this->SystemData_t::memoryData);
}

void SystemData_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfGraphData_t(soap, &this->SystemData_t::cpuData);
	soap_serialize_std__vectorTemplateOfGraphData_t(soap, &this->SystemData_t::memoryData);
#endif
}

int SystemData_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SystemData_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SystemData_t(struct soap *soap, const char *tag, int id, const SystemData_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SystemData_t), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfGraphData_t(soap, "cpuData", -1, &(a->SystemData_t::cpuData), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfGraphData_t(soap, "memoryData", -1, &(a->SystemData_t::memoryData), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *SystemData_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SystemData_t(soap, tag, this, type);
}

SOAP_FMAC3 SystemData_t * SOAP_FMAC4 soap_in_SystemData_t(struct soap *soap, const char *tag, SystemData_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SystemData_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SystemData_t, sizeof(SystemData_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SystemData_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SystemData_t *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfGraphData_t(soap, "cpuData", &(a->SystemData_t::cpuData), "GraphData-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfGraphData_t(soap, "memoryData", &(a->SystemData_t::memoryData), "GraphData-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SystemData_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SystemData_t, 0, sizeof(SystemData_t), 0, soap_copy_SystemData_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int SystemData_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_SystemData_t);
	if (this->soap_out(soap, tag?tag:"SystemData-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SystemData_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SystemData_t(soap, this, tag, type);
}

SOAP_FMAC3 SystemData_t * SOAP_FMAC4 soap_get_SystemData_t(struct soap *soap, SystemData_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_SystemData_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 SystemData_t * SOAP_FMAC2 soap_instantiate_SystemData_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SystemData_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SystemData_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(SystemData_t);
		if (size)
			*size = sizeof(SystemData_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(SystemData_t, n);
		if (size)
			*size = n * sizeof(SystemData_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (SystemData_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SystemData_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SystemData_t %p -> %p\n", q, p));
	*(SystemData_t*)p = *(SystemData_t*)q;
}

void GraphData_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfint(soap, &this->GraphData_t::grapData);
}

void GraphData_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfint(soap, &this->GraphData_t::grapData);
#endif
}

int GraphData_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_GraphData_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_GraphData_t(struct soap *soap, const char *tag, int id, const GraphData_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_GraphData_t), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "grapData", -1, &(a->GraphData_t::grapData), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *GraphData_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_GraphData_t(soap, tag, this, type);
}

SOAP_FMAC3 GraphData_t * SOAP_FMAC4 soap_in_GraphData_t(struct soap *soap, const char *tag, GraphData_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (GraphData_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_GraphData_t, sizeof(GraphData_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_GraphData_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (GraphData_t *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfint(soap, "grapData", &(a->GraphData_t::grapData), "xsd:int"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (GraphData_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_GraphData_t, 0, sizeof(GraphData_t), 0, soap_copy_GraphData_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int GraphData_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_GraphData_t);
	if (this->soap_out(soap, tag?tag:"GraphData-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *GraphData_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_GraphData_t(soap, this, tag, type);
}

SOAP_FMAC3 GraphData_t * SOAP_FMAC4 soap_get_GraphData_t(struct soap *soap, GraphData_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_GraphData_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 GraphData_t * SOAP_FMAC2 soap_instantiate_GraphData_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_GraphData_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_GraphData_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(GraphData_t);
		if (size)
			*size = sizeof(GraphData_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(GraphData_t, n);
		if (size)
			*size = n * sizeof(GraphData_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (GraphData_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_GraphData_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying GraphData_t %p -> %p\n", q, p));
	*(GraphData_t*)p = *(GraphData_t*)q;
}

void SysInfo_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->SysInfo_t::ctfw_version);
	soap_default_std__string(soap, &this->SysInfo_t::cpu);
	soap_default_std__string(soap, &this->SysInfo_t::memory);
}

void SysInfo_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->SysInfo_t::ctfw_version);
	soap_serialize_std__string(soap, &this->SysInfo_t::cpu);
	soap_serialize_std__string(soap, &this->SysInfo_t::memory);
#endif
}

int SysInfo_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SysInfo_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysInfo_t(struct soap *soap, const char *tag, int id, const SysInfo_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SysInfo_t), type))
		return soap->error;
	if (soap_out_std__string(soap, "ctfw-version", -1, &(a->SysInfo_t::ctfw_version), ""))
		return soap->error;
	if (soap_out_std__string(soap, "cpu", -1, &(a->SysInfo_t::cpu), ""))
		return soap->error;
	if (soap_out_std__string(soap, "memory", -1, &(a->SysInfo_t::memory), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *SysInfo_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SysInfo_t(soap, tag, this, type);
}

SOAP_FMAC3 SysInfo_t * SOAP_FMAC4 soap_in_SysInfo_t(struct soap *soap, const char *tag, SysInfo_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SysInfo_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SysInfo_t, sizeof(SysInfo_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SysInfo_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SysInfo_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ctfw_version1 = 1;
	size_t soap_flag_cpu1 = 1;
	size_t soap_flag_memory1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ctfw_version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ctfw-version", &(a->SysInfo_t::ctfw_version), "xsd:string"))
				{	soap_flag_ctfw_version1--;
					continue;
				}
			if (soap_flag_cpu1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "cpu", &(a->SysInfo_t::cpu), "xsd:string"))
				{	soap_flag_cpu1--;
					continue;
				}
			if (soap_flag_memory1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "memory", &(a->SysInfo_t::memory), "xsd:string"))
				{	soap_flag_memory1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SysInfo_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SysInfo_t, 0, sizeof(SysInfo_t), 0, soap_copy_SysInfo_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ctfw_version1 > 0 || soap_flag_cpu1 > 0 || soap_flag_memory1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int SysInfo_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_SysInfo_t);
	if (this->soap_out(soap, tag?tag:"SysInfo-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SysInfo_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SysInfo_t(soap, this, tag, type);
}

SOAP_FMAC3 SysInfo_t * SOAP_FMAC4 soap_get_SysInfo_t(struct soap *soap, SysInfo_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_SysInfo_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 SysInfo_t * SOAP_FMAC2 soap_instantiate_SysInfo_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SysInfo_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SysInfo_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(SysInfo_t);
		if (size)
			*size = sizeof(SysInfo_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(SysInfo_t, n);
		if (size)
			*size = n * sizeof(SysInfo_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (SysInfo_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SysInfo_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SysInfo_t %p -> %p\n", q, p));
	*(SysInfo_t*)p = *(SysInfo_t*)q;
}

void SysBackupRet_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->SysBackupRet_t::filename);
}

void SysBackupRet_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->SysBackupRet_t::filename);
#endif
}

int SysBackupRet_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_SysBackupRet_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SysBackupRet_t(struct soap *soap, const char *tag, int id, const SysBackupRet_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SysBackupRet_t), type))
		return soap->error;
	if (soap_out_std__string(soap, "filename", -1, &(a->SysBackupRet_t::filename), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *SysBackupRet_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_SysBackupRet_t(soap, tag, this, type);
}

SOAP_FMAC3 SysBackupRet_t * SOAP_FMAC4 soap_in_SysBackupRet_t(struct soap *soap, const char *tag, SysBackupRet_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (SysBackupRet_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_SysBackupRet_t, sizeof(SysBackupRet_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_SysBackupRet_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (SysBackupRet_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_filename1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_filename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "filename", &(a->SysBackupRet_t::filename), "xsd:string"))
				{	soap_flag_filename1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (SysBackupRet_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SysBackupRet_t, 0, sizeof(SysBackupRet_t), 0, soap_copy_SysBackupRet_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_filename1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int SysBackupRet_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_SysBackupRet_t);
	if (this->soap_out(soap, tag?tag:"SysBackupRet-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *SysBackupRet_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_SysBackupRet_t(soap, this, tag, type);
}

SOAP_FMAC3 SysBackupRet_t * SOAP_FMAC4 soap_get_SysBackupRet_t(struct soap *soap, SysBackupRet_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_SysBackupRet_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 SysBackupRet_t * SOAP_FMAC2 soap_instantiate_SysBackupRet_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SysBackupRet_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SysBackupRet_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(SysBackupRet_t);
		if (size)
			*size = sizeof(SysBackupRet_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(SysBackupRet_t, n);
		if (size)
			*size = n * sizeof(SysBackupRet_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (SysBackupRet_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SysBackupRet_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying SysBackupRet_t %p -> %p\n", q, p));
	*(SysBackupRet_t*)p = *(SysBackupRet_t*)q;
}

void NetInterface_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfIfInfot_t(soap, &this->NetInterface_t::lanIfList);
	soap_default_std__vectorTemplateOfIfInfot_t(soap, &this->NetInterface_t::netIfList);
	soap_default_std__string(soap, &this->NetInterface_t::gw);
	soap_default_std__string(soap, &this->NetInterface_t::dns);
}

void NetInterface_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfIfInfot_t(soap, &this->NetInterface_t::lanIfList);
	soap_serialize_std__vectorTemplateOfIfInfot_t(soap, &this->NetInterface_t::netIfList);
	soap_serialize_std__string(soap, &this->NetInterface_t::gw);
	soap_serialize_std__string(soap, &this->NetInterface_t::dns);
#endif
}

int NetInterface_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_NetInterface_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NetInterface_t(struct soap *soap, const char *tag, int id, const NetInterface_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NetInterface_t), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfIfInfot_t(soap, "lanIfList", -1, &(a->NetInterface_t::lanIfList), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfIfInfot_t(soap, "netIfList", -1, &(a->NetInterface_t::netIfList), ""))
		return soap->error;
	if (soap_out_std__string(soap, "gw", -1, &(a->NetInterface_t::gw), ""))
		return soap->error;
	if (soap_out_std__string(soap, "dns", -1, &(a->NetInterface_t::dns), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *NetInterface_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_NetInterface_t(soap, tag, this, type);
}

SOAP_FMAC3 NetInterface_t * SOAP_FMAC4 soap_in_NetInterface_t(struct soap *soap, const char *tag, NetInterface_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (NetInterface_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_NetInterface_t, sizeof(NetInterface_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_NetInterface_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (NetInterface_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_gw1 = 1;
	size_t soap_flag_dns1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfIfInfot_t(soap, "lanIfList", &(a->NetInterface_t::lanIfList), "IfInfot-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfIfInfot_t(soap, "netIfList", &(a->NetInterface_t::netIfList), "IfInfot-t"))
					continue;
			if (soap_flag_gw1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "gw", &(a->NetInterface_t::gw), "xsd:string"))
				{	soap_flag_gw1--;
					continue;
				}
			if (soap_flag_dns1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "dns", &(a->NetInterface_t::dns), "xsd:string"))
				{	soap_flag_dns1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (NetInterface_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NetInterface_t, 0, sizeof(NetInterface_t), 0, soap_copy_NetInterface_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_gw1 > 0 || soap_flag_dns1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int NetInterface_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_NetInterface_t);
	if (this->soap_out(soap, tag?tag:"NetInterface-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *NetInterface_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_NetInterface_t(soap, this, tag, type);
}

SOAP_FMAC3 NetInterface_t * SOAP_FMAC4 soap_get_NetInterface_t(struct soap *soap, NetInterface_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_NetInterface_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 NetInterface_t * SOAP_FMAC2 soap_instantiate_NetInterface_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NetInterface_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NetInterface_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(NetInterface_t);
		if (size)
			*size = sizeof(NetInterface_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(NetInterface_t, n);
		if (size)
			*size = n * sizeof(NetInterface_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (NetInterface_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NetInterface_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying NetInterface_t %p -> %p\n", q, p));
	*(NetInterface_t*)p = *(NetInterface_t*)q;
}

void IfInfot_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->IfInfot_t::ifname);
	soap_default_std__string(soap, &this->IfInfot_t::ip);
	soap_default_std__string(soap, &this->IfInfot_t::netmask);
	soap_default_std__string(soap, &this->IfInfot_t::mac);
	soap_default_int(soap, &this->IfInfot_t::mtu);
}

void IfInfot_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->IfInfot_t::ifname);
	soap_serialize_std__string(soap, &this->IfInfot_t::ip);
	soap_serialize_std__string(soap, &this->IfInfot_t::netmask);
	soap_serialize_std__string(soap, &this->IfInfot_t::mac);
#endif
}

int IfInfot_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_IfInfot_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IfInfot_t(struct soap *soap, const char *tag, int id, const IfInfot_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IfInfot_t), type))
		return soap->error;
	if (soap_out_std__string(soap, "ifname", -1, &(a->IfInfot_t::ifname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ip", -1, &(a->IfInfot_t::ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "netmask", -1, &(a->IfInfot_t::netmask), ""))
		return soap->error;
	if (soap_out_std__string(soap, "mac", -1, &(a->IfInfot_t::mac), ""))
		return soap->error;
	if (soap_out_int(soap, "mtu", -1, &(a->IfInfot_t::mtu), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *IfInfot_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_IfInfot_t(soap, tag, this, type);
}

SOAP_FMAC3 IfInfot_t * SOAP_FMAC4 soap_in_IfInfot_t(struct soap *soap, const char *tag, IfInfot_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (IfInfot_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_IfInfot_t, sizeof(IfInfot_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_IfInfot_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (IfInfot_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ifname1 = 1;
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_netmask1 = 1;
	size_t soap_flag_mac1 = 1;
	size_t soap_flag_mtu1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ifname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ifname", &(a->IfInfot_t::ifname), "xsd:string"))
				{	soap_flag_ifname1--;
					continue;
				}
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ip", &(a->IfInfot_t::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_netmask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "netmask", &(a->IfInfot_t::netmask), "xsd:string"))
				{	soap_flag_netmask1--;
					continue;
				}
			if (soap_flag_mac1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "mac", &(a->IfInfot_t::mac), "xsd:string"))
				{	soap_flag_mac1--;
					continue;
				}
			if (soap_flag_mtu1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "mtu", &(a->IfInfot_t::mtu), "xsd:int"))
				{	soap_flag_mtu1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (IfInfot_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IfInfot_t, 0, sizeof(IfInfot_t), 0, soap_copy_IfInfot_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ifname1 > 0 || soap_flag_ip1 > 0 || soap_flag_netmask1 > 0 || soap_flag_mac1 > 0 || soap_flag_mtu1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int IfInfot_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_IfInfot_t);
	if (this->soap_out(soap, tag?tag:"IfInfot-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *IfInfot_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_IfInfot_t(soap, this, tag, type);
}

SOAP_FMAC3 IfInfot_t * SOAP_FMAC4 soap_get_IfInfot_t(struct soap *soap, IfInfot_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_IfInfot_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 IfInfot_t * SOAP_FMAC2 soap_instantiate_IfInfot_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IfInfot_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IfInfot_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(IfInfot_t);
		if (size)
			*size = sizeof(IfInfot_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(IfInfot_t, n);
		if (size)
			*size = n * sizeof(IfInfot_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (IfInfot_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IfInfot_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying IfInfot_t %p -> %p\n", q, p));
	*(IfInfot_t*)p = *(IfInfot_t*)q;
}

void RuntimeInfo_t::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_bool(soap, &this->RuntimeInfo_t::isConnected);
	soap_default_float(soap, &this->RuntimeInfo_t::inSpeed);
	soap_default_float(soap, &this->RuntimeInfo_t::outSpeed);
}

void RuntimeInfo_t::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->RuntimeInfo_t::isConnected, SOAP_TYPE_bool);
#endif
}

int RuntimeInfo_t::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_RuntimeInfo_t(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_RuntimeInfo_t(struct soap *soap, const char *tag, int id, const RuntimeInfo_t *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_RuntimeInfo_t), type))
		return soap->error;
	if (soap_out_bool(soap, "isConnected", -1, &(a->RuntimeInfo_t::isConnected), ""))
		return soap->error;
	if (soap_out_float(soap, "inSpeed", -1, &(a->RuntimeInfo_t::inSpeed), ""))
		return soap->error;
	if (soap_out_float(soap, "outSpeed", -1, &(a->RuntimeInfo_t::outSpeed), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *RuntimeInfo_t::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_RuntimeInfo_t(soap, tag, this, type);
}

SOAP_FMAC3 RuntimeInfo_t * SOAP_FMAC4 soap_in_RuntimeInfo_t(struct soap *soap, const char *tag, RuntimeInfo_t *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (RuntimeInfo_t *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_RuntimeInfo_t, sizeof(RuntimeInfo_t), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_RuntimeInfo_t)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (RuntimeInfo_t *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_isConnected1 = 1;
	size_t soap_flag_inSpeed1 = 1;
	size_t soap_flag_outSpeed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_isConnected1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "isConnected", &(a->RuntimeInfo_t::isConnected), "xsd:boolean"))
				{	soap_flag_isConnected1--;
					continue;
				}
			if (soap_flag_inSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "inSpeed", &(a->RuntimeInfo_t::inSpeed), "xsd:float"))
				{	soap_flag_inSpeed1--;
					continue;
				}
			if (soap_flag_outSpeed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "outSpeed", &(a->RuntimeInfo_t::outSpeed), "xsd:float"))
				{	soap_flag_outSpeed1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (RuntimeInfo_t *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_RuntimeInfo_t, 0, sizeof(RuntimeInfo_t), 0, soap_copy_RuntimeInfo_t);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isConnected1 > 0 || soap_flag_inSpeed1 > 0 || soap_flag_outSpeed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int RuntimeInfo_t::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_RuntimeInfo_t);
	if (this->soap_out(soap, tag?tag:"RuntimeInfo-t", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *RuntimeInfo_t::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_RuntimeInfo_t(soap, this, tag, type);
}

SOAP_FMAC3 RuntimeInfo_t * SOAP_FMAC4 soap_get_RuntimeInfo_t(struct soap *soap, RuntimeInfo_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_RuntimeInfo_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 RuntimeInfo_t * SOAP_FMAC2 soap_instantiate_RuntimeInfo_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_RuntimeInfo_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_RuntimeInfo_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(RuntimeInfo_t);
		if (size)
			*size = sizeof(RuntimeInfo_t);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(RuntimeInfo_t, n);
		if (size)
			*size = n * sizeof(RuntimeInfo_t);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (RuntimeInfo_t*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_RuntimeInfo_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying RuntimeInfo_t %p -> %p\n", q, p));
	*(RuntimeInfo_t*)p = *(RuntimeInfo_t*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void arrayOfName::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void arrayOfName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_arrayOfName))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_string(soap, this->__ptr + i);
		}
#endif
}

int arrayOfName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_arrayOfName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfName(struct soap *soap, const char *tag, int id, const arrayOfName *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "xsd:string", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_arrayOfName);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_string(soap, "item", -1, &a->__ptr[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *arrayOfName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arrayOfName(soap, tag, this, type);
}

SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_in_arrayOfName(struct soap *soap, const char *tag, arrayOfName *a, const char *type)
{	int i, j;
	char **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (arrayOfName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arrayOfName, sizeof(arrayOfName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (char **)soap_malloc(soap, sizeof(char *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_string(soap, NULL, a->__ptr + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (char **)soap_push_block(soap, NULL, sizeof(char *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (char **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arrayOfName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arrayOfName, 0, sizeof(arrayOfName), 0, soap_copy_arrayOfName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arrayOfName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_arrayOfName);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arrayOfName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arrayOfName(soap, this, tag, type);
}

SOAP_FMAC3 arrayOfName * SOAP_FMAC4 soap_get_arrayOfName(struct soap *soap, arrayOfName *p, const char *tag, const char *type)
{
	if ((p = soap_in_arrayOfName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arrayOfName * SOAP_FMAC2 soap_instantiate_arrayOfName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arrayOfName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arrayOfName, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arrayOfName);
		if (size)
			*size = sizeof(arrayOfName);
		((arrayOfName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arrayOfName, n);
		if (size)
			*size = n * sizeof(arrayOfName);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arrayOfName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arrayOfName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arrayOfName %p -> %p\n", q, p));
	*(arrayOfName*)p = *(arrayOfName*)q;
}

void arrayOfData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
}

void arrayOfData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_arrayOfData))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptr + i, SOAP_TYPE_ns__Data);
			this->__ptr[i].soap_serialize(soap);
		}
#endif
}

int arrayOfData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_arrayOfData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayOfData(struct soap *soap, const char *tag, int id, const arrayOfData *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsize(soap, "ns:Data", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_arrayOfData);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		a->__ptr[i].soap_out(soap, "item", -1, "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *arrayOfData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_arrayOfData(soap, tag, this, type);
}

SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_in_arrayOfData(struct soap *soap, const char *tag, arrayOfData *a, const char *type)
{	int i, j;
	ns__Data *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (arrayOfData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_arrayOfData, sizeof(arrayOfData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_ns__Data(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				(a->__ptr+i)->ns__Data::soap_default(soap);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_ns__Data(soap, NULL, a->__ptr + i, "ns:Data"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns__Data *)soap_push_block(soap, NULL, sizeof(ns__Data));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, ns__Data);
				p->soap_default(soap);
				if (!soap_in_ns__Data(soap, NULL, p, "ns:Data"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_ns__Data(soap, soap->blist->size/sizeof(ns__Data));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (arrayOfData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_arrayOfData, 0, sizeof(arrayOfData), 0, soap_copy_arrayOfData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int arrayOfData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_arrayOfData);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *arrayOfData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_arrayOfData(soap, this, tag, type);
}

SOAP_FMAC3 arrayOfData * SOAP_FMAC4 soap_get_arrayOfData(struct soap *soap, arrayOfData *p, const char *tag, const char *type)
{
	if ((p = soap_in_arrayOfData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 arrayOfData * SOAP_FMAC2 soap_instantiate_arrayOfData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_arrayOfData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_arrayOfData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(arrayOfData);
		if (size)
			*size = sizeof(arrayOfData);
		((arrayOfData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(arrayOfData, n);
		if (size)
			*size = n * sizeof(arrayOfData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((arrayOfData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (arrayOfData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayOfData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying arrayOfData %p -> %p\n", q, p));
	*(arrayOfData*)p = *(arrayOfData*)q;
}

void ns__Data::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void ns__Data::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_ns__Data))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int ns__Data::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ns__Data(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__Data(struct soap *soap, const char *tag, int id, const ns__Data *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_ns__Data);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_ns__Data);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__Data::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__Data(soap, tag, this, type);
}

SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_in_ns__Data(struct soap *soap, const char *tag, ns__Data *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ns__Data *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__Data, sizeof(ns__Data), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (ns__Data *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__Data, 0, sizeof(ns__Data), 0, soap_copy_ns__Data);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__Data::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_ns__Data);
	if (this->soap_out(soap, tag?tag:"ns:Data", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__Data::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__Data(soap, this, tag, type);
}

SOAP_FMAC3 ns__Data * SOAP_FMAC4 soap_get_ns__Data(struct soap *soap, ns__Data *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__Data * SOAP_FMAC2 soap_instantiate_ns__Data(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__Data(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__Data, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns__Data);
		if (size)
			*size = sizeof(ns__Data);
		((ns__Data*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns__Data, n);
		if (size)
			*size = n * sizeof(ns__Data);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns__Data*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__Data*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__Data(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__Data %p -> %p\n", q, p));
	*(ns__Data*)p = *(ns__Data*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusConnection(struct soap *soap, struct ns__getStatusConnection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_13 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusConnection(struct soap *soap, const struct ns__getStatusConnection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient _param_13 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusConnection(struct soap *soap, const char *tag, int id, const struct ns__getStatusConnection *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusConnection), type))
		return soap->error;
	/* transient _param_13 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusConnection * SOAP_FMAC4 soap_in_ns__getStatusConnection(struct soap *soap, const char *tag, struct ns__getStatusConnection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusConnection *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusConnection, sizeof(struct ns__getStatusConnection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusConnection(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_13 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusConnection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusConnection, 0, sizeof(struct ns__getStatusConnection), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusConnection(struct soap *soap, const struct ns__getStatusConnection *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusConnection);
	if (soap_out_ns__getStatusConnection(soap, tag?tag:"ns:getStatusConnection", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusConnection * SOAP_FMAC4 soap_get_ns__getStatusConnection(struct soap *soap, struct ns__getStatusConnection *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusConnection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusConnection * SOAP_FMAC2 soap_instantiate_ns__getStatusConnection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusConnection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusConnection, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusConnection);
		if (size)
			*size = sizeof(struct ns__getStatusConnection);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusConnection, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusConnection);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusConnection*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusConnection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusConnection %p -> %p\n", q, p));
	*(struct ns__getStatusConnection*)p = *(struct ns__getStatusConnection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusConnectionResponse(struct soap *soap, struct ns__getStatusConnectionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusConnectionResponse(struct soap *soap, const struct ns__getStatusConnectionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToStatusConnList_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusConnectionResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusConnectionResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusConnectionResponse), type))
		return soap->error;
	if (soap_out_PointerToStatusConnList_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusConnectionResponse * SOAP_FMAC4 soap_in_ns__getStatusConnectionResponse(struct soap *soap, const char *tag, struct ns__getStatusConnectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusConnectionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusConnectionResponse, sizeof(struct ns__getStatusConnectionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusConnectionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToStatusConnList_t(soap, "ret", &a->ret, "ConnTrack-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusConnectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusConnectionResponse, 0, sizeof(struct ns__getStatusConnectionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusConnectionResponse(struct soap *soap, const struct ns__getStatusConnectionResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusConnectionResponse);
	if (soap_out_ns__getStatusConnectionResponse(soap, tag?tag:"ns:getStatusConnectionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusConnectionResponse * SOAP_FMAC4 soap_get_ns__getStatusConnectionResponse(struct soap *soap, struct ns__getStatusConnectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusConnectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusConnectionResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusConnectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusConnectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusConnectionResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusConnectionResponse);
		if (size)
			*size = sizeof(struct ns__getStatusConnectionResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusConnectionResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusConnectionResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusConnectionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusConnectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusConnectionResponse %p -> %p\n", q, p));
	*(struct ns__getStatusConnectionResponse*)p = *(struct ns__getStatusConnectionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusServices(struct soap *soap, struct ns__getStatusServices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_12 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusServices(struct soap *soap, const struct ns__getStatusServices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient _param_12 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusServices(struct soap *soap, const char *tag, int id, const struct ns__getStatusServices *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusServices), type))
		return soap->error;
	/* transient _param_12 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusServices * SOAP_FMAC4 soap_in_ns__getStatusServices(struct soap *soap, const char *tag, struct ns__getStatusServices *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusServices *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusServices, sizeof(struct ns__getStatusServices), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusServices(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_12 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusServices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusServices, 0, sizeof(struct ns__getStatusServices), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusServices(struct soap *soap, const struct ns__getStatusServices *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusServices);
	if (soap_out_ns__getStatusServices(soap, tag?tag:"ns:getStatusServices", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusServices * SOAP_FMAC4 soap_get_ns__getStatusServices(struct soap *soap, struct ns__getStatusServices *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusServices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusServices * SOAP_FMAC2 soap_instantiate_ns__getStatusServices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusServices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusServices, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusServices);
		if (size)
			*size = sizeof(struct ns__getStatusServices);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusServices, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusServices);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusServices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusServices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusServices %p -> %p\n", q, p));
	*(struct ns__getStatusServices*)p = *(struct ns__getStatusServices*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusServicesResponse(struct soap *soap, struct ns__getStatusServicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusServicesResponse(struct soap *soap, const struct ns__getStatusServicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToStatusServicesList_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusServicesResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusServicesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusServicesResponse), type))
		return soap->error;
	if (soap_out_PointerToStatusServicesList_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusServicesResponse * SOAP_FMAC4 soap_in_ns__getStatusServicesResponse(struct soap *soap, const char *tag, struct ns__getStatusServicesResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusServicesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusServicesResponse, sizeof(struct ns__getStatusServicesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusServicesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToStatusServicesList_t(soap, "ret", &a->ret, "StatusServices-t"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusServicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusServicesResponse, 0, sizeof(struct ns__getStatusServicesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusServicesResponse(struct soap *soap, const struct ns__getStatusServicesResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusServicesResponse);
	if (soap_out_ns__getStatusServicesResponse(soap, tag?tag:"ns:getStatusServicesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusServicesResponse * SOAP_FMAC4 soap_get_ns__getStatusServicesResponse(struct soap *soap, struct ns__getStatusServicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusServicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusServicesResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusServicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusServicesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusServicesResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusServicesResponse);
		if (size)
			*size = sizeof(struct ns__getStatusServicesResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusServicesResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusServicesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusServicesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusServicesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusServicesResponse %p -> %p\n", q, p));
	*(struct ns__getStatusServicesResponse*)p = *(struct ns__getStatusServicesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkOther(struct soap *soap, struct ns__getStatusNetworkOther *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SysGraphMode_t(soap, &a->mode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkOther(struct soap *soap, const struct ns__getStatusNetworkOther *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkOther(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkOther *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkOther), type))
		return soap->error;
	if (soap_out_SysGraphMode_t(soap, "mode", -1, &a->mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkOther * SOAP_FMAC4 soap_in_ns__getStatusNetworkOther(struct soap *soap, const char *tag, struct ns__getStatusNetworkOther *a, const char *type)
{
	size_t soap_flag_mode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkOther *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkOther, sizeof(struct ns__getStatusNetworkOther), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkOther(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SysGraphMode_t(soap, "mode", &a->mode, "SysGraphMode-t"))
				{	soap_flag_mode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkOther *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkOther, 0, sizeof(struct ns__getStatusNetworkOther), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkOther(struct soap *soap, const struct ns__getStatusNetworkOther *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkOther);
	if (soap_out_ns__getStatusNetworkOther(soap, tag?tag:"ns:getStatusNetworkOther", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkOther * SOAP_FMAC4 soap_get_ns__getStatusNetworkOther(struct soap *soap, struct ns__getStatusNetworkOther *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkOther(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkOther * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkOther(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkOther(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkOther, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkOther);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkOther);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkOther, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkOther);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkOther*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkOther(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkOther %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkOther*)p = *(struct ns__getStatusNetworkOther*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkOtherResponse(struct soap *soap, struct ns__getStatusNetworkOtherResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkOtherResponse(struct soap *soap, const struct ns__getStatusNetworkOtherResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToNetworkData_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkOtherResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkOtherResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkOtherResponse), type))
		return soap->error;
	if (soap_out_PointerToNetworkData_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkOtherResponse(struct soap *soap, const char *tag, struct ns__getStatusNetworkOtherResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkOtherResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkOtherResponse, sizeof(struct ns__getStatusNetworkOtherResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkOtherResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToNetworkData_t(soap, "ret", &a->ret, "NetworkData-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkOtherResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkOtherResponse, 0, sizeof(struct ns__getStatusNetworkOtherResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkOtherResponse(struct soap *soap, const struct ns__getStatusNetworkOtherResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkOtherResponse);
	if (soap_out_ns__getStatusNetworkOtherResponse(soap, tag?tag:"ns:getStatusNetworkOtherResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkOtherResponse(struct soap *soap, struct ns__getStatusNetworkOtherResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkOtherResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkOtherResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkOtherResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkOtherResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkOtherResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkOtherResponse);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkOtherResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkOtherResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkOtherResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkOtherResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkOtherResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkOtherResponse %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkOtherResponse*)p = *(struct ns__getStatusNetworkOtherResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkInternal(struct soap *soap, struct ns__getStatusNetworkInternal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SysGraphMode_t(soap, &a->mode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkInternal(struct soap *soap, const struct ns__getStatusNetworkInternal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkInternal(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkInternal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkInternal), type))
		return soap->error;
	if (soap_out_SysGraphMode_t(soap, "mode", -1, &a->mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkInternal * SOAP_FMAC4 soap_in_ns__getStatusNetworkInternal(struct soap *soap, const char *tag, struct ns__getStatusNetworkInternal *a, const char *type)
{
	size_t soap_flag_mode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkInternal *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkInternal, sizeof(struct ns__getStatusNetworkInternal), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkInternal(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SysGraphMode_t(soap, "mode", &a->mode, "SysGraphMode-t"))
				{	soap_flag_mode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkInternal *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkInternal, 0, sizeof(struct ns__getStatusNetworkInternal), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkInternal(struct soap *soap, const struct ns__getStatusNetworkInternal *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkInternal);
	if (soap_out_ns__getStatusNetworkInternal(soap, tag?tag:"ns:getStatusNetworkInternal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkInternal * SOAP_FMAC4 soap_get_ns__getStatusNetworkInternal(struct soap *soap, struct ns__getStatusNetworkInternal *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkInternal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkInternal * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkInternal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkInternal(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkInternal, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkInternal);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkInternal);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkInternal, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkInternal);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkInternal*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkInternal(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkInternal %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkInternal*)p = *(struct ns__getStatusNetworkInternal*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkInternalResponse(struct soap *soap, struct ns__getStatusNetworkInternalResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkInternalResponse(struct soap *soap, const struct ns__getStatusNetworkInternalResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToNetworkData_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkInternalResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkInternalResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkInternalResponse), type))
		return soap->error;
	if (soap_out_PointerToNetworkData_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkInternalResponse(struct soap *soap, const char *tag, struct ns__getStatusNetworkInternalResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkInternalResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkInternalResponse, sizeof(struct ns__getStatusNetworkInternalResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkInternalResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToNetworkData_t(soap, "ret", &a->ret, "NetworkData-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkInternalResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkInternalResponse, 0, sizeof(struct ns__getStatusNetworkInternalResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkInternalResponse(struct soap *soap, const struct ns__getStatusNetworkInternalResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkInternalResponse);
	if (soap_out_ns__getStatusNetworkInternalResponse(soap, tag?tag:"ns:getStatusNetworkInternalResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkInternalResponse(struct soap *soap, struct ns__getStatusNetworkInternalResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkInternalResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkInternalResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkInternalResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkInternalResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkInternalResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkInternalResponse);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkInternalResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkInternalResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkInternalResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkInternalResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkInternalResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkInternalResponse %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkInternalResponse*)p = *(struct ns__getStatusNetworkInternalResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkExternal(struct soap *soap, struct ns__getStatusNetworkExternal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SysGraphMode_t(soap, &a->mode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkExternal(struct soap *soap, const struct ns__getStatusNetworkExternal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkExternal(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkExternal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkExternal), type))
		return soap->error;
	if (soap_out_SysGraphMode_t(soap, "mode", -1, &a->mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkExternal * SOAP_FMAC4 soap_in_ns__getStatusNetworkExternal(struct soap *soap, const char *tag, struct ns__getStatusNetworkExternal *a, const char *type)
{
	size_t soap_flag_mode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkExternal *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkExternal, sizeof(struct ns__getStatusNetworkExternal), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkExternal(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SysGraphMode_t(soap, "mode", &a->mode, "SysGraphMode-t"))
				{	soap_flag_mode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkExternal *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkExternal, 0, sizeof(struct ns__getStatusNetworkExternal), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkExternal(struct soap *soap, const struct ns__getStatusNetworkExternal *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkExternal);
	if (soap_out_ns__getStatusNetworkExternal(soap, tag?tag:"ns:getStatusNetworkExternal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkExternal * SOAP_FMAC4 soap_get_ns__getStatusNetworkExternal(struct soap *soap, struct ns__getStatusNetworkExternal *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkExternal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkExternal * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkExternal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkExternal(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkExternal, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkExternal);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkExternal);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkExternal, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkExternal);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkExternal*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkExternal(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkExternal %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkExternal*)p = *(struct ns__getStatusNetworkExternal*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusNetworkExternalResponse(struct soap *soap, struct ns__getStatusNetworkExternalResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusNetworkExternalResponse(struct soap *soap, const struct ns__getStatusNetworkExternalResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToNetworkData_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusNetworkExternalResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusNetworkExternalResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusNetworkExternalResponse), type))
		return soap->error;
	if (soap_out_PointerToNetworkData_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC4 soap_in_ns__getStatusNetworkExternalResponse(struct soap *soap, const char *tag, struct ns__getStatusNetworkExternalResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusNetworkExternalResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusNetworkExternalResponse, sizeof(struct ns__getStatusNetworkExternalResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusNetworkExternalResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToNetworkData_t(soap, "ret", &a->ret, "NetworkData-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusNetworkExternalResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusNetworkExternalResponse, 0, sizeof(struct ns__getStatusNetworkExternalResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusNetworkExternalResponse(struct soap *soap, const struct ns__getStatusNetworkExternalResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusNetworkExternalResponse);
	if (soap_out_ns__getStatusNetworkExternalResponse(soap, tag?tag:"ns:getStatusNetworkExternalResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC4 soap_get_ns__getStatusNetworkExternalResponse(struct soap *soap, struct ns__getStatusNetworkExternalResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusNetworkExternalResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusNetworkExternalResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusNetworkExternalResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusNetworkExternalResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusNetworkExternalResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusNetworkExternalResponse);
		if (size)
			*size = sizeof(struct ns__getStatusNetworkExternalResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusNetworkExternalResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusNetworkExternalResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusNetworkExternalResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusNetworkExternalResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusNetworkExternalResponse %p -> %p\n", q, p));
	*(struct ns__getStatusNetworkExternalResponse*)p = *(struct ns__getStatusNetworkExternalResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusSystemGraph(struct soap *soap, struct ns__getStatusSystemGraph *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_SysGraphMode_t(soap, &a->mode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusSystemGraph(struct soap *soap, const struct ns__getStatusSystemGraph *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusSystemGraph(struct soap *soap, const char *tag, int id, const struct ns__getStatusSystemGraph *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusSystemGraph), type))
		return soap->error;
	if (soap_out_SysGraphMode_t(soap, "mode", -1, &a->mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusSystemGraph * SOAP_FMAC4 soap_in_ns__getStatusSystemGraph(struct soap *soap, const char *tag, struct ns__getStatusSystemGraph *a, const char *type)
{
	size_t soap_flag_mode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusSystemGraph *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusSystemGraph, sizeof(struct ns__getStatusSystemGraph), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusSystemGraph(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_SysGraphMode_t(soap, "mode", &a->mode, "SysGraphMode-t"))
				{	soap_flag_mode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusSystemGraph *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusSystemGraph, 0, sizeof(struct ns__getStatusSystemGraph), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mode > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusSystemGraph(struct soap *soap, const struct ns__getStatusSystemGraph *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusSystemGraph);
	if (soap_out_ns__getStatusSystemGraph(soap, tag?tag:"ns:getStatusSystemGraph", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusSystemGraph * SOAP_FMAC4 soap_get_ns__getStatusSystemGraph(struct soap *soap, struct ns__getStatusSystemGraph *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusSystemGraph(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusSystemGraph * SOAP_FMAC2 soap_instantiate_ns__getStatusSystemGraph(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusSystemGraph(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusSystemGraph, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusSystemGraph);
		if (size)
			*size = sizeof(struct ns__getStatusSystemGraph);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusSystemGraph, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusSystemGraph);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusSystemGraph*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusSystemGraph(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusSystemGraph %p -> %p\n", q, p));
	*(struct ns__getStatusSystemGraph*)p = *(struct ns__getStatusSystemGraph*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusSystemGraphResponse(struct soap *soap, struct ns__getStatusSystemGraphResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusSystemGraphResponse(struct soap *soap, const struct ns__getStatusSystemGraphResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToSystemData_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusSystemGraphResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusSystemGraphResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusSystemGraphResponse), type))
		return soap->error;
	if (soap_out_PointerToSystemData_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusSystemGraphResponse * SOAP_FMAC4 soap_in_ns__getStatusSystemGraphResponse(struct soap *soap, const char *tag, struct ns__getStatusSystemGraphResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusSystemGraphResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusSystemGraphResponse, sizeof(struct ns__getStatusSystemGraphResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatusSystemGraphResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSystemData_t(soap, "ret", &a->ret, "SystemData-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusSystemGraphResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusSystemGraphResponse, 0, sizeof(struct ns__getStatusSystemGraphResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusSystemGraphResponse(struct soap *soap, const struct ns__getStatusSystemGraphResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getStatusSystemGraphResponse);
	if (soap_out_ns__getStatusSystemGraphResponse(soap, tag?tag:"ns:getStatusSystemGraphResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusSystemGraphResponse * SOAP_FMAC4 soap_get_ns__getStatusSystemGraphResponse(struct soap *soap, struct ns__getStatusSystemGraphResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusSystemGraphResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusSystemGraphResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusSystemGraphResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusSystemGraphResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusSystemGraphResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getStatusSystemGraphResponse);
		if (size)
			*size = sizeof(struct ns__getStatusSystemGraphResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getStatusSystemGraphResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getStatusSystemGraphResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getStatusSystemGraphResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusSystemGraphResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusSystemGraphResponse %p -> %p\n", q, p));
	*(struct ns__getStatusSystemGraphResponse*)p = *(struct ns__getStatusSystemGraphResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysShutdownHandle(struct soap *soap, struct ns__SysShutdownHandle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__SysShutdownEvent(soap, &a->in);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysShutdownHandle(struct soap *soap, const struct ns__SysShutdownHandle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysShutdownHandle(struct soap *soap, const char *tag, int id, const struct ns__SysShutdownHandle *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SysShutdownHandle), type))
		return soap->error;
	if (soap_out_ns__SysShutdownEvent(soap, "in", -1, &a->in, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SysShutdownHandle * SOAP_FMAC4 soap_in_ns__SysShutdownHandle(struct soap *soap, const char *tag, struct ns__SysShutdownHandle *a, const char *type)
{
	size_t soap_flag_in = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SysShutdownHandle *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SysShutdownHandle, sizeof(struct ns__SysShutdownHandle), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SysShutdownHandle(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SysShutdownEvent(soap, "in", &a->in, "ns:SysShutdownEvent"))
				{	soap_flag_in--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SysShutdownHandle *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SysShutdownHandle, 0, sizeof(struct ns__SysShutdownHandle), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysShutdownHandle(struct soap *soap, const struct ns__SysShutdownHandle *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__SysShutdownHandle);
	if (soap_out_ns__SysShutdownHandle(soap, tag?tag:"ns:SysShutdownHandle", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SysShutdownHandle * SOAP_FMAC4 soap_get_ns__SysShutdownHandle(struct soap *soap, struct ns__SysShutdownHandle *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SysShutdownHandle(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SysShutdownHandle * SOAP_FMAC2 soap_instantiate_ns__SysShutdownHandle(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SysShutdownHandle(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SysShutdownHandle, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__SysShutdownHandle);
		if (size)
			*size = sizeof(struct ns__SysShutdownHandle);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__SysShutdownHandle, n);
		if (size)
			*size = n * sizeof(struct ns__SysShutdownHandle);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SysShutdownHandle*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysShutdownHandle(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SysShutdownHandle %p -> %p\n", q, p));
	*(struct ns__SysShutdownHandle*)p = *(struct ns__SysShutdownHandle*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysSysInfo(struct soap *soap, struct ns__getSysSysInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_11 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysSysInfo(struct soap *soap, const struct ns__getSysSysInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient _param_11 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysSysInfo(struct soap *soap, const char *tag, int id, const struct ns__getSysSysInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSysSysInfo), type))
		return soap->error;
	/* transient _param_11 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSysSysInfo * SOAP_FMAC4 soap_in_ns__getSysSysInfo(struct soap *soap, const char *tag, struct ns__getSysSysInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSysSysInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSysSysInfo, sizeof(struct ns__getSysSysInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getSysSysInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_11 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSysSysInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSysSysInfo, 0, sizeof(struct ns__getSysSysInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysSysInfo(struct soap *soap, const struct ns__getSysSysInfo *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getSysSysInfo);
	if (soap_out_ns__getSysSysInfo(soap, tag?tag:"ns:getSysSysInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSysSysInfo * SOAP_FMAC4 soap_get_ns__getSysSysInfo(struct soap *soap, struct ns__getSysSysInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSysSysInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSysSysInfo * SOAP_FMAC2 soap_instantiate_ns__getSysSysInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSysSysInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSysSysInfo, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getSysSysInfo);
		if (size)
			*size = sizeof(struct ns__getSysSysInfo);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getSysSysInfo, n);
		if (size)
			*size = n * sizeof(struct ns__getSysSysInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getSysSysInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysSysInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSysSysInfo %p -> %p\n", q, p));
	*(struct ns__getSysSysInfo*)p = *(struct ns__getSysSysInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysSysInfoResponse(struct soap *soap, struct ns__getSysSysInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysSysInfoResponse(struct soap *soap, const struct ns__getSysSysInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToSysInfo_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysSysInfoResponse(struct soap *soap, const char *tag, int id, const struct ns__getSysSysInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSysSysInfoResponse), type))
		return soap->error;
	if (soap_out_PointerToSysInfo_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSysSysInfoResponse * SOAP_FMAC4 soap_in_ns__getSysSysInfoResponse(struct soap *soap, const char *tag, struct ns__getSysSysInfoResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSysSysInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSysSysInfoResponse, sizeof(struct ns__getSysSysInfoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getSysSysInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSysInfo_t(soap, "ret", &a->ret, "SysInfo-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSysSysInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSysSysInfoResponse, 0, sizeof(struct ns__getSysSysInfoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysSysInfoResponse(struct soap *soap, const struct ns__getSysSysInfoResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getSysSysInfoResponse);
	if (soap_out_ns__getSysSysInfoResponse(soap, tag?tag:"ns:getSysSysInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSysSysInfoResponse * SOAP_FMAC4 soap_get_ns__getSysSysInfoResponse(struct soap *soap, struct ns__getSysSysInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSysSysInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSysSysInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getSysSysInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSysSysInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSysSysInfoResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getSysSysInfoResponse);
		if (size)
			*size = sizeof(struct ns__getSysSysInfoResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getSysSysInfoResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getSysSysInfoResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getSysSysInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysSysInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSysSysInfoResponse %p -> %p\n", q, p));
	*(struct ns__getSysSysInfoResponse*)p = *(struct ns__getSysSysInfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupHandle(struct soap *soap, struct ns__SysBackupHandle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns__SysBackupEvent(soap, &a->in);
	soap_default_string(soap, &a->path);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysBackupHandle(struct soap *soap, const struct ns__SysBackupHandle *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->path);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupHandle(struct soap *soap, const char *tag, int id, const struct ns__SysBackupHandle *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SysBackupHandle), type))
		return soap->error;
	if (soap_out_ns__SysBackupEvent(soap, "in", -1, &a->in, ""))
		return soap->error;
	if (soap_out_string(soap, "path", -1, &a->path, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SysBackupHandle * SOAP_FMAC4 soap_in_ns__SysBackupHandle(struct soap *soap, const char *tag, struct ns__SysBackupHandle *a, const char *type)
{
	size_t soap_flag_in = 1;
	size_t soap_flag_path = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SysBackupHandle *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SysBackupHandle, sizeof(struct ns__SysBackupHandle), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SysBackupHandle(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_in && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns__SysBackupEvent(soap, "in", &a->in, "ns:SysBackupEvent"))
				{	soap_flag_in--;
					continue;
				}
			if (soap_flag_path && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "path", &a->path, "xsd:string"))
				{	soap_flag_path--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SysBackupHandle *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SysBackupHandle, 0, sizeof(struct ns__SysBackupHandle), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_in > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupHandle(struct soap *soap, const struct ns__SysBackupHandle *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__SysBackupHandle);
	if (soap_out_ns__SysBackupHandle(soap, tag?tag:"ns:SysBackupHandle", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SysBackupHandle * SOAP_FMAC4 soap_get_ns__SysBackupHandle(struct soap *soap, struct ns__SysBackupHandle *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SysBackupHandle(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SysBackupHandle * SOAP_FMAC2 soap_instantiate_ns__SysBackupHandle(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SysBackupHandle(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SysBackupHandle, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__SysBackupHandle);
		if (size)
			*size = sizeof(struct ns__SysBackupHandle);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__SysBackupHandle, n);
		if (size)
			*size = n * sizeof(struct ns__SysBackupHandle);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SysBackupHandle*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysBackupHandle(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SysBackupHandle %p -> %p\n", q, p));
	*(struct ns__SysBackupHandle*)p = *(struct ns__SysBackupHandle*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__SysBackupHandleResponse(struct soap *soap, struct ns__SysBackupHandleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__SysBackupHandleResponse(struct soap *soap, const struct ns__SysBackupHandleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToSysBackupRet_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SysBackupHandleResponse(struct soap *soap, const char *tag, int id, const struct ns__SysBackupHandleResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__SysBackupHandleResponse), type))
		return soap->error;
	if (soap_out_PointerToSysBackupRet_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__SysBackupHandleResponse * SOAP_FMAC4 soap_in_ns__SysBackupHandleResponse(struct soap *soap, const char *tag, struct ns__SysBackupHandleResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__SysBackupHandleResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__SysBackupHandleResponse, sizeof(struct ns__SysBackupHandleResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__SysBackupHandleResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSysBackupRet_t(soap, "ret", &a->ret, "SysBackupRet-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__SysBackupHandleResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__SysBackupHandleResponse, 0, sizeof(struct ns__SysBackupHandleResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__SysBackupHandleResponse(struct soap *soap, const struct ns__SysBackupHandleResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__SysBackupHandleResponse);
	if (soap_out_ns__SysBackupHandleResponse(soap, tag?tag:"ns:SysBackupHandleResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__SysBackupHandleResponse * SOAP_FMAC4 soap_get_ns__SysBackupHandleResponse(struct soap *soap, struct ns__SysBackupHandleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__SysBackupHandleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__SysBackupHandleResponse * SOAP_FMAC2 soap_instantiate_ns__SysBackupHandleResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__SysBackupHandleResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__SysBackupHandleResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__SysBackupHandleResponse);
		if (size)
			*size = sizeof(struct ns__SysBackupHandleResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__SysBackupHandleResponse, n);
		if (size)
			*size = n * sizeof(struct ns__SysBackupHandleResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__SysBackupHandleResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__SysBackupHandleResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__SysBackupHandleResponse %p -> %p\n", q, p));
	*(struct ns__SysBackupHandleResponse*)p = *(struct ns__SysBackupHandleResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysHomeInterface(struct soap *soap, struct ns__getSysHomeInterface *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_10 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysHomeInterface(struct soap *soap, const struct ns__getSysHomeInterface *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient _param_10 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysHomeInterface(struct soap *soap, const char *tag, int id, const struct ns__getSysHomeInterface *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSysHomeInterface), type))
		return soap->error;
	/* transient _param_10 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSysHomeInterface * SOAP_FMAC4 soap_in_ns__getSysHomeInterface(struct soap *soap, const char *tag, struct ns__getSysHomeInterface *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSysHomeInterface *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSysHomeInterface, sizeof(struct ns__getSysHomeInterface), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getSysHomeInterface(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_10 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSysHomeInterface *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSysHomeInterface, 0, sizeof(struct ns__getSysHomeInterface), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysHomeInterface(struct soap *soap, const struct ns__getSysHomeInterface *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getSysHomeInterface);
	if (soap_out_ns__getSysHomeInterface(soap, tag?tag:"ns:getSysHomeInterface", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSysHomeInterface * SOAP_FMAC4 soap_get_ns__getSysHomeInterface(struct soap *soap, struct ns__getSysHomeInterface *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSysHomeInterface(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSysHomeInterface * SOAP_FMAC2 soap_instantiate_ns__getSysHomeInterface(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSysHomeInterface(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSysHomeInterface, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getSysHomeInterface);
		if (size)
			*size = sizeof(struct ns__getSysHomeInterface);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getSysHomeInterface, n);
		if (size)
			*size = n * sizeof(struct ns__getSysHomeInterface);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getSysHomeInterface*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysHomeInterface(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSysHomeInterface %p -> %p\n", q, p));
	*(struct ns__getSysHomeInterface*)p = *(struct ns__getSysHomeInterface*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSysHomeInterfaceResponse(struct soap *soap, struct ns__getSysHomeInterfaceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSysHomeInterfaceResponse(struct soap *soap, const struct ns__getSysHomeInterfaceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToNetInterface_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSysHomeInterfaceResponse(struct soap *soap, const char *tag, int id, const struct ns__getSysHomeInterfaceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSysHomeInterfaceResponse), type))
		return soap->error;
	if (soap_out_PointerToNetInterface_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC4 soap_in_ns__getSysHomeInterfaceResponse(struct soap *soap, const char *tag, struct ns__getSysHomeInterfaceResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSysHomeInterfaceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSysHomeInterfaceResponse, sizeof(struct ns__getSysHomeInterfaceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getSysHomeInterfaceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToNetInterface_t(soap, "ret", &a->ret, "NetInterface-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSysHomeInterfaceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSysHomeInterfaceResponse, 0, sizeof(struct ns__getSysHomeInterfaceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSysHomeInterfaceResponse(struct soap *soap, const struct ns__getSysHomeInterfaceResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getSysHomeInterfaceResponse);
	if (soap_out_ns__getSysHomeInterfaceResponse(soap, tag?tag:"ns:getSysHomeInterfaceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC4 soap_get_ns__getSysHomeInterfaceResponse(struct soap *soap, struct ns__getSysHomeInterfaceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSysHomeInterfaceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSysHomeInterfaceResponse * SOAP_FMAC2 soap_instantiate_ns__getSysHomeInterfaceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSysHomeInterfaceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSysHomeInterfaceResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getSysHomeInterfaceResponse);
		if (size)
			*size = sizeof(struct ns__getSysHomeInterfaceResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getSysHomeInterfaceResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getSysHomeInterfaceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getSysHomeInterfaceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSysHomeInterfaceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSysHomeInterfaceResponse %p -> %p\n", q, p));
	*(struct ns__getSysHomeInterfaceResponse*)p = *(struct ns__getSysHomeInterfaceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRuntimeInfo(struct soap *soap, struct ns__getRuntimeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_9 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRuntimeInfo(struct soap *soap, const struct ns__getRuntimeInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient _param_9 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRuntimeInfo(struct soap *soap, const char *tag, int id, const struct ns__getRuntimeInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getRuntimeInfo), type))
		return soap->error;
	/* transient _param_9 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getRuntimeInfo * SOAP_FMAC4 soap_in_ns__getRuntimeInfo(struct soap *soap, const char *tag, struct ns__getRuntimeInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getRuntimeInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getRuntimeInfo, sizeof(struct ns__getRuntimeInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getRuntimeInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_9 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getRuntimeInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getRuntimeInfo, 0, sizeof(struct ns__getRuntimeInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRuntimeInfo(struct soap *soap, const struct ns__getRuntimeInfo *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getRuntimeInfo);
	if (soap_out_ns__getRuntimeInfo(soap, tag?tag:"ns:getRuntimeInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getRuntimeInfo * SOAP_FMAC4 soap_get_ns__getRuntimeInfo(struct soap *soap, struct ns__getRuntimeInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getRuntimeInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getRuntimeInfo * SOAP_FMAC2 soap_instantiate_ns__getRuntimeInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getRuntimeInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getRuntimeInfo, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getRuntimeInfo);
		if (size)
			*size = sizeof(struct ns__getRuntimeInfo);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getRuntimeInfo, n);
		if (size)
			*size = n * sizeof(struct ns__getRuntimeInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getRuntimeInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getRuntimeInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getRuntimeInfo %p -> %p\n", q, p));
	*(struct ns__getRuntimeInfo*)p = *(struct ns__getRuntimeInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getRuntimeInfoResponse(struct soap *soap, struct ns__getRuntimeInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getRuntimeInfoResponse(struct soap *soap, const struct ns__getRuntimeInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToRuntimeInfo_t(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getRuntimeInfoResponse(struct soap *soap, const char *tag, int id, const struct ns__getRuntimeInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getRuntimeInfoResponse), type))
		return soap->error;
	if (soap_out_PointerToRuntimeInfo_t(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getRuntimeInfoResponse * SOAP_FMAC4 soap_in_ns__getRuntimeInfoResponse(struct soap *soap, const char *tag, struct ns__getRuntimeInfoResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getRuntimeInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getRuntimeInfoResponse, sizeof(struct ns__getRuntimeInfoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getRuntimeInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToRuntimeInfo_t(soap, "ret", &a->ret, "RuntimeInfo-t"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getRuntimeInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getRuntimeInfoResponse, 0, sizeof(struct ns__getRuntimeInfoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getRuntimeInfoResponse(struct soap *soap, const struct ns__getRuntimeInfoResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getRuntimeInfoResponse);
	if (soap_out_ns__getRuntimeInfoResponse(soap, tag?tag:"ns:getRuntimeInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getRuntimeInfoResponse * SOAP_FMAC4 soap_get_ns__getRuntimeInfoResponse(struct soap *soap, struct ns__getRuntimeInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getRuntimeInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getRuntimeInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getRuntimeInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getRuntimeInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getRuntimeInfoResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getRuntimeInfoResponse);
		if (size)
			*size = sizeof(struct ns__getRuntimeInfoResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getRuntimeInfoResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getRuntimeInfoResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getRuntimeInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getRuntimeInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getRuntimeInfoResponse %p -> %p\n", q, p));
	*(struct ns__getRuntimeInfoResponse*)p = *(struct ns__getRuntimeInfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__login(struct soap *soap, struct ns__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->username);
	soap_default_string(soap, &a->passwd);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__login(struct soap *soap, const struct ns__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->username);
	soap_serialize_string(soap, &a->passwd);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__login(struct soap *soap, const char *tag, int id, const struct ns__login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__login), type))
		return soap->error;
	if (soap_out_string(soap, "username", -1, &a->username, ""))
		return soap->error;
	if (soap_out_string(soap, "passwd", -1, &a->passwd, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__login * SOAP_FMAC4 soap_in_ns__login(struct soap *soap, const char *tag, struct ns__login *a, const char *type)
{
	size_t soap_flag_username = 1;
	size_t soap_flag_passwd = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__login *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__login, sizeof(struct ns__login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__login(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_username && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "username", &a->username, "xsd:string"))
				{	soap_flag_username--;
					continue;
				}
			if (soap_flag_passwd && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "passwd", &a->passwd, "xsd:string"))
				{	soap_flag_passwd--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__login, 0, sizeof(struct ns__login), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__login(struct soap *soap, const struct ns__login *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__login);
	if (soap_out_ns__login(soap, tag?tag:"ns:login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__login * SOAP_FMAC4 soap_get_ns__login(struct soap *soap, struct ns__login *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__login * SOAP_FMAC2 soap_instantiate_ns__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__login, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__login);
		if (size)
			*size = sizeof(struct ns__login);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__login, n);
		if (size)
			*size = n * sizeof(struct ns__login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__login %p -> %p\n", q, p));
	*(struct ns__login*)p = *(struct ns__login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__loginResponse(struct soap *soap, struct ns__loginResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ret = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__loginResponse(struct soap *soap, const struct ns__loginResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTobool(soap, &a->ret);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__loginResponse(struct soap *soap, const char *tag, int id, const struct ns__loginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__loginResponse), type))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ret", -1, &a->ret, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__loginResponse * SOAP_FMAC4 soap_in_ns__loginResponse(struct soap *soap, const char *tag, struct ns__loginResponse *a, const char *type)
{
	size_t soap_flag_ret = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__loginResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__loginResponse, sizeof(struct ns__loginResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__loginResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ret", &a->ret, "xsd:boolean"))
				{	soap_flag_ret--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__loginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__loginResponse, 0, sizeof(struct ns__loginResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__loginResponse(struct soap *soap, const struct ns__loginResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__loginResponse);
	if (soap_out_ns__loginResponse(soap, tag?tag:"ns:loginResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__loginResponse * SOAP_FMAC4 soap_get_ns__loginResponse(struct soap *soap, struct ns__loginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__loginResponse * SOAP_FMAC2 soap_instantiate_ns__loginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__loginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__loginResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__loginResponse);
		if (size)
			*size = sizeof(struct ns__loginResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__loginResponse, n);
		if (size)
			*size = n * sizeof(struct ns__loginResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__loginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__loginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__loginResponse %p -> %p\n", q, p));
	*(struct ns__loginResponse*)p = *(struct ns__loginResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__noResponse(struct soap *soap, struct ns__noResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__noResponse(struct soap *soap, const struct ns__noResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__noResponse(struct soap *soap, const char *tag, int id, const struct ns__noResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__noResponse), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__noResponse * SOAP_FMAC4 soap_in_ns__noResponse(struct soap *soap, const char *tag, struct ns__noResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__noResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__noResponse, sizeof(struct ns__noResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__noResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__noResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__noResponse, 0, sizeof(struct ns__noResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__noResponse(struct soap *soap, const struct ns__noResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__noResponse);
	if (soap_out_ns__noResponse(soap, tag?tag:"ns:noResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__noResponse * SOAP_FMAC4 soap_get_ns__noResponse(struct soap *soap, struct ns__noResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__noResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__noResponse * SOAP_FMAC2 soap_instantiate_ns__noResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__noResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__noResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__noResponse);
		if (size)
			*size = sizeof(struct ns__noResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__noResponse, n);
		if (size)
			*size = n * sizeof(struct ns__noResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__noResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__noResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__noResponse %p -> %p\n", q, p));
	*(struct ns__noResponse*)p = *(struct ns__noResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImage(struct soap *soap, struct ns__getImage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->name);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImage(struct soap *soap, const struct ns__getImage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->name);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImage(struct soap *soap, const char *tag, int id, const struct ns__getImage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getImage), type))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &a->name, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_in_ns__getImage(struct soap *soap, const char *tag, struct ns__getImage *a, const char *type)
{
	size_t soap_flag_name = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getImage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getImage, sizeof(struct ns__getImage), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getImage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getImage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getImage, 0, sizeof(struct ns__getImage), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImage(struct soap *soap, const struct ns__getImage *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getImage);
	if (soap_out_ns__getImage(soap, tag?tag:"ns:getImage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getImage * SOAP_FMAC4 soap_get_ns__getImage(struct soap *soap, struct ns__getImage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getImage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getImage * SOAP_FMAC2 soap_instantiate_ns__getImage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getImage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getImage, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getImage);
		if (size)
			*size = sizeof(struct ns__getImage);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getImage, n);
		if (size)
			*size = n * sizeof(struct ns__getImage);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getImage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getImage %p -> %p\n", q, p));
	*(struct ns__getImage*)p = *(struct ns__getImage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getImageResponse(struct soap *soap, struct ns__getImageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->image.ns__Data::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getImageResponse(struct soap *soap, const struct ns__getImageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->image, SOAP_TYPE_ns__Data);
	a->image.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getImageResponse(struct soap *soap, const char *tag, int id, const struct ns__getImageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getImageResponse), type))
		return soap->error;
	if (a->image.soap_out(soap, "image", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_in_ns__getImageResponse(struct soap *soap, const char *tag, struct ns__getImageResponse *a, const char *type)
{
	size_t soap_flag_image = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getImageResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getImageResponse, sizeof(struct ns__getImageResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getImageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_image && soap->error == SOAP_TAG_MISMATCH)
				if (a->image.soap_in(soap, "image", "ns:Data"))
				{	soap_flag_image--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getImageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getImageResponse, 0, sizeof(struct ns__getImageResponse), 0, soap_copy_ns__getImageResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_image > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getImageResponse(struct soap *soap, const struct ns__getImageResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getImageResponse);
	if (soap_out_ns__getImageResponse(soap, tag?tag:"ns:getImageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getImageResponse * SOAP_FMAC4 soap_get_ns__getImageResponse(struct soap *soap, struct ns__getImageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getImageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getImageResponse * SOAP_FMAC2 soap_instantiate_ns__getImageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getImageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getImageResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getImageResponse);
		if (size)
			*size = sizeof(struct ns__getImageResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getImageResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getImageResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getImageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getImageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getImageResponse %p -> %p\n", q, p));
	*(struct ns__getImageResponse*)p = *(struct ns__getImageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getData(struct soap *soap, struct ns__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->names = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getData(struct soap *soap, const struct ns__getData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarrayOfName(soap, &a->names);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getData(struct soap *soap, const char *tag, int id, const struct ns__getData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getData), type))
		return soap->error;
	if (soap_out_PointerToarrayOfName(soap, "names", -1, &a->names, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_in_ns__getData(struct soap *soap, const char *tag, struct ns__getData *a, const char *type)
{
	size_t soap_flag_names = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getData, sizeof(struct ns__getData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_names && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarrayOfName(soap, "names", &a->names, "xsd:string"))
				{	soap_flag_names--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getData, 0, sizeof(struct ns__getData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getData(struct soap *soap, const struct ns__getData *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getData);
	if (soap_out_ns__getData(soap, tag?tag:"ns:getData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getData * SOAP_FMAC4 soap_get_ns__getData(struct soap *soap, struct ns__getData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getData * SOAP_FMAC2 soap_instantiate_ns__getData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getData);
		if (size)
			*size = sizeof(struct ns__getData);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getData, n);
		if (size)
			*size = n * sizeof(struct ns__getData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getData %p -> %p\n", q, p));
	*(struct ns__getData*)p = *(struct ns__getData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getDataResponse(struct soap *soap, struct ns__getDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getDataResponse(struct soap *soap, const struct ns__getDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarrayOfData(soap, &a->data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getDataResponse(struct soap *soap, const char *tag, int id, const struct ns__getDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getDataResponse), type))
		return soap->error;
	if (soap_out_PointerToarrayOfData(soap, "data", -1, &a->data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_in_ns__getDataResponse(struct soap *soap, const char *tag, struct ns__getDataResponse *a, const char *type)
{
	size_t soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getDataResponse, sizeof(struct ns__getDataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getDataResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarrayOfData(soap, "data", &a->data, "ns:Data"))
				{	soap_flag_data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getDataResponse, 0, sizeof(struct ns__getDataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getDataResponse(struct soap *soap, const struct ns__getDataResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getDataResponse);
	if (soap_out_ns__getDataResponse(soap, tag?tag:"ns:getDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getDataResponse * SOAP_FMAC4 soap_get_ns__getDataResponse(struct soap *soap, struct ns__getDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getDataResponse * SOAP_FMAC2 soap_instantiate_ns__getDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__getDataResponse);
		if (size)
			*size = sizeof(struct ns__getDataResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__getDataResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getDataResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getDataResponse %p -> %p\n", q, p));
	*(struct ns__getDataResponse*)p = *(struct ns__getDataResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putData(struct soap *soap, struct ns__putData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->nameList = NULL;
	a->data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putData(struct soap *soap, const struct ns__putData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__vectorTemplateOfstd__string(soap, &a->nameList);
	soap_serialize_PointerToarrayOfData(soap, &a->data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putData(struct soap *soap, const char *tag, int id, const struct ns__putData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__putData), type))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOfstd__string(soap, "nameList", -1, &a->nameList, ""))
		return soap->error;
	if (soap_out_PointerToarrayOfData(soap, "data", -1, &a->data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_in_ns__putData(struct soap *soap, const char *tag, struct ns__putData *a, const char *type)
{
	size_t soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__putData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__putData, sizeof(struct ns__putData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__putData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOfstd__string(soap, "nameList", &a->nameList, "xsd:string"))
					continue;
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarrayOfData(soap, "data", &a->data, "ns:Data"))
				{	soap_flag_data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__putData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__putData, 0, sizeof(struct ns__putData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putData(struct soap *soap, const struct ns__putData *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__putData);
	if (soap_out_ns__putData(soap, tag?tag:"ns:putData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__putData * SOAP_FMAC4 soap_get_ns__putData(struct soap *soap, struct ns__putData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__putData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__putData * SOAP_FMAC2 soap_instantiate_ns__putData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__putData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__putData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__putData);
		if (size)
			*size = sizeof(struct ns__putData);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__putData, n);
		if (size)
			*size = n * sizeof(struct ns__putData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__putData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__putData %p -> %p\n", q, p));
	*(struct ns__putData*)p = *(struct ns__putData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__putDataResponse(struct soap *soap, struct ns__putDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->names = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__putDataResponse(struct soap *soap, const struct ns__putDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToarrayOfName(soap, &a->names);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__putDataResponse(struct soap *soap, const char *tag, int id, const struct ns__putDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__putDataResponse), type))
		return soap->error;
	if (soap_out_PointerToarrayOfName(soap, "names", -1, &a->names, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_in_ns__putDataResponse(struct soap *soap, const char *tag, struct ns__putDataResponse *a, const char *type)
{
	size_t soap_flag_names = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__putDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__putDataResponse, sizeof(struct ns__putDataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__putDataResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_names && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToarrayOfName(soap, "names", &a->names, "xsd:string"))
				{	soap_flag_names--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__putDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__putDataResponse, 0, sizeof(struct ns__putDataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__putDataResponse(struct soap *soap, const struct ns__putDataResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__putDataResponse);
	if (soap_out_ns__putDataResponse(soap, tag?tag:"ns:putDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__putDataResponse * SOAP_FMAC4 soap_get_ns__putDataResponse(struct soap *soap, struct ns__putDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__putDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__putDataResponse * SOAP_FMAC2 soap_instantiate_ns__putDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__putDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__putDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct ns__putDataResponse);
		if (size)
			*size = sizeof(struct ns__putDataResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct ns__putDataResponse, n);
		if (size)
			*size = n * sizeof(struct ns__putDataResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__putDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__putDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__putDataResponse %p -> %p\n", q, p));
	*(struct ns__putDataResponse*)p = *(struct ns__putDataResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToStatusConnList_t(struct soap *soap, std::vector<ConnTrack_t >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_StatusConnList_t))
		soap_serialize_StatusConnList_t(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToStatusConnList_t(struct soap *soap, const char *tag, int id, std::vector<ConnTrack_t >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_StatusConnList_t(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<ConnTrack_t >** SOAP_FMAC4 soap_in_PointerToStatusConnList_t(struct soap *soap, const char *tag, std::vector<ConnTrack_t >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<ConnTrack_t >**)soap_malloc(soap, sizeof(std::vector<ConnTrack_t >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_StatusConnList_t(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToStatusConnList_t(struct soap *soap, std::vector<ConnTrack_t >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToStatusConnList_t);
	if (soap_out_PointerToStatusConnList_t(soap, tag?tag:"StatusConnList-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<ConnTrack_t >** SOAP_FMAC4 soap_get_PointerToStatusConnList_t(struct soap *soap, std::vector<ConnTrack_t >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToStatusConnList_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToStatusServicesList_t(struct soap *soap, std::vector<StatusServices_t >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_StatusServicesList_t))
		soap_serialize_StatusServicesList_t(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToStatusServicesList_t(struct soap *soap, const char *tag, int id, std::vector<StatusServices_t >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_StatusServicesList_t(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<StatusServices_t >** SOAP_FMAC4 soap_in_PointerToStatusServicesList_t(struct soap *soap, const char *tag, std::vector<StatusServices_t >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<StatusServices_t >**)soap_malloc(soap, sizeof(std::vector<StatusServices_t >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_StatusServicesList_t(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToStatusServicesList_t(struct soap *soap, std::vector<StatusServices_t >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToStatusServicesList_t);
	if (soap_out_PointerToStatusServicesList_t(soap, tag?tag:"StatusServicesList-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<StatusServices_t >** SOAP_FMAC4 soap_get_PointerToStatusServicesList_t(struct soap *soap, std::vector<StatusServices_t >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToStatusServicesList_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToNetworkData_t(struct soap *soap, NetworkData_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_NetworkData_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToNetworkData_t(struct soap *soap, const char *tag, int id, NetworkData_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_NetworkData_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 NetworkData_t ** SOAP_FMAC4 soap_in_PointerToNetworkData_t(struct soap *soap, const char *tag, NetworkData_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (NetworkData_t **)soap_malloc(soap, sizeof(NetworkData_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (NetworkData_t *)soap_instantiate_NetworkData_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	NetworkData_t ** p = (NetworkData_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_NetworkData_t, sizeof(NetworkData_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToNetworkData_t(struct soap *soap, NetworkData_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToNetworkData_t);
	if (soap_out_PointerToNetworkData_t(soap, tag?tag:"NetworkData-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 NetworkData_t ** SOAP_FMAC4 soap_get_PointerToNetworkData_t(struct soap *soap, NetworkData_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToNetworkData_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSystemData_t(struct soap *soap, SystemData_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SystemData_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSystemData_t(struct soap *soap, const char *tag, int id, SystemData_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SystemData_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SystemData_t ** SOAP_FMAC4 soap_in_PointerToSystemData_t(struct soap *soap, const char *tag, SystemData_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SystemData_t **)soap_malloc(soap, sizeof(SystemData_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SystemData_t *)soap_instantiate_SystemData_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	SystemData_t ** p = (SystemData_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SystemData_t, sizeof(SystemData_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSystemData_t(struct soap *soap, SystemData_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSystemData_t);
	if (soap_out_PointerToSystemData_t(soap, tag?tag:"SystemData-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 SystemData_t ** SOAP_FMAC4 soap_get_PointerToSystemData_t(struct soap *soap, SystemData_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSystemData_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__noResponse(struct soap *soap, struct ns__noResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__noResponse))
		soap_serialize_ns__noResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__noResponse(struct soap *soap, const char *tag, int id, struct ns__noResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__noResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns__noResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__noResponse ** SOAP_FMAC4 soap_in_PointerTons__noResponse(struct soap *soap, const char *tag, struct ns__noResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__noResponse **)soap_malloc(soap, sizeof(struct ns__noResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__noResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__noResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__noResponse, sizeof(struct ns__noResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__noResponse(struct soap *soap, struct ns__noResponse *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons__noResponse);
	if (soap_out_PointerTons__noResponse(soap, tag?tag:"ns:noResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__noResponse ** SOAP_FMAC4 soap_get_PointerTons__noResponse(struct soap *soap, struct ns__noResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__noResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSysInfo_t(struct soap *soap, SysInfo_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SysInfo_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSysInfo_t(struct soap *soap, const char *tag, int id, SysInfo_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SysInfo_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SysInfo_t ** SOAP_FMAC4 soap_in_PointerToSysInfo_t(struct soap *soap, const char *tag, SysInfo_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SysInfo_t **)soap_malloc(soap, sizeof(SysInfo_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SysInfo_t *)soap_instantiate_SysInfo_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	SysInfo_t ** p = (SysInfo_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SysInfo_t, sizeof(SysInfo_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSysInfo_t(struct soap *soap, SysInfo_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSysInfo_t);
	if (soap_out_PointerToSysInfo_t(soap, tag?tag:"SysInfo-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 SysInfo_t ** SOAP_FMAC4 soap_get_PointerToSysInfo_t(struct soap *soap, SysInfo_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSysInfo_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSysBackupRet_t(struct soap *soap, SysBackupRet_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SysBackupRet_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSysBackupRet_t(struct soap *soap, const char *tag, int id, SysBackupRet_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SysBackupRet_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 SysBackupRet_t ** SOAP_FMAC4 soap_in_PointerToSysBackupRet_t(struct soap *soap, const char *tag, SysBackupRet_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (SysBackupRet_t **)soap_malloc(soap, sizeof(SysBackupRet_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (SysBackupRet_t *)soap_instantiate_SysBackupRet_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	SysBackupRet_t ** p = (SysBackupRet_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SysBackupRet_t, sizeof(SysBackupRet_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSysBackupRet_t(struct soap *soap, SysBackupRet_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSysBackupRet_t);
	if (soap_out_PointerToSysBackupRet_t(soap, tag?tag:"SysBackupRet-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 SysBackupRet_t ** SOAP_FMAC4 soap_get_PointerToSysBackupRet_t(struct soap *soap, SysBackupRet_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSysBackupRet_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToNetInterface_t(struct soap *soap, NetInterface_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_NetInterface_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToNetInterface_t(struct soap *soap, const char *tag, int id, NetInterface_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_NetInterface_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 NetInterface_t ** SOAP_FMAC4 soap_in_PointerToNetInterface_t(struct soap *soap, const char *tag, NetInterface_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (NetInterface_t **)soap_malloc(soap, sizeof(NetInterface_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (NetInterface_t *)soap_instantiate_NetInterface_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	NetInterface_t ** p = (NetInterface_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_NetInterface_t, sizeof(NetInterface_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToNetInterface_t(struct soap *soap, NetInterface_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToNetInterface_t);
	if (soap_out_PointerToNetInterface_t(soap, tag?tag:"NetInterface-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 NetInterface_t ** SOAP_FMAC4 soap_get_PointerToNetInterface_t(struct soap *soap, NetInterface_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToNetInterface_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToRuntimeInfo_t(struct soap *soap, RuntimeInfo_t *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_RuntimeInfo_t))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToRuntimeInfo_t(struct soap *soap, const char *tag, int id, RuntimeInfo_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_RuntimeInfo_t);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 RuntimeInfo_t ** SOAP_FMAC4 soap_in_PointerToRuntimeInfo_t(struct soap *soap, const char *tag, RuntimeInfo_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (RuntimeInfo_t **)soap_malloc(soap, sizeof(RuntimeInfo_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (RuntimeInfo_t *)soap_instantiate_RuntimeInfo_t(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	RuntimeInfo_t ** p = (RuntimeInfo_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_RuntimeInfo_t, sizeof(RuntimeInfo_t), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToRuntimeInfo_t(struct soap *soap, RuntimeInfo_t *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToRuntimeInfo_t);
	if (soap_out_PointerToRuntimeInfo_t(soap, tag?tag:"RuntimeInfo-t", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 RuntimeInfo_t ** SOAP_FMAC4 soap_get_PointerToRuntimeInfo_t(struct soap *soap, RuntimeInfo_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToRuntimeInfo_t(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_bool);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfName(struct soap *soap, arrayOfName *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfName(struct soap *soap, const char *tag, int id, arrayOfName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_arrayOfName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_in_PointerToarrayOfName(struct soap *soap, const char *tag, arrayOfName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arrayOfName **)soap_malloc(soap, sizeof(arrayOfName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arrayOfName *)soap_instantiate_arrayOfName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arrayOfName ** p = (arrayOfName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arrayOfName, sizeof(arrayOfName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfName(struct soap *soap, arrayOfName *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarrayOfName);
	if (soap_out_PointerToarrayOfName(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arrayOfName ** SOAP_FMAC4 soap_get_PointerToarrayOfName(struct soap *soap, arrayOfName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarrayOfName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarrayOfData(struct soap *soap, arrayOfData *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarrayOfData(struct soap *soap, const char *tag, int id, arrayOfData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_arrayOfData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_in_PointerToarrayOfData(struct soap *soap, const char *tag, arrayOfData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (arrayOfData **)soap_malloc(soap, sizeof(arrayOfData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (arrayOfData *)soap_instantiate_arrayOfData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	arrayOfData ** p = (arrayOfData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_arrayOfData, sizeof(arrayOfData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarrayOfData(struct soap *soap, arrayOfData *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToarrayOfData);
	if (soap_out_PointerToarrayOfData(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 arrayOfData ** SOAP_FMAC4 soap_get_PointerToarrayOfData(struct soap *soap, arrayOfData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToarrayOfData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOfstd__string))
		soap_serialize_std__vectorTemplateOfstd__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, std::vector<std::string >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOfstd__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<std::string >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >**a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
	{	if (!(a = (std::vector<std::string >**)soap_malloc(soap, sizeof(std::vector<std::string >*))))
			return NULL;
		*a = NULL;
	}
	if (!(*a = soap_in_std__vectorTemplateOfstd__string(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__vectorTemplateOfstd__string);
	if (soap_out_PointerTostd__vectorTemplateOfstd__string(soap, tag?tag:"", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::vector<std::string >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOfstd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__Data(struct soap *soap, ns__Data *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__Data(struct soap *soap, const char *tag, int id, ns__Data *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_ns__Data);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_in_PointerTons__Data(struct soap *soap, const char *tag, ns__Data **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__Data **)soap_malloc(soap, sizeof(ns__Data *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__Data *)soap_instantiate_ns__Data(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__Data ** p = (ns__Data **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__Data, sizeof(ns__Data), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__Data(struct soap *soap, ns__Data *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons__Data);
	if (soap_out_PointerTons__Data(soap, tag?tag:"ns:Data", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__Data ** SOAP_FMAC4 soap_get_PointerTons__Data(struct soap *soap, ns__Data **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StatusConnList_t(struct soap *soap, const std::vector<ConnTrack_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ConnTrack_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfConnTrack_t(struct soap *soap, std::vector<ConnTrack_t >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfConnTrack_t(struct soap *soap, const std::vector<ConnTrack_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ConnTrack_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfConnTrack_t(struct soap *soap, const char *tag, int id, const std::vector<ConnTrack_t >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ConnTrack_t >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ConnTrack_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfConnTrack_t(struct soap *soap, const char *tag, std::vector<ConnTrack_t >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		ConnTrack_t n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOfConnTrack_t(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ConnTrack_t, SOAP_TYPE_std__vectorTemplateOfConnTrack_t, sizeof(ConnTrack_t), 0))
				break;
			if (!soap_in_ConnTrack_t(soap, tag, NULL, "ConnTrack-t"))
				break;
		}
		else if (!soap_in_ConnTrack_t(soap, tag, &n, "ConnTrack-t"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ConnTrack_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfConnTrack_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfConnTrack_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfConnTrack_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<ConnTrack_t >);
		if (size)
			*size = sizeof(std::vector<ConnTrack_t >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<ConnTrack_t >, n);
		if (size)
			*size = n * sizeof(std::vector<ConnTrack_t >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ConnTrack_t >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfConnTrack_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ConnTrack_t > %p -> %p\n", q, p));
	*(std::vector<ConnTrack_t >*)p = *(std::vector<ConnTrack_t >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_StatusServicesList_t(struct soap *soap, const std::vector<StatusServices_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<StatusServices_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfStatusServices_t(struct soap *soap, std::vector<StatusServices_t >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfStatusServices_t(struct soap *soap, const std::vector<StatusServices_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<StatusServices_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfStatusServices_t(struct soap *soap, const char *tag, int id, const std::vector<StatusServices_t >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<StatusServices_t >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<StatusServices_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfStatusServices_t(struct soap *soap, const char *tag, std::vector<StatusServices_t >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		StatusServices_t n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOfStatusServices_t(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_StatusServices_t, SOAP_TYPE_std__vectorTemplateOfStatusServices_t, sizeof(StatusServices_t), 0))
				break;
			if (!soap_in_StatusServices_t(soap, tag, NULL, "StatusServices-t"))
				break;
		}
		else if (!soap_in_StatusServices_t(soap, tag, &n, "StatusServices-t"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<StatusServices_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfStatusServices_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfStatusServices_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfStatusServices_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<StatusServices_t >);
		if (size)
			*size = sizeof(std::vector<StatusServices_t >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<StatusServices_t >, n);
		if (size)
			*size = n * sizeof(std::vector<StatusServices_t >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<StatusServices_t >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfStatusServices_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<StatusServices_t > %p -> %p\n", q, p));
	*(std::vector<StatusServices_t >*)p = *(std::vector<StatusServices_t >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfNetTraffic_t(struct soap *soap, std::vector<NetTraffic_t >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfNetTraffic_t(struct soap *soap, const std::vector<NetTraffic_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<NetTraffic_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfNetTraffic_t(struct soap *soap, const char *tag, int id, const std::vector<NetTraffic_t >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<NetTraffic_t >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<NetTraffic_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfNetTraffic_t(struct soap *soap, const char *tag, std::vector<NetTraffic_t >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		NetTraffic_t n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOfNetTraffic_t(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_NetTraffic_t, SOAP_TYPE_std__vectorTemplateOfNetTraffic_t, sizeof(NetTraffic_t), 0))
				break;
			if (!soap_in_NetTraffic_t(soap, tag, NULL, "NetTraffic-t"))
				break;
		}
		else if (!soap_in_NetTraffic_t(soap, tag, &n, "NetTraffic-t"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<NetTraffic_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfNetTraffic_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfNetTraffic_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfNetTraffic_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<NetTraffic_t >);
		if (size)
			*size = sizeof(std::vector<NetTraffic_t >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<NetTraffic_t >, n);
		if (size)
			*size = n * sizeof(std::vector<NetTraffic_t >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<NetTraffic_t >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfNetTraffic_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<NetTraffic_t > %p -> %p\n", q, p));
	*(std::vector<NetTraffic_t >*)p = *(std::vector<NetTraffic_t >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfGraphData_t(struct soap *soap, std::vector<GraphData_t >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfGraphData_t(struct soap *soap, const std::vector<GraphData_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<GraphData_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfGraphData_t(struct soap *soap, const char *tag, int id, const std::vector<GraphData_t >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<GraphData_t >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<GraphData_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfGraphData_t(struct soap *soap, const char *tag, std::vector<GraphData_t >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		GraphData_t n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOfGraphData_t(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_GraphData_t, SOAP_TYPE_std__vectorTemplateOfGraphData_t, sizeof(GraphData_t), 0))
				break;
			if (!soap_in_GraphData_t(soap, tag, NULL, "GraphData-t"))
				break;
		}
		else if (!soap_in_GraphData_t(soap, tag, &n, "GraphData-t"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<GraphData_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfGraphData_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfGraphData_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfGraphData_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<GraphData_t >);
		if (size)
			*size = sizeof(std::vector<GraphData_t >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<GraphData_t >, n);
		if (size)
			*size = n * sizeof(std::vector<GraphData_t >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<GraphData_t >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfGraphData_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<GraphData_t > %p -> %p\n", q, p));
	*(std::vector<GraphData_t >*)p = *(std::vector<GraphData_t >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		int n;
		soap_default_int(soap, &n);
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_int, SOAP_TYPE_std__vectorTemplateOfint, sizeof(int), 0))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else if (!soap_in_int(soap, tag, &n, "xsd:int"))
			break;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfint, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<int >);
		if (size)
			*size = sizeof(std::vector<int >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<int >, n);
		if (size)
			*size = n * sizeof(std::vector<int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<int > %p -> %p\n", q, p));
	*(std::vector<int >*)p = *(std::vector<int >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfIfInfot_t(struct soap *soap, std::vector<IfInfot_t >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfIfInfot_t(struct soap *soap, const std::vector<IfInfot_t >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<IfInfot_t >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfIfInfot_t(struct soap *soap, const char *tag, int id, const std::vector<IfInfot_t >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<IfInfot_t >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<IfInfot_t >* SOAP_FMAC4 soap_in_std__vectorTemplateOfIfInfot_t(struct soap *soap, const char *tag, std::vector<IfInfot_t >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		IfInfot_t n;
		n.soap_default(soap);
		if (!a && !(a = soap_new_std__vectorTemplateOfIfInfot_t(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_IfInfot_t, SOAP_TYPE_std__vectorTemplateOfIfInfot_t, sizeof(IfInfot_t), 0))
				break;
			if (!soap_in_IfInfot_t(soap, tag, NULL, "IfInfot-t"))
				break;
		}
		else if (!soap_in_IfInfot_t(soap, tag, &n, "IfInfot-t"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<IfInfot_t > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfIfInfot_t(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfIfInfot_t(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfIfInfot_t, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<IfInfot_t >);
		if (size)
			*size = sizeof(std::vector<IfInfot_t >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<IfInfot_t >, n);
		if (size)
			*size = n * sizeof(std::vector<IfInfot_t >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<IfInfot_t >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfIfInfot_t(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<IfInfot_t > %p -> %p\n", q, p));
	*(std::vector<IfInfot_t >*)p = *(std::vector<IfInfot_t >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		std::string n;
		soap_default_std__string(soap, &n);
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
